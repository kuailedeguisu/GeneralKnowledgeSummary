switch语句结构：
switch表达式的类型：
byte，short，int, char
JDK5以后可以是枚举
JDK7以后可以是字符串
break:让每一个匹配项后面的项不执行
default：所以匹配项结束后，不匹配项对应的分支，可以省略break。对异常的处理。
case后只能是常量表达式
多个case后的常量表达式不能相同
break不可以省略，因为做完一次匹配项判断后，就不做判断，但是后面匹配项的语句也会执行。叫case穿透
switch语句结束的标志是break；遇到末尾就结束了
String s = sc.nextLine();//输入一个字符串

如何获取一个数的个位，百位，千位，万位，。。。
个位   x % 10
十位   x / 10 % 10
百位   x / 10 / 10 % 10
千位   x / 10 / 10 / 10 % 10
万位   x / 10 / 10 / 10 / 10 % 10
十万位 x / 10 / 10 / 10 / 10 / 10 % 10
...
x / 10 ^ (n - 1) % 10;//n为从右数第n位

水仙花数：
三位数，每位上的数字的立方和等于这个三位数
153 = 1*1*1 + 5*5*5 + 3*3*3

如果明确范围，用for循环；如果不确定要做多少次，用while

Ex：一张足够大的纸，厚度是0.01m，珠穆朗玛峰高度是8848m，请问折叠多少次可以达到珠穆朗玛峰的高度？
class WhileDemo4 {
	public static void main(String[] args) {
		int count = 0;
		int start = 1;
		int end = 884800;
		while (start < end) {
			count++;
			start *= 2;
			System.out.println(start);
		}
		System.out.println("The total count is " + count);
	}
}

do...while至少执行一次循环体，然后再判断条件是否成立；而while和for循环都是先判断条件是否成立
优先考虑for，然后考虑while，最后考虑do...while

Ex:打印四行五列的*
*****
*****
*****
*****
class LoopDemo6 {
	public static void main(String[] args) {
		for (int i = 0; i < 4; ++i) {
			for (int j = 0; j < 5; ++j) {
				System.out.print('*');
			}
			System.out.println();
		}
	}
}

行列数据的forfor循环：外循环控制行数，内循环控制列数

System.out.println();//只有换行功能
System.out.println("*");//有换行
System.out.print("*");//没有换行

打印一个直角三角形
/*
*
**
***
****
*****
//第一行：1列（i=0, j=0）
//第二行：2列 (i=1, j=0,j=1)
//第三行：3列 (i=2, j=0,j=1,j=2)
//第四行：4列 (i=3, j=0,j=1,j=2,j=3)
//第五行：5列 (i=4, j=0,j=1,j=2,j=3,j=4)
*/
class LoopDemo7 {
	public static void main(String[] args) {
		for (int i = 0; i < 5; ++i) {
			for (int j = 0; j <= i; ++j) {
				System.out.print("*");
			}
			System.out.println();
		}
	}
}

输出九九乘法表
/*
1*1=1
1*2=2 2*2=4
1*3=3 2*3=6 3*3=9
......
1*9=9 2*9=18 3*9=27 ...
*/
class LoopDemo8 {
	public static void main(String[] args) {
		for (int i = 1; i <= 9; ++i) {
			for (int j = 1; j <= i; ++j) {
				System.out.print(j+"*"+i+"="+j*i+"\t");
			}
			System.out.println();
		}
	}
}

转义字符：
'\t' tab
'\r' return
'\n' next line

程序跳转：
break 中断，只能在switch或者loop中使用，跳出
continue 继续
return 返回

break：
A:跳出单层循环
B:跳出多层循环 
	带标签的语句 
	标签名:语句
/*
默认只跳出最内层的循环
**
**
**
*/
class BreakDemo {
	public static void main(String[] args) {
		for (int i=0; i<3; ++i) {
			for (int j=0; j<4; ++j) {
				if (j == 2) {
					break;
				}
				System.out.print("*");
			}
			System.out.println();
		}
	}
}

/*
跳出内层循环
**
**
**
*/
class BreakDemo1 {
	public static void main(String[] args) {
		wc:for (int i=0; i<3; ++i) {
			nc:for (int j=0; j<4; ++j) {
				if (j == 2) {
					break nc;
				}
				System.out.print("*");
			}
			System.out.println();
		}
	}
}
/*
跳出外层循环
**
*/
class BreakDemo2 {
	public static void main(String[] args) {
		wc:for (int i=0; i<3; ++i) {
			nc:for (int j=0; j<4; ++j) {
				if (j == 2) {
					break wc;
				}
				System.out.print("*");
			}
			System.out.println();
		}
	}
}

continue:
只能在loop中用
也可以带标签使用
跳出一次循环,进行下次循环

return:
更常用的是退出方法


class WhileDemo5 {
	public static void main(String[] args) {
		int dayCount = 1;
		double daySum = 0;
		double dayMoney = 2.5;
		double result = 100;
		while(true) {
			daySum += dayMoney;
			if (daySum >= result) {
				System.out.println("It is enough for 100 yuan");
				break;
			}
			if (dayCount % 5 == 0) {
				daySum -= 6;
			}
			dayCount++;
		}
		System.out.println(dayCount);
	}
}
