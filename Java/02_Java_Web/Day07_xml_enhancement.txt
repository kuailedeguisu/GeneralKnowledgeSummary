1. xml write to file
1.1 write xml file to file
************************************************************************************
contact.xml
************************************************************************************
<?xml version="1.0" encoding="utf-8"?>
<contactList>
	<contact id="001" name="eric">
		<name>张三</name>
		<age>20</age>
		<phone>134222223333</phone>
		<email>zhangsan@qq.com</email>
		<qq>432221111</qq>
	</contact>
	<contact id="002" name="jacky">
		<name>eric</name>
		<age>20</age>
		<phone>134222225555</phone>
		<email>lisi@qq.com</email>
		<qq>432222222</qq>
	</contact>
</contactList>
******************************************************************************************
XmlWrittenToFile.java
******************************************************************************************
package xml.dom4j.write;

import java.io.File;
import java.io.FileOutputStream;

import org.dom4j.Document;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;

public class XmlWrittenToFile {

	public static void main(String[] args) throws Exception {
		Document doc = new SAXReader().read(new File("./src/contact.xml"));
		FileOutputStream fos = new FileOutputStream("./src/contactOriginal.xml");
		XMLWriter writer = new XMLWriter(fos);
		writer.write(doc);
		writer.close();
	}
}
******************************************************************************************
contactOriginal.xml
******************************************************************************************
<?xml version="1.0" encoding="UTF-8"?>
<contactList>
	<contact id="001" name="eric">
		<name>张三</name>
		<age>20</age>
		<phone>134222223333</phone>
		<email>zhangsan@qq.com</email>
		<qq>432221111</qq>
	</contact>
	<contact id="002" name="jacky">
		<name>eric</name>
		<age>20</age>
		<phone>134222225555</phone>
		<email>lisi@qq.com</email>
		<qq>432222222</qq>
	</contact>
</contactList>
******************************************************************************************

1.2 write special format xml to file
******************************************************************************************
XmlContentWrittenToFile.java
******************************************************************************************
package xml.dom4j.write;

import java.io.File;
import java.io.FileOutputStream;

import org.dom4j.Document;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;

public class XmlContentWrittenToFile {

	public static void main(String[] args) throws Exception {
		Document doc = new SAXReader().read(new File("./src/contact.xml"));
		FileOutputStream fos = new FileOutputStream(new File("./src/contactCompactContent.xml"));
		OutputFormat format = OutputFormat.createCompactFormat();
//		FileOutputStream fos = new FileOutputStream(new File("./src/contactPrettyContent.xml"));
//		OutputFormat format = OutputFormat.createPrettyPrint();
		format.setEncoding("utf-8");
		XMLWriter writer = new XMLWriter(fos, format);
		writer.write(doc);
		writer.close();
	}
}
******************************************************************************************
contactCompactContent.xml
******************************************************************************************

<?xml version="1.0" encoding="utf-8"?>
<contactList><contact id="001" name="eric"><name>张三</name><age>20</age><phone>134222223333</phone><email>zhangsan@qq.com</email><qq>432221111</qq></contact><contact id="002" name="jacky"><name>eric</name><age>20</age><phone>134222225555</phone><email>lisi@qq.com</email><qq>432222222</qq></contact></contactList>
******************************************************************************************

1.3 write modified xml to file
******************************************************************************************
XmlModificationWrittenToFile.java
******************************************************************************************
package xml.dom4j.write;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Iterator;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import org.junit.Test;

public class XmlModificationWrittenToFile {
	@Test
	public void writeDocToFile() throws Exception {
		Document doc = DocumentHelper.createDocument();
		Element rootElem = doc.addElement("contactList");
		Element contactElem = rootElem.addElement("contact");
		contactElem.addAttribute("id", "001");
		contactElem.addElement("name").setText("eric");
		contactElem.addElement("age").setText("20");
		contactElem.addElement("phone").setText("13512345678");
		contactElem.addElement("email").setText("eric@qq.com");
		contactElem.addElement("qq").setText("12345");
		
		Element contactElem2 = rootElem.addElement("contact");
		contactElem2.addAttribute("id", "002");
		contactElem2.addElement("name").setText("andy");
		contactElem2.addElement("age").setText("30");
		contactElem2.addElement("phone").setText("13812345679");
		contactElem2.addElement("email").setText("andy@qq.com");
		contactElem2.addElement("qq").setText("67890");
		
		FileOutputStream fos = new FileOutputStream(new File("./src/contactCreated.xml"));
		OutputFormat format = OutputFormat.createPrettyPrint();
		format.setEncoding("utf-8");
		XMLWriter writer = new XMLWriter(fos, format);
		writer.write(doc);
		writer.close();
		
	}
	
	@Test
	public void modifyXmlToFile() throws Exception {
		Document document = new SAXReader().read(new File("./src/contactCreated.xml"));
		Iterator<Element> iterator = document.getRootElement().elementIterator("contact");
		while(iterator.hasNext()) {
			Element element = iterator.next();
			if (element.attributeValue("id").equals("002")) {
				element.element("name").setText("anele");
				element.element("email").setText("anele@qq.com");
			}
		}
		
		FileOutputStream fos = new FileOutputStream(new File("./src/contactModified.xml"));
		XMLWriter writer = new XMLWriter(fos);
		writer.write(document);
		writer.close();
		
	}
	
	@Test
	public void deleteElementToFile() throws Exception {
		Document document = new SAXReader().read(new File("./src/contactCreated.xml"));
		Element contactElem = (Element) document.getRootElement().elements().get(1);
		contactElem.detach();
		
		FileOutputStream fos = new FileOutputStream(new File("./src/contactDeleted.xml"));
		XMLWriter writer = new XMLWriter(fos);
		writer.write(document);
		writer.close();
	}
	

}
******************************************************************************************
******************************************************************************************
contactCreated.xml
******************************************************************************************
<?xml version="1.0" encoding="utf-8"?>

<contactList>
  <contact id="001">
    <name>eric</name>
    <age>20</age>
    <phone>13512345678</phone>
    <email>eric@qq.com</email>
    <qq>12345</qq>
  </contact>
  <contact id="002">
    <name>andy</name>
    <age>30</age>
    <phone>13812345679</phone>
    <email>andy@qq.com</email>
    <qq>67890</qq>
  </contact>
</contactList>



******************************************************************************************
contactModified.xml
******************************************************************************************
<?xml version="1.0" encoding="UTF-8"?>
<contactList>
  <contact id="001">
    <name>eric</name>
    <age>20</age>
    <phone>13512345678</phone>
    <email>eric@qq.com</email>
    <qq>12345</qq>
  </contact>
  <contact id="002">
    <name>anele</name>
    <age>30</age>
    <phone>13812345679</phone>
    <email>anele@qq.com</email>
    <qq>67890</qq>
  </contact>
</contactList>

******************************************************************************************
contactDeleted.xml
******************************************************************************************
<?xml version="1.0" encoding="UTF-8"?>
<contactList>
  <contact id="001">
    <name>eric</name>
    <age>20</age>
    <phone>13512345678</phone>
    <email>eric@qq.com</email>
    <qq>12345</qq>
  </contact>
  
</contactList>

******************************************************************************************


1.4 Practice
******************************************************************************************
StudentPractice.java
******************************************************************************************
package xml.dom4j.write;

import java.io.File;
import java.io.FileOutputStream;
import java.util.Iterator;

import org.dom4j.Document;
import org.dom4j.DocumentHelper;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;
import org.junit.Test;

public class StudentPractice {
	@Test
	public void createStudentXmlToFile() throws Exception {
		Document doc = DocumentHelper.createDocument();
		Element rootElem = doc.addElement("students");
		Element studentElem = rootElem.addElement("student");
		studentElem.addAttribute("id", "001");
		studentElem.addElement("name").setText("Peter");
		studentElem.addElement("gender").setText("male");
		studentElem.addElement("grade").setText("No.1");
		studentElem.addElement("city").setText("Beijing");
		
		Element studentElem2 = rootElem.addElement("student");
		studentElem2.addAttribute("id", "002");
		studentElem2.addElement("name").setText("Mary");
		studentElem2.addElement("gender").setText("female");
		studentElem2.addElement("grade").setText("No.2");
		studentElem2.addElement("city").setText("Shanghai");
		
		FileOutputStream fos = new FileOutputStream(new File("./src/studentCreated.xml"));
		OutputFormat format = OutputFormat.createPrettyPrint();
		format.setEncoding("utf-8");
		XMLWriter writer = new XMLWriter(fos, format);
		writer.write(doc);
		writer.close();
	}
	
	@Test
	public void modifyStudentXmlToFile() throws Exception {
		Document document = new SAXReader().read(new File("./src/studentCreated.xml"));
		Iterator<Element> stuIter = document.getRootElement().elementIterator();
		while(stuIter.hasNext()) {
			Element stuElement = stuIter.next();
			if (stuElement.attributeValue("id").equals("002")) {
				stuElement.element("name").setText("Susan");
				break;
			}
		}
		
		FileOutputStream fos = new FileOutputStream(new File("./src/studentModified.xml"));
		OutputFormat format = OutputFormat.createPrettyPrint();
		format.setEncoding("utf-8");
		XMLWriter writer = new XMLWriter(fos, format);
		writer.write(document);
		writer.close();
	}
	
	@Test
	public void deleteStudentXmlToFile() throws Exception {
		Document document = new SAXReader().read(new File("./src/studentCreated.xml"));
		Iterator<Element> stuIter = document.getRootElement().elementIterator();
		while(stuIter.hasNext()) {
			Element stuElement = stuIter.next();
			if (stuElement.attributeValue("id").equals("002")) {
				stuElement.detach();
				break;
			}
		}
		
		FileOutputStream fos = new FileOutputStream(new File("./src/studentDeleted.xml"));
		OutputFormat format = OutputFormat.createPrettyPrint();
		format.setEncoding("utf-8");
		XMLWriter writer = new XMLWriter(fos, format);
		writer.write(document);
		writer.close();
	}
}

******************************************************************************************
StudentCreated.java
******************************************************************************************
<?xml version="1.0" encoding="utf-8"?>

<students>
  <student id="001">
    <name>Peter</name>
    <gender>male</gender>
    <grade>No.1</grade>
    <city>Beijing</city>
  </student>
  <student id="002">
    <name>Mary</name>
    <gender>female</gender>
    <grade>No.2</grade>
    <city>Shanghai</city>
  </student>
</students>

******************************************************************************************
StudentModified.java
******************************************************************************************
<?xml version="1.0" encoding="utf-8"?>

<students> 
  <student id="001"> 
    <name>Peter</name>  
    <gender>male</gender>  
    <grade>No.1</grade>  
    <city>Beijing</city> 
  </student>  
  <student id="002"> 
    <name>Susan</name>  
    <gender>female</gender>  
    <grade>No.2</grade>  
    <city>Shanghai</city> 
  </student> 
</students>

******************************************************************************************
StudentDeleted.java
******************************************************************************************
<?xml version="1.0" encoding="utf-8"?>

<students> 
  <student id="001"> 
    <name>Peter</name>  
    <gender>male</gender>  
    <grade>No.1</grade>  
    <city>Beijing</city> 
  </student> 
</students>
******************************************************************************************

2. xpath
我们需要import package: 
	dom4j-1.6.1.jar
	jaxen-1.1-beta-6.jar
2.1 The first xpath 
******************************************************************************************
studentCreated.xml
******************************************************************************************
<?xml version="1.0" encoding="utf-8"?>

<students>
  <student id="001">
    <name>Peter</name>
    <gender>male</gender>
    <grade>No.1</grade>
    <city>Beijing</city>
  </student>
  <student id="002">
    <name>Mary</name>
    <gender>female</gender>
    <grade>No.2</grade>
    <city>Shanghai</city>
  </student>
</students>
******************************************************************************************
FirstXpath.java
******************************************************************************************
package xml.dom4j.xpath;

import java.io.File;
import java.io.FileOutputStream;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.OutputFormat;
import org.dom4j.io.SAXReader;
import org.dom4j.io.XMLWriter;

public class FirstXpath {

	public static void main(String[] args) throws Exception {
		Document doc = new SAXReader().read(new File("./src/studentCreated.xml"));
		Element stuElem = (Element) doc.selectSingleNode("//student[@id='002']");
		stuElem.detach();
		
		FileOutputStream fos = new FileOutputStream(new File("./src/studentXpathDeleted.xml"));
		OutputFormat format = OutputFormat.createPrettyPrint();
		format.setEncoding("utf-8");
		XMLWriter writer = new XMLWriter(fos, format);
		writer.write(doc);
		writer.close();
	}

}
******************************************************************************************
studentXpathDeleted.xml
<?xml version="1.0" encoding="utf-8"?>

<students> 
  <student id="001"> 
    <name>Peter</name>  
    <gender>male</gender>  
    <grade>No.1</grade>  
    <city>Beijing</city> 
  </student> 
</students>
******************************************************************************************

2.2 xpath basic syntax
*******************************************************************************************
XpathSyntax.java
*******************************************************************************************
package xml.dom4j.xpath;

import java.io.File;
import java.util.List;

import org.dom4j.Document;
import org.dom4j.Node;
import org.dom4j.io.SAXReader;

public class XpathSyntax {

	public static void main(String[] args) throws Exception {
		Document doc = new SAXReader().read(new File("./src/contact.xml"));
		String xpath = "";
		
		// 绝对路径
		xpath = "/contactList";
		xpath = "/contactList/contact";
		
		// 相对路径
		xpath = "//contact/name";
		xpath = "//name";
		
		// 通配符
		xpath = "/contactList/*";// 根标签contactList下的所有子标签
		xpath = "/contactList//*";// 根标签contactList下的所有标签（不分层次结构）
		
		// 条件
		xpath = "//contact/[@id]";
		xpath = "//contact[2]";
		xpath = "//contact[last()]";
		
		// 属性
		xpath = "//@id";
		xpath = "//contact[not (@id)]";
		xpath = "//contact[@id='002']";
		xpath = "//contact[@id='001' and @name = 'eric']";
		
		// text()
		xpath = "//name/text()";
		xpath = "//contact/name[text()='张三']";
		
		List<Node> list = doc.selectNodes(xpath);
		for (Node node : list) {
			System.out.println(node.getName()+"="+node.getText());
		}
	}

}
*******************************************************************************************
result:
name=张三
********************************************************************************************

2.3 模拟用户登陆系统
********************************************************************************************
user.xml
********************************************************************************************
<?xml version="1.0" encoding="utf-8"?>
<users>
	<user id="001" name="eric" password="123456"></user>
	<user id="002" name="rose" password="123456"></user>
	<user id="003" name="jack" password="123456"></user>
</users>
********************************************************************************************
package xml.dom4j.xpath;

import java.io.BufferedReader;
import java.io.InputStreamReader;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

public class UserLoginSystem {
	public static void main(String[] args) throws Exception {
		BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
		System.out.println("请输入用户名：");
		String name = reader.readLine();
		System.out.println("请输入密码：");
		String password = reader.readLine();
		
		Document doc = new SAXReader().read("./src/user.xml");
		Element userElem = (Element)doc.selectSingleNode("//user[@name='" +name+"' and @password='"+password+"']");
		if (userElem != null) {
			System.out.println("登陆成功");
		} else {
			System.out.println("登陆失败");
		}
		
	}

}
*******************************************************************************
result:
请输入用户名：
eric
请输入密码：
123456
登陆成功
*********************************************************************************

2.4 读取标准的html文档
***********************************************************************************
personList.html
***********************************************************************************
<html>
	<head>
		<title>传智播客1月18号班通讯录</title>
		<meta http-equiv="content-type" content="text/html; charset=UTF-8" />
	</head>
	<body>
		<center><h1>12月16号就业班通讯录</h1></center>
		<table border="1" align="center" id="contactForm">
			<thead>	
				<tr><th>编号</th><th>姓名</th><th>性别</th><th>年龄</th><th>地址</th><th>电话</th></tr>
			</thead>
			<tbody>
				<tr>
				<td>001</td>
				<td>张三</td>
				<td>男</td>
				<td>18</td>
				<td>广州市天河区</td>
				<td>134000000000</td>
				</tr>
				<tr>
				<td>002</td>
				<td>李四</td>
				<td>女</td>
				<td>20</td>
				<td>广州市越秀区</td>
				<td>13888888888</td>
				</tr>
				<tr>
				<td>002</td>
				<td>郭靖</td>
				<td>男</td>
				<td>30</td>
				<td>广州市番禺区</td>
				<td>1342214321</td>
				</tr>
			</tbody>
		</table>
	</body>
</html>
********************************************************************************************
ReadStandardHtmlFile.java
********************************************************************************************
package xml.dom4j.xpath;

import java.util.List;

import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.io.SAXReader;

public class ReadStandardHtmlFile {

	public static void main(String[] args) throws Exception {
		Document doc = new SAXReader().read("./src/personList.html");
		Element titleElem = (Element)doc.selectSingleNode("//title");
		String title = titleElem.getText();
		System.out.println(title);
		
		List<Element> trElems = doc.selectNodes("//tbody/tr");
		for (Element trElem : trElems) {
			String id = trElem.selectSingleNode("td[1]").getText();
			String name = ((Element)trElem.elements().get(1)).getText();
			String gender = ((Element)trElem.elements().get(2)).getText();
			String age = ((Element)trElem.elements().get(3)).getText();
			String address = ((Element)trElem.elements().get(4)).getText();
			String phone = ((Element)trElem.elements().get(5)).getText();
			
			System.out.println("编号："+id+"\tname:"+name+"\tgender:"+gender+"\tage:"+age+"\taddress:"+address+"\tphone:"+phone);
		}

	}

}
***********************************************************************************************
result:
***********************************************************************************************
传智播客1月18号班通讯录
编号：001	name:张三	gender:男	age:18	address:广州市天河区	phone:134000000000
编号：002	name:李四	gender:女	age:20	address:广州市越秀区	phone:13888888888
编号：002	name:郭靖	gender:男	age:30	address:广州市番禺区	phone:1342214321
***********************************************************************************************

3. SAX 
3.1 MyDefaultHandler
***********************************************************************************************
contact.xml
***********************************************************************************************
<?xml version="1.0" encoding="utf-8"?>
<contactList>
	<contact id="001" name="eric">
		<name>张三</name>
		<age>20</age>
		<phone>134222223333</phone>
		<email>zhangsan@qq.com</email>
		<qq>432221111</qq>
	</contact>
	<contact id="002" name="jacky">
		<name>eric</name>
		<age>20</age>
		<phone>134222225555</phone>
		<email>lisi@qq.com</email>
		<qq>432222222</qq>
	</contact>
</contactList>
************************************************************************************************
Contact.java
************************************************************************************************
package xml.dom4j.sax;

public class Contact {
	private String id;
	private String name;
	private String age;
	private String phone;
	private String email;
	private String qq;
	
	public String getId() {
		return id;
	}
	
	public void setId(String id) {
		this.id = id;
	}
	
	public String getName() {
		return name;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getAge() {
		return age;
	}
	
	public void setAge(String age) {
		this.age = age;
	}
	
	public String getPhone() {
		return phone;
	}
	
	public void setPhone(String phone) {
		this.phone = phone;
	}
	
	public String getEmail() {
		return email;
	}
	
	public void setEmail(String email) {
		this.email = email;
	}
	
	public String getQq() {
		return qq;
	}
	
	public void setQq(String qq) {
		this.qq = qq;
	}
	
	@Override
	public String toString() {
		return "Contact [id=" + id + ", name=" + name + ", age=" + age + ", phone=" + phone + ", email=" + email
				+ ", qq=" + qq + "]";
	}
}
*********************************************************************************************************************
MySaxDefaultHandler.java
*********************************************************************************************************************
package xml.dom4j.sax;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class MySaxDefaultHandler extends DefaultHandler {
	@Override
	public void startDocument() throws SAXException {
		
		System.out.println("MySaxDefaultHandler.startDocument()");
	}

	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		
		System.out.println("MySaxDefaultHandler.startElement()--->"+qName);
	}

	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		
		System.out.println("MySaxDefaultHandler.endElement()--->"+qName);
	}

	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		String content = new String(ch, start, length);
		System.out.println("MySaxDefaultHandler.characters()--->"+content);
	}

	@Override
	public void endDocument() throws SAXException {
		
		System.out.println("MySaxDefaultHandler.endDocument()");
	}

}


*****************************************************************************************************************************
MySaxDefaultHandlerTest.java
*****************************************************************************************************************************
package xml.dom4j.sax;

import java.io.File;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

public class MySaxDefaultHandlerTest {

	public static void main(String[] args) throws Exception {
		SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
		parser.parse(new File("./src/contact.xml"), new MySaxDefaultHandler());
	}
}
********************************************************************************************************************************
result:
********************************************************************************************************************************
MySaxDefaultHandler.startDocument()
MySaxDefaultHandler.startElement()--->contactList
MySaxDefaultHandler.characters()--->
	
MySaxDefaultHandler.startElement()--->contact
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->name
MySaxDefaultHandler.characters()--->张三
MySaxDefaultHandler.endElement()--->name
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->age
MySaxDefaultHandler.characters()--->20
MySaxDefaultHandler.endElement()--->age
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->phone
MySaxDefaultHandler.characters()--->134222223333
MySaxDefaultHandler.endElement()--->phone
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->email
MySaxDefaultHandler.characters()--->zhangsan@qq.com
MySaxDefaultHandler.endElement()--->email
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->qq
MySaxDefaultHandler.characters()--->432221111
MySaxDefaultHandler.endElement()--->qq
MySaxDefaultHandler.characters()--->
	
MySaxDefaultHandler.endElement()--->contact
MySaxDefaultHandler.characters()--->
	
MySaxDefaultHandler.startElement()--->contact
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->name
MySaxDefaultHandler.characters()--->eric
MySaxDefaultHandler.endElement()--->name
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->age
MySaxDefaultHandler.characters()--->20
MySaxDefaultHandler.endElement()--->age
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->phone
MySaxDefaultHandler.characters()--->134222225555
MySaxDefaultHandler.endElement()--->phone
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->email
MySaxDefaultHandler.characters()--->lisi@qq.com
MySaxDefaultHandler.endElement()--->email
MySaxDefaultHandler.characters()--->
		
MySaxDefaultHandler.startElement()--->qq
MySaxDefaultHandler.characters()--->432222222
MySaxDefaultHandler.endElement()--->qq
MySaxDefaultHandler.characters()--->
	
MySaxDefaultHandler.endElement()--->contact
MySaxDefaultHandler.characters()--->

MySaxDefaultHandler.endElement()--->contactList
MySaxDefaultHandler.endDocument()
***********************************************************************************************************************************


3.2 MySaxDefaultHandler2-StringBuffer
***********************************************************************************************************************************
MySaxDefaultHandler2.java
***********************************************************************************************************************************
package xml.dom4j.sax;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class MySaxDefaultHandler2 extends DefaultHandler {
	private StringBuffer sb = new StringBuffer();
	
	public String getContent() {
		return sb.toString();
	}

	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		
		sb.append("<"+qName);
		if (attributes != null) {
			for (int i=0; i < attributes.getLength(); ++i) {
				String attrName = attributes.getQName(i);
				String attrValue = attributes.getValue(i);
				sb.append(" "+attrName+"=\""+attrValue+"\"");
			}
		}
		sb.append(">");

	}

	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		
		sb.append("</"+qName+">");
	}

	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		
		String content = new String(ch, start, length);
		sb.append(content);
	}

	
}
******************************************************************************************************************************
MySaxDefaultHandler2Test.java
******************************************************************************************************************************
package xml.dom4j.sax;

import java.io.File;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

public class MySaxDefaultHandler2Test {

	public static void main(String[] args) throws Exception {
		SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
		MySaxDefaultHandler2 handler =  new MySaxDefaultHandler2();
		parser.parse(new File("./src/contact.xml"), handler);
		String content = handler.getContent();
		System.out.println(content);		
	}
}
*********************************************************************************************************************************
result:
<contactList>
	<contact id="001" name="eric">
		<name>张三</name>
		<age>20</age>
		<phone>134222223333</phone>
		<email>zhangsan@qq.com</email>
		<qq>432221111</qq>
	</contact>
	<contact id="002" name="jacky">
		<name>eric</name>
		<age>20</age>
		<phone>134222225555</phone>
		<email>lisi@qq.com</email>
		<qq>432222222</qq>
	</contact>
</contactList>
***********************************************************************************************************************************

3.3 MySaxDefaultHandler3-List
***********************************************************************************************
contact.xml
***********************************************************************************************
<?xml version="1.0" encoding="utf-8"?>
<contactList>
	<contact id="001">
		<name>张三</name>
		<age>20</age>
		<phone>134222223333</phone>
		<email>zhangsan@qq.com</email>
		<qq>432221111</qq>
	</contact>
	<contact id="002">
		<name>eric</name>
		<age>20</age>
		<phone>134222225555</phone>
		<email>lisi@qq.com</email>
		<qq>432222222</qq>
	</contact>
</contactList>
***********************************************************************************************************************************
MySaxDefaultHandler3.java
***********************************************************************************************************************************
package xml.dom4j.sax;

import java.util.ArrayList;
import java.util.List;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

public class MySaxDefaultHandler3 extends DefaultHandler {
	private List<Contact> list = new ArrayList<Contact>();
	private Contact contact;
	private String curTag;
	
	public List<Contact> getList() {
		return list;
	}

	@Override
	public void startElement(String uri, String localName, String qName, Attributes attributes) throws SAXException {
		
		curTag = qName;
		if("contact".equals(qName)) {
			contact = new Contact();
			contact.setId(attributes.getValue("id"));
		}
	}

	@Override
	public void endElement(String uri, String localName, String qName) throws SAXException {
		curTag = null;
		if ("contact".equals(qName)) {
			list.add(contact);
		}
	}

	@Override
	public void characters(char[] ch, int start, int length) throws SAXException {
		
		String content = new String(ch, start, length);
		
		if ("name".equals(curTag)) {
			contact.setName(content);
		}
		
		if ("age".equals(curTag)) {
			contact.setAge(content);
		}
		
		if ("phone".equals(curTag)) {
			contact.setPhone(content);
		}
		
		if ("email".equals(curTag)) {
			contact.setEmail(content);
		}
		
		if ("qq".equals(curTag)) {
			contact.setQq(content);
		}
	}
}
***********************************************************************************************************************************
MySaxDefaultHandler3Test.java
***********************************************************************************************************************************
package xml.dom4j.sax;

import java.io.File;
import java.util.List;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

public class MySaxDefaultHandler3Test {

	public static void main(String[] args) throws Exception {
		SAXParser parser = SAXParserFactory.newInstance().newSAXParser();
		MySaxDefaultHandler3 handler =  new MySaxDefaultHandler3();
		parser.parse(new File("./src/contact.xml"), handler);
		List<Contact> list = handler.getList();
		for (Contact contact : list) {
			System.out.println(contact);
		}		
	}
}
*************************************************************************************************************************
result:
Contact [id=001, name=张三, age=20, phone=134222223333, email=zhangsan@qq.com, qq=432221111]
Contact [id=002, name=eric, age=20, phone=134222225555, email=lisi@qq.com, qq=432222222]
***************************************************************************************************************************


1 课程回顾
XML基础
	1）XML的作用
		1.1 作为软件配置文件
		1.2 作为小型的“数据库”
	2）XML语法（由w3c组织规定的）
		标签：  
			标签名不能以数字开头，中间不能有空格，区分大小写。有且仅有一个根标签。
		属性：		
			可有多个属性，但属性值必须用引号（单引号或双引号）包含，但不能省略，也不能单双混用。
		文档声明：
			<?xml version="1.0" encoding="utf-8"?>	
			encoding="utf-8"：　打开或解析xml文档时的编码
			注意：
				保存xml文档时的编码 和 解析xml文档时的编码要保持一致，才能避免中文乱码问题！
	3）XML解析
		程序读取或操作xml文档

		两种解析方式：   DOM解析   vs   SAX解析

		DOM解析原理：一次性把xml文档加载成Document树，通过Document对象得到节点对象，通过节点对象访问xml文档内容（标签，属性，文本，注释）。

		Dom4j工具（基于DOM解析原理）：
			读取xml文档：
				Document doc = new SAXReader().read("xml文件"); 

				节点：
					nodeIterator();  所有节点
				标签：
					element("名称")   指定名称的第一个子标签对象
					elementIterator("名称");  指定名称的所有子标签对象
					elements();  所有子标签对象
				属性：
					attributeValue（“名称”） 指定名称的属性值
					attribute("名称")   指定名称的属性对象
					getName()  属性名称
					getValue（）  属性值
					atributeIterator()   所有属性对象（Iterator）
					attributes()       所有属性对象（List）
				文本：
					getText（）  得到当前标签的文本
					elementText("子标签名称")  得到子标签的文本
		
				
今天的目标：     Dom4J修改xml   + xPath技术  + SAX解析 + XML约束
2 Dom4j修改xml文档
	2.1 写出内容到xml文档
		XMLWriter writer = new XMLWriter(OutputStream, OutputForamt)
		wirter.write(Document);

	2.2 修改xml文档的API
		增加： 
			DocumentHelper.createDocument()  增加文档
			addElement("名称")  增加标签
			addAttribute("名称"，“值”)  增加属性
		修改：
			Attribute.setValue("值")  修改属性值
			Element.addAtribute("同名的属性名","值")  修改同名的属性值
			Element.setText("内容")  修改文本内容
		删除
			Element.detach();  删除标签  
			Attribute.detach();  删除属性
3 xPath技术  
	3.1 引入
	问题：当使用dom4j查询比较深的层次结构的节点（标签，属性，文本），比较麻烦！！！
	3.2 xPath作用
		主要是用于快速获取所需的节点对象。

	3.3 在dom4j中如何使用xPath技术
		1）导入xPath支持jar包 。  jaxen-1.1-beta-6.jar
		2）使用xpath方法
			List<Node>  selectNodes("xpath表达式");   查询多个节点对象
			Node       selectSingleNode("xpath表达式");  查询一个节点对象
				
	3.4 xPath语法
		/      绝对路径      表示从xml的根位置开始或子元素（一个层次结构）
		//     相对路径       表示不分任何层次结构的选择元素。
		*      通配符         表示匹配所有元素
		[]      条件          表示选择什么条件下的元素
		@       属性            表示选择属性节点
		and     关系          表示条件的与关系（等价于&&）
		text()    文本           表示选择文本内容
	3.5 案例
		用户登录功能：
			用户输入用户名和密码 -> 到“数据库”查询是否有对应的用户 -> 
				有： 则表示登录成功
				没有： 则表示登录失败

			用xml当做数据库
						user.xml   用来存储用户的数据

4 SAX解析
	4.1回顾DOM解析
		DOM解析原理：一次性把xml文档加载进内存，然后在内存中构建Document树。
				对内存要求比较高。	
				缺点： 不适合读取大容量的xml文件，容易导致内存溢出。
					
		SAX解析原理： 加载一点，读取一点，处理一点。对内存要求比较低。

	4.2 SAX解析工具	
			SAX解析工具-  Sun公司提供的。内置在jdk中。org.xml.sax.*

			核心的API：
				SAXParser类： 用于读取和解析xml文件对象
							parse（File f, DefaultHandler dh）方法： 解析xml文件
				
						参数一： File：表示 读取的xml文件。
					    参数二： DefaultHandler： SAX事件处理程序。使用DefaultHandler的子类
例如：｛
     				1.创建SAXParser对象  
              SAXParser parser=SAXParserFactory.newInstance().newSAXParser();
                  2.调用parse方法
			parser.parse(new File("./src/contact.xml"), new MyDefaultHandler());
｝					[一个类继承class 类名（extends DefaultHandler）  在调用是创建传进去

				DefaultHandler类的API:
						void startDocument()  :  在读到文档开始时调用
						void endDocument()  ：在读到文档结束时调用
						void startElement(String uri, String localName, String qName, Attributes attributes)  ：读到开始标签时调用				
						void endElement(String uri, String localName, String qName)   ：读到结束标签时调用
						void characters(char[] ch, int start, int length)  ： 读到文本内容时调用

				
					============DOM解析    vs   SAX解析		========
	
               DOM解析	                                         SAX解析
原理： 一次性加载xml文档，不适合大容量的文件读取	       原理： 加载一点，读取一点，处理一点。适合大容量文件的读取
DOM解析可以任意进行增删改成	                                      SAX解析只能读取
DOM解析任意读取任何位置的数据，甚至往回读	                     SAX解析只能从上往下，按顺序读取，不能往回读
DOM解析面向对象的编程方法（Node，Element，Attribute）,          SAX解析基于事件的编程方法。java开发编码相对复杂。
Java开发者编码比较简单。	

总结：
	1）Dom4j修改xml文档
		new XMLWrier();
		......
	2）xPath技术： 快速查询xml节点
		selectNodes()
		selectSinglNode();
		xpath表达式语言		
	3)  SAX解析
		SAXParser parse
			parser（）
		DefaultHandler类：
			startElement();
			characters();
			endElement();

作业：
			
		设计一个通讯录程序
				联系人： 编号  姓名  性别  年龄  电话  QQ 邮箱
				功能要求：
					添加联系人
					修改联系人
					删除联系人
					查询所有联系人
				
			要求： 
			1）交互使用console（控制台）	
			2）数据存储到xml文件（作为“数据库”）（使用dom4j）

	提示：
			启动程序
					================
					【1】添加联系人
					【2】修改联系人
					【3】删除联系人
					【4】查询所有联系人
					【Q】退出程序
					==================
			输入 1：
					请输入编号：
					请输入姓名：
					请输入年龄
				   。。。。
					添加成功！  -> 数据保存在xml中

		 	输入2
					。。。。。。
			输入4
					编号  姓名   年龄  。。。。
					001   张三  30
					002   李四 20 。。。
					。。。。。


			



