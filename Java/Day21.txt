Day21_1.txt
byte stream 
Char stream
Convert stream: byte stream-> char stream
char stream = byte stream + encode table

Encode table:
	made of real world char and related digit
	types:
		ASCII code table: 8 digits,the top digit is sign digit
			‘a’-97
			‘A’-65
			‘0’-48
		ISO-8859-1: 8 digits, the top digit is digit
		gb2312: simplified Chinese
		GBK:
		GB18030
		BIG-5
		Unicode: use 2 bytes to present a char, java uses it
		UTF-8: at most use 3 bytes to present a char(ASCII compatible)(international)
			a byte:            00000000-0000007F
			two bytes:      00000080-000007FF
			three bytes:   00000800-00007FFF

String encode:
public String​(byte[] bytes,
              String charsetName).  // by specific char set to decode byte array
       throws UnsupportedEncodingException
public byte[] getBytes (String charsetName)  // by specify char set to encode String to byte array
	throws UnsupportedEncodingException. 
		
Encode: convert known into unknown
	String—byte[]
Decode: convert unknown into known
	byte[]—String
Encode and decode should be the same
**************************************************************
package day21_CharStream;

import java.io.UnsupportedEncodingException;
import java.util.Arrays;

public class EncodeDecodeString {

	public static void main(String[] args) throws UnsupportedEncodingException {
		// String---byte[]
		String string = "Hello";
		byte[] bys = string.getBytes();
		System.out.println("default encode:    "+Arrays.toString(bys));
		
		
		byte[] bys2 = string.getBytes("UTF-8");
		System.out.println("UTF-8 encode:      "+Arrays.toString(bys2));
		
		byte[] bys3 = string.getBytes("GBK");
		System.out.println("GBK encode:        "+Arrays.toString(bys3));
		
		byte[] bys4 = string.getBytes("Unicode");
		System.out.println("Unicode encode:    "+Arrays.toString(bys4));
		
		//byte[] --String
		String ss1 = new String(bys);
		System.out.println("default decode:     "+ss1);
		
		String ss2 = new String(bys2, "UTF-8");
		System.out.println("UTF-8 decode:       "+ss2);
		
		String ss3 = new String(bys3, "GBK");
		System.out.println("GBK decode:         "+ss3);
		
		String ss4 = new String(bys4, "Unicode");
		System.out.println("Unicode decode:     "+ss4);
	}
}

Result:
default encode:    [72, 101, 108, 108, 111]
UTF-8 encode:      [72, 101, 108, 108, 111]
GBK encode:        [72, 101, 108, 108, 111]
Unicode encode:    [-2, -1, 0, 72, 0, 101, 0, 108, 0, 108, 0, 111]
default decode:     Hello
UTF-8 decode:       Hello
GBK decode:         Hello
Unicode decode:     Hello
***************************************

Byte stream is converted into char stream(OutputStreamWriter)

Class OutputStreamWriter
* java.lang.Object
    * java.io.Writer
        * java.io.OutputStreamWriter
        * 
public OutputStreamWriter​(OutputStream out,
                          String charsetName)
                   throws UnsupportedEncodingException

public OutputStreamWriter​(OutputStream out)
public OutputStreamWriter​(OutputStream out,
                          String charsetName)
                   throws UnsupportedEncodingException
public void write (String str) throws IOException // in Writer


********************************************
package cn.itcast_01;

import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;

public class OutStreamWriterTest {

	public static void main(String[] args) throws IOException {
		OutputStreamWriter oswWriter1 = new OutputStreamWriter(new FileOutputStream("a1.txt"));
		oswWriter1.write("你好");
		oswWriter1.close();
		
		OutputStreamWriter oswWriter2 = new OutputStreamWriter(new FileOutputStream("a2.txt"), "GBK");
		oswWriter2.write("你好");
		oswWriter2.close();
		
		OutputStreamWriter oswWriter3 = new OutputStreamWriter(new FileOutputStream("a3.txt"), "Unicode");
		oswWriter3.write("你好");
		oswWriter3.close();
		
		OutputStreamWriter oswWriter4 = new OutputStreamWriter(new FileOutputStream("a4.txt"), "UTF-8");
		oswWriter4.write("你好");
		oswWriter4.close();
	}
}

Result:
a1.txt:    你好
a2.txt： 看不懂 （UFT-8 ）
a3.txt:    你好
a4.txt:    你好
******************************************
InputStreamReader
Class InputStreamReader
* java.lang.Object
    * java.io.Reader
        * java.io.InputStreamReader
public InputStreamReader​(InputStream in)
public InputStreamReader​(InputStream in,
                         String charsetName)
                  throws UnsupportedEncodingException
public int read() throws IOException

*******************************************
package day20_OutStream;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class AllMethodsCopyFileTest {

	public static void main(String[] args) throws IOException {
		method1("x1.txt", "x2.txt");
		method2("x3.txt", "x4.txt");
		method3("x5.txt", "x6.txt");
		method4("x7.txt", "x8.txt");

	}

	public static void method4(String srcFile, String destFile) throws IOException {
		BufferedOutputStream bos1 = new BufferedOutputStream(new FileOutputStream(srcFile));
		byte[] bys = {105, 106, 107, 108};
		bos1.write(bys);
		bos1.close();
		
		BufferedInputStream bis1 = new BufferedInputStream(new FileInputStream(srcFile));
		BufferedOutputStream bos2 = new BufferedOutputStream(new FileOutputStream(destFile));
		int len = 0;
		byte[] bys1 = new byte[1024];
		
		while ((len = bis1.read(bys1)) != -1) {
			bos2.write(bys1);;
		}
		
		bos2.close();
		bis1.close();
	}

	public static void method3(String srcFile, String destFile) throws IOException {
		BufferedOutputStream bos1 = new BufferedOutputStream(new FileOutputStream(srcFile));
		byte[] bys = {101, 102, 103, 104};
		bos1.write(bys);
		bos1.close();
		
		BufferedInputStream bis1 = new BufferedInputStream(new FileInputStream(srcFile));
		BufferedOutputStream bos2 = new BufferedOutputStream(new FileOutputStream(destFile));
		int by = 0;
		
		while ((by = bis1.read()) != -1) {
			bos2.write(by);;
		}
		
		bos2.close();
		bis1.close();
	}

	public static void method2(String srcFile, String destFile) throws IOException {
		FileOutputStream fos1 = new FileOutputStream(srcFile);
		fos1.write(100);
		fos1.write("Hello World!".getBytes());
		fos1.close();
		
		FileInputStream fis1 = new FileInputStream(srcFile);
		FileOutputStream fos2 = new FileOutputStream(destFile);
		int len = 0;
		byte[] bys = new byte[1024];
		
		while ((len = fis1.read(bys)) != -1) {
			fos2.write(bys, 0, len);;
		}
		
		fos2.close();
		fis1.close();
	}

	public static void method1(String srcFile, String destFile) throws IOException {
		FileOutputStream fos1 = new FileOutputStream(srcFile);
		byte[] bys = {97, 98, 99, 100};
		fos1.write(bys);
		fos1.close();
		
		FileInputStream fis1 = new FileInputStream(srcFile);
		FileOutputStream fos2 = new FileOutputStream(destFile);
		int by = 0;
		
		while ((by = fis1.read()) != -1) {
			fos2.write(by);;
		}
		
		fos2.close();
		fis1.close();
	}

}

result:
x1.txt/x2.txt: abcd
x3.txt/x4.txt: Hello World!
x5.txt/x6.txt: efgh
x7.txt/x8.txt: ijkl
****************************************************************


InputStreamReader

InputStreamReader​(InputStream in) // read data with default encode
public InputStreamReader​(InputStream in,
                         String charsetName)  // read data with specified encode
                  throws UnsupportedEncodingException



public int read()             // read a char
         throws IOException
public int read​(char[] cbuf)  // read to a char array, how to use it?
         throws IOException
***********************************
package day21_InputStreamReader;

import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Arrays;

public class InputStreamReaderTest2 {

	public static void main(String[] args) throws IOException {
		System.out.println("Default:");
		InputStreamReader isr1 = new InputStreamReader(new FileInputStream("c:\\demo\\test\\a.txt"));
		int len1 = 0;
		char[] chs1 = new char[1024];
		while ((len1 = isr1.read(chs1)) != -1) {
			System.out.print(new String(chs1, 0, len1));
		}
		System.out.println("\n--------------------------------------");
		
		System.out.println("GBK:");
		InputStreamReader isr2 = new InputStreamReader(new FileInputStream("c:\\demo\\test\\a.txt"), "GBK");
		int len2 = 0;
		char[] chs2 = new char[1024];
		while ((len2 = isr2.read(chs2)) != -1) {
			System.out.print(new String(chs2, 0, len2));
		}
		System.out.println("\n--------------------------------------");
		
		System.out.println("Unicode:");
		InputStreamReader isr3 = new InputStreamReader(new FileInputStream("c:\\demo\\test\\a.txt"), "Unicode");
		int len3 = 0;
		char[] chs3 = new char[1024];
		while ((len3 = isr3.read(chs3)) != -1) {
			System.out.print(new String(chs3, 0, len3));
		}
		System.out.println("\n--------------------------------------");
		
		System.out.println("UTF-8:");
		InputStreamReader isr4 = new InputStreamReader(new FileInputStream("c:\\demo\\test\\a.txt"), "UTF-8");
		int len4 = 0;
		char[] chs4 = new char[1024];
		while ((len4 = isr4.read(chs4)) != -1) {
			System.out.print(new String(chs4, 0, len4));
		}
		System.out.println("\n-------------------------------------");
	}
}



result:
only Unicode has the common output
*********************************************
OutputStreamWriter
	Constructor:
		public OutputStreamWriter​(OutputStream out)
		public OutputStreamWriter​(OutputStream out,
								  String charsetName)
						   throws UnsupportedEncodingException
	Methods:
		public void write​(int c)        // write a char
				   throws IOException
		public void write​(char[] cbuf,
						  int off,
						  int len)     // write a char array
				   throws IOException
		public void write​(String str,
						  int off,
						  int len)     // write a String part
				   throws IOException
		public void write​(char[] cbuf) // write a char array
				   throws IOException
		public void write​(String str)  // write a String
				   throws IOException

		public void flush()
           throws IOException

**************************************************
close() and flush()
	close(): close the Stream Object, but reflesh the buffer area once at first, but after close
	    the Stream Object, we can't use the Stream Object
		Generally, close() can flush common data
	flush(): reflesh the buffer area, after that, Stream Object can be still used
		For the big data, we need use flush()	


*************************************************************
package cn.itcast_01;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.InputStreamReader;

public class OutputStreamWriterTest {

	public static void main(String[] args) throws FileNotFoundException, IOException {
		OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("a.txt"));
		osw.write("Hello World!");
		osw.write('a'); // char is put in buffer area instead of file
		osw.write(97);  // char is put in buffer area instead of file
		
		char[] cbuf = {'a', 'b', 'c', 'd', 'e'};
		osw.write(cbuf);
		
		osw.write(cbuf, 1, 3);
		osw.write("How do you do?", 4, 2);
		// because a char is equal to 2 bytes
		// The basic unit of data stored in file is byte
		// So we need flush it to reflesh buffer area
		osw.flush();
		
		osw.close(); // reflesh buffer area, then close it
		
		InputStreamReader isr = new InputStreamReader(new FileInputStream("a.txt"));
		char[] cbuf2 = new char[1024];
		int len = 0;
		while ((len = isr.read(cbuf2)) != -1) {
			System.out.print(new String(cbuf2, 0, len));
		}
		isr.close();

	}

}


result:
Hello World!aaabcdebcddo
**********************************************************
Copy file using Char Stream:



package cn.itcast_01;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.InputStreamReader;


public class CopyFileTest {

	public static void main(String[] args) throws IOException {
		// method 1
		InputStreamReader isr = new InputStreamReader(new FileInputStream("a.txt"));
		OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("b.txt"));
		int len = 0;
		char[] chs = new char[1024];
		while ((len = isr.read(chs)) != -1) {
			osw.write(chs, 0, len);
			osw.flush();// flush() needed when data is big
		}
		isr.close();
		osw.close();
		
		// method 2
		InputStreamReader isr2 = new InputStreamReader(new FileInputStream("b.txt"));
		OutputStreamWriter osw2 = new OutputStreamWriter(new FileOutputStream("c.txt"));
		int len2 = 0;
		char[] chs2 = new char[1024];
		while ((len2 = isr2.read(chs2)) != -1) {
			osw2.write(chs2);
		}
		isr2.close();
		osw2.close();
	}
}
********************************************************
FileWriter:
	Class FileWriter

		java.lang.Object
			java.io.Writer
				java.io.OutputStreamWriter
					java.io.FileWriter

	constructor methods:
		public FileWriter​(File file)
				   throws IOException
		public FileWriter​(File file,
						  boolean append)
				   throws IOException
		public FileWriter​(String fileName)
           throws IOException
		public FileWriter​(String fileName,
                  boolean append)
           throws IOException
	methods:
		inherit from father Classes
*******************************************************
FileReader
	Class FileReader

		java.lang.Object
			java.io.Reader
				java.io.InputStreamReader
					java.io.FileReader 
	
	constructor methods:
		public FileReader​(File file)
           throws FileNotFoundException
		public FileReader​(String fileName)
           throws FileNotFoundException
**********************************************************
Copy file using FileReader and FileWriter:


*******************************************************
method 1:
package cn.itcast_01;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class FileWriterTest2 {

	public static void main(String[] args) throws IOException {
		FileWriter fw = new FileWriter("c.txt");
		char[] cbuf = {'a', 'b', 'c', 'd', 'e'};
		fw.write(cbuf);
		fw.write("Hello World!");
		fw.close();
		
		FileReader fr = new FileReader("c.txt");
		FileWriter fw2 = new FileWriter("d.txt");
		int ch = 0;
		while ((ch = fr.read()) != -1) {
			fw2.write(ch);
		}
		fr.close();
		fw2.close();
	}
}


method 2:

package cn.itcast_01;

import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class FileWriterTest {

	public static void main(String[] args) throws IOException {
		FileWriter fw = new FileWriter("a.txt");
		char[] cbuf = {'a', 'b', 'c', 'd', 'e'};
		fw.write(cbuf);
		fw.write("Hello World!");
		fw.close();
		
		FileReader fr = new FileReader("a.txt");
		FileWriter fw2 = new FileWriter("b.txt");
		char[] chs = new char[1024];
		int len = 0;
		while ((len = fr.read(chs)) != -1) {
			fw2.write(chs, 0, len);
			fw2.flush();
		}
		fr.close();
		fw2.close();
	}
}
***********************************************************
OutputStreamWriter     = FileOutputStream + encodeTable(GBK)
FileWriter             = FileOutputStream + encodeTable(GBK)
InputStreamReader      = FileInputStream  + encodeTable(GBK)
FileReader             = FileInputStream  + encodeTable(GBK)

*************************************************************
BufferedWriter

	Class BufferedWriter

		java.lang.Object
			java.io.Writer
				java.io.BufferedWriter 

	
	public BufferedWriter​(Writer out)
	
	public void write​(int c)
           throws IOException
	public void write​(char[] cbuf,
                  int off,
                  int len)
           throws IOException
	public void write​(String s,
                  int off,
                  int len)
           throws IOException
	public void newLine()          // (*)
             throws IOException
********************************************************
BufferedReader
	Class BufferedReader

		java.lang.Object
			java.io.Reader
				java.io.BufferedReader 
				
	public BufferedReader​(Reader in)
	
	public int read()
         throws IOException
		 
	public int read​(char[] cbuf,
                int off,
                int len)
         throws IOException
	public String readLine()  		// (*)
                throws IOException
****************************************************************
Copy video using buffered char stream


package cn.itcast_01;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class CopyVideoTest {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("c:\\demo\\test\\20.avi"));
		BufferedWriter bw = new BufferedWriter(new FileWriter("20copy.avi"));
		int len = 0;
		char[] chs = new char[1024];
		while ((len = br.read(chs)) != -1) {
			bw.write(chs, 0, len);	
		}
		br.close();
		bw.close();

	}

}

**********************************************************************
package cn.itcast_02;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class BufferedDemo {

	public static void main(String[] args) throws IOException {
		write();
		read();

	}

	public static void read() throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("a.txt"));
		String string = null;
		while ((string = br.readLine()) != null) {
			System.out.println(string);
		}
	}

	public static void write() throws IOException {
		BufferedWriter bw = new BufferedWriter(new FileWriter("a.txt"));
		for (int i=0; i<10; ++i) {
			bw.write("hello"+i);
			bw.newLine();
			bw.flush();
		}
		bw.close();	
	}
}

result:
hello0
hello1
hello2
hello3
hello4
hello5
hello6
hello7
hello8
hello9
****************************************************
Copy File

package cn.itcast_03;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class CopyFileTest {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("c:\\demo\\test\\telog.txt"));
		BufferedWriter bw = new BufferedWriter(new FileWriter("x.txt"));
		String line = null;
		while ((line = br.readLine()) != null) {
			bw.write(line);
			bw.newLine();
			bw.flush();
		}
		br.close();
		bw.close();
	}
}


*******************************************************************
IO Stream summary:
1. Byte Stream
	InputStream
		int read()       // read a byte once
		int read(byte[]) // read a byte array once
		
		FileInputStream
		BufferedInputStream
	OutputStream
		void write(int by) // write a byte once
		void write(byte[], int, int) // write a byte array part
		
		FileOutputStream
		BufferedOutputStream

2. convert stream
	InputStreamReader(InputStream)
	OutputStreamWriter(OutputStream)
	
3. Char Stream = byte stream + encodeTable
	InputStream
	Reader
		int read()       // read a char once
		int read(char[]) // read a char array once
		
		InputStreamReader
			FileReader
				BufferedReader
					String readLine() // read a line once
			
	OutputStream
	Writer
		void write(int ch) // write a char once
		void write(char[], int, int) // write a char array part
	
		OutputStreamWriter
			FileWriter
				BufferedWriter
					void newLine() // write a new line
					void write(String s) // write a String


Except the data known by windows notepad using Char Stream, others use Byte Stream
Byte stream copy file: 4 types
Char stream copy file: 5 types
******************************************************************
Copy file using Char Stream

package cn.itcast_01;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class CopyFileByCharStreamTest {

	public static void main(String[] args) throws IOException {
		method1();
		method2();
		method3();
		method4();
		method5();

	}

	public static void method5() throws IOException {
		InputStreamReader isr = new InputStreamReader(new FileInputStream("c:\\demo\\test\\a.txt"));
		OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("x5.txt"));
		int len = 0;
		char[] chs = new char[1024];
		while ((len = isr.read(chs)) != -1) {
			osw.write(chs, 0, len);
		}
		osw.close();
		isr.close();
	}

	public static void method4() throws IOException {
		InputStreamReader isr = new InputStreamReader(new FileInputStream("c:\\demo\\test\\a.txt"));
		OutputStreamWriter osw = new OutputStreamWriter(new FileOutputStream("x4.txt"));
		int ch = 0;
		while ((ch = isr.read()) != -1) {
			osw.write(ch);
		}
		osw.close();
		isr.close();
	}

	public static void method3() throws IOException {
		FileReader fReader = new FileReader("c:\\demo\\test\\a.txt");
		FileWriter fWriter = new FileWriter("x3.txt");
		int ch = 0;
		while ((ch = fReader.read()) != -1) {
			fWriter.write(ch);
		}
		fReader.close();
		fWriter.close();
	}

	public static void method2() throws IOException {
		FileReader fReader = new FileReader("c:\\demo\\test\\a.txt");
		FileWriter fWriter = new FileWriter("x2.txt");
		char[] cbuf = new char[1024];
		int len = 0;
		while ((len = fReader.read(cbuf)) != -1) {
			fWriter.write(cbuf, 0, len);
		}
		fReader.close();
		fWriter.close();
	}

	public static void method1() throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("c:\\demo\\test\\a.txt"));
		BufferedWriter bw = new BufferedWriter(new FileWriter("x1.txt"));
		String line = null;
		
		while ((line = br.readLine()) != null) {
			bw.write(line);
			bw.newLine();
			bw.flush();
		}
		br.close();
		bw.close();	
	}
}

******************************************************************
Byte Stream
**************************************************
package cn.itcast_02;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class CopyFileByByteStreamTest {

	public static void main(String[] args) throws IOException {
		method1("c:\\demo\\test\\a.txt", "y1.txt");
		method2("c:\\demo\\test\\a.txt", "y2.txt");
		method3("c:\\demo\\test\\a.txt", "y3.txt");
		method4("c:\\demo\\test\\a.txt", "y4.txt");
	}

	public static void method4(String srcFile, String destFile) throws IOException {
		BufferedInputStream bis = new BufferedInputStream(new FileInputStream(srcFile));
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFile));
		int len = 0;
		byte[] bys = new byte[1024];
		while ( (len = bis.read(bys)) != -1) {
			bos.write(bys, 0, len);
		}
		
		bis.close();
		bos.close();
	}

	public static void method3(String srcFile, String destFile) throws IOException {
		BufferedInputStream bis = new BufferedInputStream(new FileInputStream(srcFile));
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFile));
		int by = 0;
		while ( (by = bis.read()) != -1) {
			bos.write(by);
		}
		
		bis.close();
		bos.close();
	}

	public static void method2(String srcFile, String destFile) throws IOException {
		FileInputStream fis = new FileInputStream(srcFile);
		FileOutputStream fos = new FileOutputStream(destFile);
		int len = 0;
		byte[] bys = new byte[1024];
		while ((len = fis.read(bys)) != -1) {
			fos.write(bys);
		}
		fis.close();
		fos.close();
	}

	public static void method1(String srcFile, String destFile) throws IOException {
		FileInputStream fis = new FileInputStream(srcFile);
		FileOutputStream fos = new FileOutputStream(destFile);
		int by = 0;
		while ((by = fis.read()) != -1) {
			fos.write(by);
		}
		fis.close();
		fos.close();
	}

}

********************************************************
Char Stream
********************************************************
package cn.itcast_01;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class CopyFileByCharStreamTest {

	public static void main(String[] args) throws IOException {
		method1("c:\\demo\\test\\a.txt", "x1.txt");
		method2("c:\\demo\\test\\a.txt", "x2.txt");
		method3("c:\\demo\\test\\a.txt", "x3.txt");
		method4("c:\\demo\\test\\a.txt", "x4.txt");
		method5("c:\\demo\\test\\a.txt", "x5.txt");

	}

	public static void method5(String srcFile, String destFile) throws IOException {
		FileReader fReader = new FileReader(srcFile);
		FileWriter fWriter = new FileWriter(destFile);
		int ch = 0;
		while ((ch = fReader.read()) != -1) {
			fWriter.write(ch);
		}
		fReader.close();
		fWriter.close();
	}

	public static void method4(String srcFile, String destFile) throws IOException {
		FileReader fReader = new FileReader(srcFile);
		FileWriter fWriter = new FileWriter(destFile);
		char[] cbuf = new char[1024];
		int len = 0;
		while ((len = fReader.read(cbuf)) != -1) {
			fWriter.write(cbuf, 0, len);
		}
		fReader.close();
		fWriter.close();
	}
	
	public static void method3(String srcFile, String destFile) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(srcFile));
		BufferedWriter bw = new BufferedWriter(new FileWriter(destFile));
		char[] chs = new char[1024];
		int len = 0;
		
		while ((len = br.read(chs)) != -1) {
			bw.write(chs, 0, len);
		}
		br.close();
		bw.close();	
	}
	
	public static void method2(String srcFile, String destFile) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(srcFile));
		BufferedWriter bw = new BufferedWriter(new FileWriter(destFile));
		int ch = 0;
		
		while ((ch = br.read()) != -1) {
			bw.write(ch);
		}
		br.close();
		bw.close();	
	}

	public static void method1(String srcFile, String destFile) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(srcFile));
		BufferedWriter bw = new BufferedWriter(new FileWriter(destFile));
		String line = null;
		
		while ((line = br.readLine()) != null) {
			bw.write(line);
			bw.newLine();
			bw.flush();
		}
		br.close();
		bw.close();	
	}
}

*********************************************************************
ArrayList<String> content is written into a text file(text file=>Char Stream)
*****************************************************
package cn.itcast_01;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

public class ArrayListSavedFileTest {

	public static void main(String[] args) throws IOException {
		ArrayList<String> strArrList = new ArrayList<String>();
		strArrList.add("Hello");
		strArrList.add("World!");
		strArrList.add("abcde");
		
		BufferedWriter bw = new BufferedWriter(new FileWriter("a.txt"));
		for (String string : strArrList) {
			bw.write(string);
			bw.newLine();
			bw.flush();
		}
		bw.close();
	}
}

result:
a.txt
Hello
World!
abcde
***********************************************************
Read data from a text file(each line is a String) into Collection, then traverse it
*************************************************************
package cn.itcast_02;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;

public class ReadDataIntoCollectionTest {

	public static void main(String[] args) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader("c:\\demo\\test\\a.txt"));
		ArrayList<String> strArrList = new ArrayList<String>();
		
		String string = null;
		while ((string = br.readLine()) != null) {
			strArrList.add(string);
		}
		
		br.close();
		
		for (String str : strArrList) {
			System.out.println(str);
		}

	}

}
**************************************************************************
One text book stores several names, please implement to get one random name
***************************************************************************
package cn.itcast_03;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

public class GetOneRandomNameTest {

	public static void main(String[] args) throws IOException {
		// Read data into ArrayList<String>
		BufferedReader br = new BufferedReader(new FileReader("c:\\demo\\test\\b.txt"));
		ArrayList<String> strArrList = new ArrayList<String>();
		
		String string = null;
		while ((string = br.readLine()) != null) {
			strArrList.add(string);
		}
		
		br.close();
		
		// generate one random index
		Random r = new Random();
		int index = r.nextInt(strArrList.size());
		
		// get random name by random index
		String name = strArrList.get(index);
		System.out.println(name);

	}

}

**************************************************************************
Copy single layer folder
srcFolder: c:\\demo\\test1(no dir, only several files)
destFolder: c:\\demo\\test2(not existing or empty folder)
***************************************************************************
package cn.itcast_04;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

public class CopyFolderTest {

	public static void main(String[] args) throws IOException {
		File srcFolder = new File("c:\\demo\\test1");
		File destFolder = new File("c:\\demo\\test2");
		
		if (!destFolder.exists()) {
			destFolder.mkdir();
		}
		
		File[] files = srcFolder.listFiles();
		for (File file: files) {
//			System.out.println(file);
			String nameString = file.getName();
			File newFile = new File(destFolder, nameString);
			copyFile(file, newFile);

		}
	}
	
	public static void copyFile(File srcFile, File destFile) throws IOException {
		BufferedReader br = new BufferedReader(new FileReader(srcFile));
		BufferedWriter bw = new BufferedWriter(new FileWriter(destFile));
		String line = null;
		while ((line = br.readLine()) != null) {
			bw.write(line);
			bw.newLine();
			bw.flush();
		}
		bw.close();
		br.close();
	}
}

***************************************************************************

***********************************************************************
Req: copy specified files on specified folder to another dir, 
	 then modify the suffix name of another dir
*************************************************************************
package cn.itcast_01;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;

public class CopyFolderTest {

	public static void main(String[] args) throws IOException {
		File srcFolder = new File("c:\\demo\\java");
		File destFolder = new File("c:\\demo\\jad");
		
		if (!destFolder.exists()) {
			destFolder.mkdir();
		}
		
		File[] srcFileArr = srcFolder.listFiles(new FilenameFilter() {

			public boolean accept(File dir, String name) {
				return new File(dir, name).isFile() && name.endsWith(".java");
			}
			
		});
		
		// copy srcFiles to destFolder
		for (File srcFile : srcFileArr) {
//			System.out.println(srcFile);
			String  name = srcFile.getName();
			
			File newFile = new File(destFolder, name);
			copyFile(srcFile, newFile);
			
		}
		
		// rename destFiles
		File[] destFileArr = destFolder.listFiles();
		for (File destFile : destFileArr) {
//			System.out.println(destFile);
			String nameString = destFile.getName();
			String newName = nameString.replace(".java", ".jad");
			File newFile = new File(destFolder, newName);
			destFile.renameTo(newFile);
		}
	}


	public static void copyFile(File file, File destFile) throws IOException {
		BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFile));
		byte[] bys = new byte[1024];
		int len = 0;
		while ((len = bis.read(bys)) != -1) {
			bos.write(bys);
		}
		bis.close();
		bos.close();
	}

}

result:
c:\\demo\\java\\*.java
c:\\demo\\jad\\*.jad
******************************************************************************************
Copy folder with multiple folders
********************************************************************************************
package cn.itcast_01;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class CopyMultipleLayersFolders {

	public static void main(String[] args) throws IOException {
		File srcFile = new File("c:\\demo");
		File destFile = new File("c:\\dest");

		copyFolder(srcFile, destFile);


	}
	
	public static void copyFolder(File srcFile, File destFile) throws IOException {
		if (srcFile.isDirectory()) {
			File newFolder = new File(destFile, srcFile.getName());
			newFolder.mkdir();
			
			File[] fileArray = srcFile.listFiles();
			for (File file : fileArray) {
				copyFolder(file, newFolder);
			}
			
		}
		else {
			File newFile = new File(destFile, srcFile.getName());
			copyFile(srcFile, newFile);
		}
	}
	
	public static void copyFile(File file, File destFile) throws IOException {
		BufferedInputStream bis = new BufferedInputStream(new FileInputStream(file));
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(destFile));
		byte[] bys = new byte[1024];
		int len = 0;
		while ((len = bis.read(bys)) != -1) {
			bos.write(bys);
		}
		bis.close();
		bos.close();
	}

}

*****************************************************
Req: 
Enter five Student(name, chinese, english, math)
sort them by general scores
Write them into a file
**************************************************
Student.java
************************************************
package cn.itcast_01;

public class Student {
	private int chinese;
	private int english;
	private int math;
	private String nameString;
	
	
	public Student() {
		super();
	}


	public Student(int chinese, int english, int math, String nameString) {
		super();
		this.chinese = chinese;
		this.english = english;
		this.math = math;
		this.nameString = nameString;
	}


	public int getChinese() {
		return chinese;
	}


	public void setChinese(int chinese) {
		this.chinese = chinese;
	}


	public int getEnglish() {
		return english;
	}


	public void setEnglish(int english) {
		this.english = english;
	}


	public int getMath() {
		return math;
	}


	public void setMath(int math) {
		this.math = math;
	}


	public String getNameString() {
		return nameString;
	}


	public void setNameString(String nameString) {
		this.nameString = nameString;
	}
	
	public int getSum() {
		return chinese + english + math;
	}
}
************************************************************
Method 1: use ArrayList<Student>
***********************************************************
package cn.itcast_01;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.Comparator;

public class SortAndWriteIntoFileTest {

	public static void main(String[] args) throws IOException {
		
		ArrayList<Student> studentArr = new ArrayList<Student>();
		for (int i=0; i<5; ++i) {
			System.out.println("The "+(i+1)+" Student:");
			System.out.println("Please enter name:");
			Scanner sc = new Scanner(System.in);
			String name = sc.nextLine();
			System.out.println("Please enter chinese score:");
			int chinese = sc.nextInt();
			System.out.println("Please enter english score:");
			int english = sc.nextInt();
			System.out.println("Please enter math score:");
			int math = sc.nextInt();
			Student student = new Student();
			student.setChinese(chinese);
			student.setEnglish(english);
			student.setMath(math);
			student.setNameString(name);
			studentArr.add(student);
		}
		
		studentArr.sort(new Comparator<Student>() {

			public int compare(Student s1, Student s2) {
				int num = s2.getSum() - s1.getSum();
				int num1 = num == 0 ? s1.getChinese() - s2.getChinese() : num;
				int num2 = num1 == 0 ? s1.getEnglish() - s2.getEnglish() : num1;
				int num3 = num2 == 0 ? s1.getMath() - s2.getMath() : num2;
				int num4 = num3 == 0 ? s1.getNameString().compareTo(s2.getNameString()) : num3;
				return num4;
			}
			
		});
		
		BufferedWriter bw = new BufferedWriter(new FileWriter("student.txt"));
		bw.write("Name, Chinese Score, English Score, Math Score");
		bw.newLine();
		bw.flush();
		for (Student s : studentArr) {
			StringBuilder sBuilder = new StringBuilder();
			sBuilder.append(s.getNameString()).append(",")
				.append(s.getChinese()).append(",")
				.append(s.getEnglish()).append(",")
				.append(s.getMath());
			bw.write(sBuilder.toString());
			bw.newLine();
			bw.flush();
		}
		bw.close();

	}

}
******************************************************************
Method 2: use TreeSet<Student>
*****************************************************************
package cn.itcast_01;

import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Comparator;
import java.util.Scanner;
import java.util.TreeSet;

public class SortWriteTest02 {

	public static void main(String[] args) throws IOException {
		TreeSet<Student> ts = new TreeSet<Student>(new Comparator<Student>() {

			public int compare(Student s1, Student s2) {
				int num = s2.getSum() - s1.getSum();
				int num1 = num == 0 ? s1.getChinese() - s2.getChinese() : num;
				int num2 = num1 == 0 ? s1.getEnglish() - s2.getEnglish() : num1;
				int num3 = num2 == 0 ? s1.getMath() - s2.getMath() : num2;
				int num4 = num3 == 0 ? s1.getNameString().compareTo(s2.getNameString()) : num3;
				return num4;
			}
		});
		
		for (int i=0; i<5; ++i) {
			System.out.println("The "+(i+1)+" Student:");
			System.out.println("Please enter name:");
			Scanner sc = new Scanner(System.in);
			String name = sc.nextLine();
			System.out.println("Please enter chinese score:");
			int chinese = sc.nextInt();
			System.out.println("Please enter english score:");
			int english = sc.nextInt();
			System.out.println("Please enter math score:");
			int math = sc.nextInt();
			Student student = new Student();
			student.setChinese(chinese);
			student.setEnglish(english);
			student.setMath(math);
			student.setNameString(name);
			ts.add(student);
		}
		
		BufferedWriter bw = new BufferedWriter(new FileWriter("student.txt"));
		bw.write("Name, Chinese Score, English Score, Math Score");
		bw.newLine();
		bw.flush();
		for (Student s : ts) {
			StringBuilder sBuilder = new StringBuilder();
			sBuilder.append(s.getNameString()).append(",")
				.append(s.getChinese()).append(",")
				.append(s.getEnglish()).append(",")
				.append(s.getMath());
			bw.write(sBuilder.toString());
			bw.newLine();
			bw.flush();
		}
		bw.close();

	}

}
******************************************************
result:
Name, Chinese Score, English Score, Math Score
Sam,99,98,100
Sophie,99,88,98
Sarah,98,89,90
Emma,85,98,90
Andy,98,85,90
*********************************************************
Req:
one file src.txt has one String line
sort it naturally
write it to one file dest.txt
***********************************************************
Req:
Read some String data from one file,
sort each line
write the sorted string data into another file
************************************************************
package cn.itcast_01;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Arrays;

public class SortStringSaveTest {

	public static void main(String[] args) throws IOException {
		BufferedWriter bw = new BufferedWriter(new FileWriter("dest.txt"));
		BufferedReader br = new BufferedReader(new FileReader("src.txt"));
		String string = br.readLine();
		char[] chs = string.toCharArray();
		Arrays.sort(chs);
		bw.write(chs);
		bw.newLine();
		bw.flush();

		bw.close();
		br.close();
	}
}

result:
src.txt
klsjafhjfajfagkjagjagkaga
dest.txt
aaaaaaafffgggghjjjjjkkkls
***********************************************************************
Req:
Self define Class to simulate BufferedReader readLine() method
**********************************************************************
public String readLine()
                throws IOException

Reads a line of text. A line is considered to be terminated by any one of a line feed ('\n'), 
a carriage return ('\r'), a carriage return followed immediately by a line feed, 
or by reaching the end-of-file (EOF).

Returns:
    A String containing the contents of the line, not including any line-termination characters, 
	or null if the end of the stream has been reached without reading any characters
*******************************************************************************
MyBufferedReader.java
*******************************************************************************
package cn.itcast_01;

import java.io.IOException;
import java.io.Reader;

public class MyBufferedReader {
	private Reader r;

	public MyBufferedReader() {
		super();
	}

	public MyBufferedReader(Reader r) {
		super();
		this.r = r;
	}

	public Reader getR() {
		return r;
	}

	public void setR(Reader r) {
		this.r = r;
	}
	
	public void close() throws IOException {
		r.close();
	}
	
	public String readLine() throws IOException {
		// Because we can't be sure how many chars will on one line,
		// we can't use read(char[])
		
		StringBuilder sBuilder = new StringBuilder();
		int ch = 0;
		
		while ((ch = r.read()) != -1) {
			if (ch == '\r') {
				continue;
			} else if (ch == '\n') {
				return sBuilder.toString();
			} else {
				sBuilder.append((char)ch);
			}
		}
		
		if (sBuilder.length() > 0) {
			return sBuilder.toString();
		}
		
		return null;
	}
}

**********************************************************************
MyBufferedReaderTest.java
**********************************************************************
package cn.itcast_01;

import java.io.FileReader;
import java.io.IOException;

public class MyBufferedReaderTest {

	public static void main(String[] args) throws IOException {
		MyBufferedReader mbr = new MyBufferedReader(new FileReader("a.txt"));
		String string = null;
		while ((string = mbr.readLine()) != null) {
			System.out.println(string);
		}
		mbr.close();
	}
}
********************************************************************************
result:
hello
world
java
********************************************************************************
Self-define LineNumberReader
********************************************************************************
Class LineNumberReader

    java.lang.Object
        java.io.Reader
            java.io.BufferedReader
                java.io.LineNumberReader 
*********************************************************************************
public LineNumberReader​(Reader in)
public int getLineNumber()
public void setLineNumber​(int lineNumber)
*******************************************************************************
Method 1： inherit from MyBufferedReader
********************************************************************************
MyBufferedReader.java
*******************************************************************************
package cn.itcast_01;

import java.io.IOException;
import java.io.Reader;

public class MyBufferedReader {
	private Reader r;

	public MyBufferedReader() {
		super();
	}

	public MyBufferedReader(Reader r) {
		super();
		this.r = r;
	}

	public Reader getR() {
		return r;
	}

	public void setR(Reader r) {
		this.r = r;
	}
	
	public void close() throws IOException {
		r.close();
	}
	
	public String readLine() throws IOException {
		// Because we can't be sure how many chars will on one line,
		// we can't use read(char[])
		
		StringBuilder sBuilder = new StringBuilder();
		int ch = 0;
		
		while ((ch = r.read()) != -1) {
			if (ch == '\r') {
				continue;
			} else if (ch == '\n') {
				return sBuilder.toString();
			} else {
				sBuilder.append((char)ch);
			}
		}
		
		if (sBuilder.length() > 0) {
			return sBuilder.toString();
		}
		
		return null;
	}
}


***********************************************************************
package cn.itcast_03;
import java.io.IOException;
import java.io.Reader;

import cn.itcast_01.MyBufferedReader;

public class MyLineNumberReader2 extends MyBufferedReader {
	private Reader r;
	private int lineNumber = 0;

	public MyLineNumberReader2() {
		super();
	}
	
	public MyLineNumberReader2(Reader r) {
		super(r);
	}

	public String readLine() throws IOException {
		lineNumber++;
		return super.readLine();
	}
	
	public int getLineNumber() {
		return lineNumber;
	}
	
	public void setLineNumber(int lineNumber) {
		this.lineNumber = lineNumber;
	}
}
*******************************************************************
package cn.itcast_03;

import java.io.FileReader;
import java.io.IOException;

public class MyLineNumberReaderTest {

	public static void main(String[] args) throws IOException {
		MyLineNumberReader2 mlnr = new MyLineNumberReader2(new FileReader("a.txt"));
		String line = null;
		mlnr.setLineNumber(10);
		while ((line = mlnr.readLine()) != null) {
			System.out.println(mlnr.getLineNumber()+":"+line);
		}
		mlnr.close();

	}

}
**************************************************************************
result:
11:hello
12:world
13:java
*************************************************************************
Method 2:
**************************************************************************
package cn.itcast_02;

import java.io.IOException;
import java.io.Reader;

public class MyLineNumberReader {
	private Reader r;
	private int lineNumber = 0;

	public MyLineNumberReader() {
		super();
	}

	public MyLineNumberReader(Reader r) {
		super();
		this.r = r;
	}
	
	public String readLine() throws IOException {
		// Because we can't be sure how many chars will on one line,
		// we can't use read(char[])
		lineNumber++;
		StringBuilder sBuilder = new StringBuilder();
		int ch = 0;
		
		while ((ch = r.read()) != -1) {
			if (ch == '\r') {
				continue;
			} else if (ch == '\n') {
				return sBuilder.toString();
			} else {
				sBuilder.append((char)ch);
			}
		}
		
		if (sBuilder.length() > 0) {
			return sBuilder.toString();
		}
		
		return null;
	}
	
	public int getLineNumber() {
		return lineNumber;
	}
	
	public void setLineNumber(int lineNumber) {
		this.lineNumber = lineNumber;
	}
	
	public void close() throws IOException {
		r.close();
	}
}

package cn.itcast_03;

import java.io.FileReader;
import java.io.IOException;

public class MyLineNumberReaderTest {

	public static void main(String[] args) throws IOException {
		MyLineNumberReader2 mlnr = new MyLineNumberReader2(new FileReader("a.txt"));
		String line = null;
		mlnr.setLineNumber(10);
		while ((line = mlnr.readLine()) != null) {
			System.out.println(mlnr.getLineNumber()+":"+line);
		}
		mlnr.close();

	}

}

result:
11:hello
12:world
13:java
*************************************************************************************
Day21_4.txt
Summary

Convert Stream
	Byte Stream->Char Stream
	Char Stream = Byte Stream + encodeTable
	encodeTable: char and value
		GBK
		Unicode
		UTF-8
		encode should be consistent
	String->Byte[]: encode
	Byte[]->String: decode

Char Stream
	Reader
		InputStreamReader(new FileInputStream(File));
			FileReader
		BufferedReader
	Writer
		OutputStreamWrite(new FileOutputStream(File));
			FileWriter
		BufferedWriter
	copy text file using char stream: 5 types
	

IO stream
	Byte Stream
		InputStream 
			int read() 		: read a byte once
			int read(byte[] bys)	: read a byte array once
			|—FileInputStream
			|—BufferedInputStream
		OutputStream
			void write(int by) 							: write a byte once
			void write(byte[] bys, int offset, int len) 	: write a byte array once
			|—FileOutputStream
			|—BufferedOutputStream
		copy test file using byte stream: 4 types
	Char Stream
		Reader
			int read() 	: read a char once
			int read(char[] chs)	: read a char array once
			|—InputStreamReader
				|—FileReader
			|—BufferedReader
				String readLine():   read a String once
		Writer
			void write(char ch)
			void write(char[], int, int)
			|—OutputStreamWriter
				|-FileWriter
			|—BufferedWriter
				newLine() : write a  \n line once

Examples
	copy text file
	copy image(Byte data-Byte Stream)
	save Collection data into a text file
	Read a text file and save the content into Collection
	Copy folder with single layer
	Copy folder with single layer and rename for the specified suffix files
	Copy folder with multiple layers
	Enter student info and sort them by general score from top to bottom and save the result into a file
	Reader to simulate BufferedReader
	Reader to simulate LineNumberReader
