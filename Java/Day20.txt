Recursion: method definition calls method itself
public void show(int n) {
	if (n == 0) {
		System.exit(0);
	}
	System.out.println(n);
	show(--n);
}
method calls method itself: method nesting instead of recursion


Notice:
	A: Recursion should have exit otherwise, it is dead loop
	B: Recursion times shouldn't be too much, otherwise memory overflow
	C: Constructor method shouldn't be recursion
	
Recursion thought:
	Decomposition method: 
	Combination method: 

*************************************
Requirement: compute factorial for one integer n-1
method:
	A: loop
	B: Recursion

package day20_Recursion;

import java.util.Scanner;

public class FactorialTest {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		long result = -1;
		System.out.println("Please enter an integer[more than 2]:");
		int n = sc.nextInt();
		if (n <=0) {
			System.out.println("You entered wrong integer");
		} else {
//			result = factorial(n);
			result = factorial2(n);
		}

		System.out.println(result);

	}
	
	public static long factorial(int n) {
		long jc = 1;
		for (int i = 2; i <= n; ++i) {
			jc *= i;
		}
		
		return jc;
	}
	
	public static long factorial2(int n) {
		if (n == 1) {
			return 1;
		}
		
		return factorial2(n-1) * n;
	}

}



result:
Please enter an integer[more than 2]:
5
120
**********************************************
Problems:
1-Fibonacci Numbers
2-The name of the file that specifies the end of the suffix name 
  in the recursive traversal directory 
3-Recursive deletion of directories with content 

****************************************
1-Fibonacci Numbers

package cn.itcast_02;

import java.util.Scanner;

public class FibonacciTest {

	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Please enter an integer(more than 2):");
		int n = sc.nextInt();
		if (n < 1) {
			System.out.println("You entered wrong integer!");
		} else {

//			System.out.println(fibonacci(n));
//			System.out.println(fibonacci2(n));
			System.out.println(fibonacci3(n));
		}
	}
	
	// method 1: variable change
	public static int fibonacci(int n) {
		int a = 1;
		int b = 1;
		
		for (int x = 0; x < n - 1; ++x) {
			int tmp = a;
			a = b;
			b = tmp + b;
		}
		
		return b;
	}
	

	// method 2 : array
	public static int fibonacci2(int n) {
		if (n == 1 || n == 2) {
			return 1;
		}
		
		int[] arr = new int[n];
		arr[0] = 1;
		arr[1] = 1;
		for (int i=2; i<arr.length; ++i) {
			arr[i] = arr[i-1] + arr[i-2];
		}
		
		return arr[n-1];
	}
	
	// method 3 : recursion 
	public static long fibonacci3(int n) {
		if (n == 1 || n == 2) {
			return 1;
		} else {
			return fibonacci2(n - 2) + fibonacci2(n - 1);
		}
	}
}


result:
Please enter an integer(more than 2):
10
55
************************************************************
2-The name of the file that specifies the end of the suffix name 
  in the recursive traversal directory (absolute directory)

import java.io.File;

public class TraverseFilesEndsWithTest {

	public static void main(String[] args) {
		File sourceFolder = new File("c:\\develop");
		getAllFilePaths(sourceFolder);
		

	}
	
	public static void getAllFilePaths(File dir) {
		File[] files = dir.listFiles();
		
		for (File file : files) {
			if (file.isDirectory()) {
				getAllFilePaths(file);
			} else {
				if (file.getName().endsWith(".java")) {
					System.out.println(file.getAbsolutePath());
				}
			}
		}
		
	}
}

result:
c:\develop\code\Outer.java
...............
*********************************************************
3-Recursive deletion of directories with content 

package cn.itcast_03;

import java.io.File;

public class RecursionDeleteDirWithContentTest {

	public static void main(String[] args) {
		File sourceFolder = new File("c:\\demo");
		deleteDirWithContent(sourceFolder);


	}
	
	public static void deleteDirWithContent(File sourceFolder) {
		File[] files = sourceFolder.listFiles();
		
		for (File file : files) {
			if (file.isDirectory()) {
				deleteDirWithContent(file);
			} else {
				System.out.println(file.getName()+"----"+file.delete());
			}
		}
		
		System.out.println(sourceFolder.getName() + "---------"+sourceFolder.delete());
	}

}


result:
a.txt----true
test2---------true
test1---------true
test---------true
demo---------true
***********************************************
Day20_1.txt
JAVA IO Stream kinds：
Stream direction：
	Input stream：  Read data
	Output stream：Write data
Data type：
	byte stream：powerful
		Byte input stream :    InputStream
		Byte output stream:   OutputStream
	char stream：convenient to operate text data(easy to read)
		char input stream:       Reader
		char output stream:  Writer

InputStream:      abstract base Class of input stream
OutputStream：abstract base Class of output stream

FileOutputStream
FileInputStream

Byte stream comes before char stream
Each subclass is sufixed with base class
XxxOutputStream
XxxInputStream
XxxReader
XxxWriter

FileOutputStream
public class FileOutputStream
extends OutputStream
A file output stream is an output stream for writing data to a File or to a FileDescriptor. 


public FileOutputStream​(String name)
                 throws FileNotFoundException
public FileOutputStream​(File file,
                        boolean append)
                 throws FileNotFoundException

FileOutputStream: 
	create file by calling system method
      create File Object
	File points to the file

Byte output Stream steps:
	A: create Byte output Stream Object
	B: write data
	C: close Byte output Stream to release resource

FileOutputStream
public void write (byte[] b) throws IOException.                             // write a byte array
public void write (byte[] b, int off, int len) throws IOException.    // write a part of a byte array
public void write (int b) throws IOException                                   // write a byte

***********************************************
package cn.itcast_01;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileOutputStreamTest {

	public static void main(String[] args) throws IOException {
		// method 1 
		File file = new File("fos.txt");
		FileOutputStream fos = new FileOutputStream(file);
		
		// Write data into file
		fos.write("Hello World!".getBytes());
		fos.write("How old are you?".getBytes());
		fos.write("Beautiful girl".getBytes(), 0, 10);
		
		// release resource, close Stream Object, make it rubbish so that it can be collected
		fos.close();
		
		// method 2
		FileOutputStream fos2 = new FileOutputStream("fos2.txt");
		
		// Write data into file
		fos2.write(97); // 'a'
		fos2.write(57); // '9'
		fos2.write(55); // '7'
		fos2.write("Big World".getBytes(), 4, 5);
		byte[] bysBytes = {97, 98, 99, 100};
		fos2.write(bysBytes);
		fos2.write(bysBytes, 1, 3);
		
		// release resource, close Stream Object
		fos2.close();
	}
}

Fox.txt
Hello World!How old are you?Beautiful 

Fox2.txt
a97Worldabcdbcd

*****************************************************************
FileOutputStream wrap and append:
Wrap
	Windows: \r\n
	Linux: \n
	Mac: \r
Some advanced text editor will be compatible for “\r” or “\n”


Append: depend on FileOutputStream Constructor method
public FileOutputStream​(File file,
                        boolean append)
                 throws FileNotFoundException
public FileOutputStream​(String name,
                        boolean append)
                 throws FileNotFoundException

*******************************************************************
package cn.itcast_02;

import java.io.FileOutputStream;
import java.io.IOException;

public class FileOutputStreamWrapTest {

	public static void main(String[] args) throws IOException {
		FileOutputStream fos = new FileOutputStream("fos3.txt", true);
		for (int i=0; i<10; ++i) {
			fos.write(("Hello"+i).getBytes());
			fos.write("\r".getBytes());		
		}
	}
}

Fos.txt
When you run the program once, the content will be appended
**************************************************************************
Handle Exception during FileOutputStream
******************************************
package cn.itcast_01;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileOutputStreamTest {

	public static void main(String[] args) {
//		FileOutputStream fos = null;
		
//		// create FileOutputStream Object
//		try {
//			fos = new FileOutputStream("a.txt");
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		}
//		
//		// write data
//		byte[] bys = {97, 98, 99, 100, 101, 102};
//		try {
//			fos.write(bys, 0, 4);
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		
//		// release resources
//		try {
//			fos.close();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
		
		FileOutputStream fos = null;
		byte[] bys = {97, 98, 99, 100, 101, 102};
		
		try {
			fos = new FileOutputStream("a.txt");
			fos.write(bys, 0, 4);
		} catch (FileNotFoundException e) {
			e.printStackTrace();	
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

}

result:
a.txt
abcd
**********************************
If creating files failed
package cn.itcast_01;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileOutputStreamTest {

	public static void main(String[] args) {
//		FileOutputStream fos = null;
		
//		// create FileOutputStream Object
//		try {
//			fos = new FileOutputStream("a.txt");
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		}
//		
//		// write data
//		byte[] bys = {97, 98, 99, 100, 101, 102};
//		try {
//			fos.write(bys, 0, 4);
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		
//		// release resources
//		try {
//			fos.close();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
		
		FileOutputStream fos = null;
		byte[] bys = {97, 98, 99, 100, 101, 102};
		
		try {
			fos = new FileOutputStream("a.txt");
			fos.write(bys, 0, 4);
		} catch (FileNotFoundException e) {
			e.printStackTrace();	
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				fos.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

}

result:
java.io.FileNotFoundException: m:\a.txt (The system cannot find the path specified)
	at java.base/java.io.FileOutputStream.open0(Native Method)
	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:292)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:235)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:124)
	at cn.itcast_01.FileOutputStreamTest.main(FileOutputStreamTest.java:38)
Exception in thread "main" java.lang.NullPointerException
	at cn.itcast_01.FileOutputStreamTest.main(FileOutputStreamTest.java:46)

******************************************************************************
package cn.itcast_01;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class FileOutputStreamTest {

	public static void main(String[] args) {
//		FileOutputStream fos = null;
		
//		// create FileOutputStream Object
//		try {
//			fos = new FileOutputStream("a.txt");
//		} catch (FileNotFoundException e) {
//			e.printStackTrace();
//		}
//		
//		// write data
//		byte[] bys = {97, 98, 99, 100, 101, 102};
//		try {
//			fos.write(bys, 0, 4);
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
//		
//		// release resources
//		try {
//			fos.close();
//		} catch (IOException e) {
//			e.printStackTrace();
//		}
		
		FileOutputStream fos = null;
		byte[] bys = {97, 98, 99, 100, 101, 102};
		
		try {
			fos = new FileOutputStream("m:\\a.txt");
			fos.write(bys, 0, 4);
		} catch (FileNotFoundException e) {
			e.printStackTrace();	
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			if (fos != null) {
				try {
					fos.close();
				} catch (IOException e) {
					e.printStackTrace();
				}
			}
		}
	}
}


result:
java.io.FileNotFoundException: m:\a.txt (The system cannot find the path specified)
	at java.base/java.io.FileOutputStream.open0(Native Method)
	at java.base/java.io.FileOutputStream.open(FileOutputStream.java:292)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:235)
	at java.base/java.io.FileOutputStream.<init>(FileOutputStream.java:124)
	at cn.itcast_01.FileOutputStreamTest.main(FileOutputStreamTest.java:38)
*****************************************************************

FileInputStream
public class FileInputStream
extends InputStream

A FileInputStream obtains input bytes from a file in a file system. 
What files are available depends on the host environment.
FileInputStream is meant for reading streams of raw bytes such as image data.
For reading streams of characters, consider using FileReader.

public FileInputStream?(File file)
                throws FileNotFoundException

public FileInputStream?(FileDescriptor fdObj)
public FileInputStream?(String name)
                throws FileNotFoundException

public int read() // read a byte once
         throws IOException
public int read?(byte[] b) // read a byte array once
         throws IOException
public int read?(byte[] b,
                int off,
                int len)  // read a byte array part once
         throws IOException
public void close()
           throws IOException
		   
*******************************************************
package cn.itcast_01;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class FileInputStreamTest2 {

	public static void main(String[] args) {
		FileInputStream fis = null;
		try {
			fis = new FileInputStream("c:\\demo\\test\\a.txt");
//			int read = fis.read();
//			while (read != -1) {
//				System.out.print((char)read);
//				read = fis.read();
//			}
			int read = 0;
			while ((read = fis.read()) != -1) {
				System.out.print((char)read);
			}
			
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}

result:
abcd
Hello world!
The Fast and the furious!
*****************************************************
		   
InputStream
public byte[] readAllBytes()
                    throws IOException
public int readNBytes?(byte[] b,
                      int off,
                      int len)
               throws IOException

***********************************************************
package cn.itcast_01;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class FileInputStreamTest {

	public static void main(String[] args) {
		FileInputStream fis = null;
		try {
			fis = new FileInputStream("c:\\demo\\test\\a.txt");
			byte[] bys = fis.readAllBytes();
			for (byte by : bys) {
				System.out.print((char)by);
			}
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}


result:
abcd
Hello world!
The Fast and the furious!
******************************************************
Copy file:
data source:      a.txt
destination file: b.txt

********************************************
package cn.itcast_01;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class CopyDataTest2 {

	public static void main(String[] args) {
		FileInputStream fis = null;
		FileOutputStream fos = null;
		
		try {
			fis = new FileInputStream("a.txt");
			fos = new FileOutputStream("b.txt");

			int by = 0;
			while ((by = fis.read()) != -1) {
				fos.write(by);
			}
		} catch (FileNotFoundException e){
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				// close them without order
				fos.close();
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}

result:
b.txt has the same content as a.txt
****************************************************
In compute, Chinese word is stored into two bytes
	A: The first byte must be negative integer
	B: The second byte is commonly negative integer, maybe positive(no impact)
*******************************************************
package cn.itcast_02;

import java.util.Arrays;

public class TwoBytesIntoChineseTest {

	public static void main(String[] args) {
		String string = "abcde";
		byte[] bys = string.getBytes();
		System.out.println(Arrays.toString(bys));
		// [97, 98, 99, 100, 101]
		System.out.println("-------------");
		
		String string2 = "?????";
		byte[] bys2 = string2.getBytes();
		System.out.println(Arrays.toString(bys2));
		// [-50, -46, -80, -82, -60, -29, -42, -48, -71, -6]
		System.out.println("-------------");
	}
}

result:
[97, 98, 99, 100, 101]
-------------
[-50, -46, -80, -82, -60, -29, -42, -48, -71, -6]
-------------
*******************************************************

Copy image:
******************************************************
package cn.itcast_03;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class CopyDataTest {

	public static void main(String[] args) {
		FileInputStream fis = null;
		FileOutputStream fos = null;
		
		try {
			fis = new FileInputStream("c:\\demo\\test\\linqingxia.jpg");
			fos = new FileOutputStream("c:\\demo\\test1\\linqingxiacopy.jpg");

			int by = 0;
			while ((by = fis.read()) != -1) {
				fos.write(by);
			}
		} catch (FileNotFoundException e){
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				// close them without order
				fos.close();
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
}

result:
c:\\demo\\test1\\linqingxiacopy.jpg has the same content as c:\\demo\\test\\linqingxia.jpg
************************************************************************************************
At the same time, we can copy video file(it is slow)
Copy data(the same method as above):
	A: test file
	B: image file
	C: video file
****************************************************************
Read a file by the follwing method
FileInputStream.read(byte[]) // read special bytes once
***********************************************************
package cn.itcast_04;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

public class CopyDataTest {

	public static void main(String[] args) throws IOException {
		FileInputStream fis = new FileInputStream("c:\\demo\\test\\telog.txt");
		byte[] bys = new byte[1024];
		
		int len = 0;
		while ((len = fis.read(bys)) != -1) {
			System.out.print(new String(bys, 0, len));
		}
		
		fis.close();
	}

}

result:
c:\\demo\\test\\telog.txt content
**********************************************************************
Read file according to byte stream
	A: read a byte once
		FileInputStream fis = new FileInputStream("a.txt");
		
		int by = 0;
		while ((by = fis.read()) != -1) {
			System.out.print((char)by);// first ascii code, then converted into char
		}
		fis.close();
	B: read a byte array once
		FileInputStream fis = new FileInputStream("a.txt");
		
		byte[] bys = new byte[1024];
		int len = 0;
		while ((len = fis.read(bys)) != -1) {
			System.out.print(new String(bys, 0, len));
		}
		fis.close();

********************************************************************
package cn.itcast_05;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;

public class ByteStreamCopyFileTest {

	public static void main(String[] args) {
		FileInputStream fis = null;
		FileOutputStream fos = null;
		
		try {
			fis = new FileInputStream("c:\\demo\\test\\20.avi");
			fos = new FileOutputStream("c:\\demo\\test1\\20copy.avi");

			int len = 0;
			byte[] bys = new byte[1024];
			while ((len = fis.read(bys)) != -1) {
//				fos.write(new String(bys, 0, len));
				fos.write(bys);
			}
		} catch (FileNotFoundException e){
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			try {
				// close them without order
				fos.close();
				fis.close();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}

	}

}

result:
copy video file very fast
***********************************************************
Byte Buffered Stream: reading a byte array is faster than reading a byte
	BufferedOutputStream
	BufferedInputStream

public class BufferedOutputStream
extends FilterOutputStream

The class implements a buffered output stream. By setting up such an output stream, 
an application can write bytes to the underlying output stream without necessarily 
causing a call to the underlying system for each byte written.

constructor: specify the buffer size, but default buffer size is enough
public BufferedOutputStream​(OutputStream out)
public BufferedOutputStream​(OutputStream out,
                            int size)
							

public void write​(byte[] b,
                  int off,
                  int len)
           throws IOException
public void write​(int b)
           throws IOException

********************************************
package cn.itcast_01;

import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class BufferedOutputStreamTest {

	public static void main(String[] args) throws IOException {
		BufferedOutputStream bos = new BufferedOutputStream(
				new FileOutputStream("a.txt"));
		
		byte[] bys = {97, 98, 99, 100};
		
		bos.write(bys);
		
		bos.close();
	}
}

**********************************************
package cn.itcast_01;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class BufferedInputStreamTest {

	public static void main(String[] args) throws IOException {
		
		BufferedOutputStream bos = new BufferedOutputStream(
				new FileOutputStream("b.txt"));
		
		BufferedInputStream bis = new BufferedInputStream(
				new FileInputStream("c:\\demo\\test\\a.txt"));
	
		int by = 0;
		while ((by = bis.read()) != -1) {
			bos.write(by);
		}
		bis.close();
		bos.close();

	}

}

result:
b.txt has the same content as 
c:\\demo\\test\\a.txt
*******************************************
package cn.itcast_01;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class BufferedInputStreamTest2 {

	public static void main(String[] args) throws IOException {
		
		BufferedOutputStream bos = new BufferedOutputStream(
				new FileOutputStream("b.txt"));
		
		BufferedInputStream bis = new BufferedInputStream(
				new FileInputStream("c:\\demo\\test\\a.txt"));
	
		byte[] bys = new byte[1024];
		int len = 0;
		while ((len = bis.read(bys)) != -1) {
			bos.write(bys, 0, len);
		}
		bis.close();
		bos.close();

	}

}

result:
b.txt has the same content as 
c:\\demo\\test\\a.txt
*************************************************
Four methods to implement write file, read file and copy file
	FileOutputStream
		write(int)              // write one byte
		write(byte[])           // write one byte array
		write(byte[], int, int) // write part of one byte array
	FileInputStream
		read()         // read one byte once
		read(byte[])   // read one byte array once
	BufferedOutputStream
		write(int)              // write one byte
		write(byte[])           // write one byte array
		write(byte[], int, int) // write part of one byte array
	BufferedInputStream
		read()         // read one byte once
		read(byte[])   // read one byte array once
****************************************************
package day20_OutStream;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

public class AllMethodsCopyFileTest {

	public static void main(String[] args) throws IOException {
		method1();
		method2();
		method3();
		method4();

	}

	public static void method4() throws IOException {
		BufferedOutputStream bos1 = new BufferedOutputStream(new FileOutputStream("x7.txt"));
		byte[] bys = {105, 106, 107, 108};
		bos1.write(bys);
		bos1.close();
		
		BufferedInputStream bis1 = new BufferedInputStream(new FileInputStream("x7.txt"));
		BufferedOutputStream bos2 = new BufferedOutputStream(new FileOutputStream("x8.txt"));
		int len = 0;
		byte[] bys1 = new byte[1024];
		
		while ((len = bis1.read(bys1)) != -1) {
			bos2.write(bys1);;
		}
		
		bos2.close();
		bis1.close();
	}

	public static void method3() throws IOException {
		BufferedOutputStream bos1 = new BufferedOutputStream(new FileOutputStream("x5.txt"));
		byte[] bys = {101, 102, 103, 104};
		bos1.write(bys);
		bos1.close();
		
		BufferedInputStream bis1 = new BufferedInputStream(new FileInputStream("x5.txt"));
		BufferedOutputStream bos2 = new BufferedOutputStream(new FileOutputStream("x6.txt"));
		int by = 0;
		
		while ((by = bis1.read()) != -1) {
			bos2.write(by);;
		}
		
		bos2.close();
		bis1.close();
	}

	public static void method2() throws IOException {
		FileOutputStream fos1 = new FileOutputStream("x3.txt");
		fos1.write(100);
		fos1.write("Hello World!".getBytes());
		fos1.close();
		
		FileInputStream fis1 = new FileInputStream("x3.txt");
		FileOutputStream fos2 = new FileOutputStream("x4.txt");
		int len = 0;
		byte[] bys = new byte[1024];
		
		while ((len = fis1.read(bys)) != -1) {
			fos2.write(bys, 0, len);;
		}
		
		fos2.close();
		fis1.close();
	}

	public static void method1() throws IOException {
		FileOutputStream fos1 = new FileOutputStream("x1.txt");
		byte[] bys = {97, 98, 99, 100};
		fos1.write(bys);
		fos1.close();
		
		FileInputStream fis1 = new FileInputStream("x1.txt");
		FileOutputStream fos2 = new FileOutputStream("x2.txt");
		int by = 0;
		
		while ((by = fis1.read()) != -1) {
			fos2.write(by);;
		}
		
		fos2.close();
		fis1.close();
	}

}


result:
x1.txt/x2.txt: abcd
x3.txt/x4.txt: dHello World!
x5.txt/x6.txt: efgh
x7.txt/x8.txt: ijkl
************************************************************







  

