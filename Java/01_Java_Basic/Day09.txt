------------------------------------------------------
由于继承方法中有一个现象，方法重写
所以，父类的功能，就会被子类给覆盖掉
有些时候，我们不想让子类去覆盖掉父类的功能，只能让他使用。
这个时候，针对这种情况，java就提供了一个关键字：final
final：最终的意思，它可以修饰类，方法，变量。
特点：
	final可以修饰类，该类不能被继承
	final可以修饰方法，该方法不能被重写
	final可以修饰变量,该变量不能被重新赋值
-----------------------------------
常量:
	A：字面值常量
		"hello" 
	B：自定义常量
		final int x = 100;
----------------------------------------
final class Fu {}//无法从最终Fu进行继承

----------------------------------------------------
code:
class Fu {
	public Fu() {
		System.out.println("Fu default construct.");
	}
	
	public final void show() {
		System.out.println("Fu show.");
	}
}

class Zi extends Fu {
	public Zi() {
		System.out.println("Zi default construct.");
	}
	
	public void show() {
		System.out.println("Zi show");
	}
}

class FuZiTest1 {
	public static void main(String[] args) {
		Zi zi = new Zi();
		zi.show();
	}
}
-------------------------
result: it can't be compile successfully
C:\develop\code>javac FuZiTest1.java
FuZiTest1.java:16: error: show() in Zi cannot override show() in Fu
        public void show() {
                    ^
  overridden method is final
1 error
-------------------------------------
code:
class Fu {
	public final int num = 10;

	public Fu() {
		System.out.println("Fu default construct.");
	}
	
	public void show() {
		System.out.println("Fu show.");
	}
}

class Zi extends Fu {
	public Zi() {
		System.out.println("Zi default construct.");
	}
	
	public void show() {
		num = 20;
		System.out.println("Zi show num:"+num);
	}
}

class FuZiTest1 {
	public static void main(String[] args) {
		Zi zi = new Zi();
		zi.show();
	}
}
--------------------------
result:
C:\develop\code>javac FuZiTest1.java
FuZiTest1.java:19: error: cannot assign a value to final variable num
                num = 20;
                ^
1 error
-----------------------------------------------------------------------------
final修饰局部变量：
A：基本数据类型：基本类型的值不能发生改变
B：引用数据类型：引用类型的地址值不能发生改变，但是引用类型的地址指向的值可以改变
---------------------------
code:
class Student {
	public final int age = 10;
}

class FinalTest {
	public static void main(String[] args) {
		int x = 10;
		x = 100;
		System.out.println("x:"+x);
		final int y = 20;
		y = 200;
		System.out.println("y:"+y);
		
		Student s = new Student();
		System.out.println(s.age);
		s.age = 20;
		System.out.println(s.age);
	}
}
-----------------------------
result:
FinalTest.java:16: error: cannot assign a value to final variable age
                s.age = 20;
                 ^
1 error
---------------------------------------
class Student {
	public int age = 10;
}

class FinalTest {
	public static void main(String[] args) {
		int x = 10;
		x = 100;
		System.out.println("x:"+x);
		final int y = 20;
		//y = 200;
		System.out.println("y:"+y);
		
		Student s = new Student();
		System.out.println(s.age);
		s.age = 20;
		System.out.println(s.age);
		
		final Student ss = new Student();
		System.out.println(ss.age);
		ss.age = 20;
		System.out.println(ss.age);
		
		ss = new Student();
		
	}
}
-------------------------------
C:\develop\code>javac FinalTest.java
FinalTest.java:24: error: cannot assign a value to final variable ss
                ss = new Student();
                ^
1 error
--------------------------------------------------
final修饰的变量的初始化的时机：
A：被final修饰的变量只能赋值一次（要不在初始化时赋值，要不在默认初始化后赋值）
B：在构造方法完毕前（非静态的常量）

---------------------------------------------
多态：同一个对象（事物），在不同的时刻体现出来的不同的状态
Cat c = new Cat();// Cat is Cat
Animal a = new Animal();// Cat is Animal
从右向左念
水（液体，固体，气态）

多态的前提：
	A：要有继承关系
	B：要有方法重写
	C：要有父类引用指向子类对象
	Base b = new Derived();
---------------------------
code:
class Base {
	public Base() {
		System.out.println("Base default construct.");
	}
	
	public void show() {
		System.out.println("Base show");
	}
}

class Derived extends Base {
	public Derived() {
		System.out.println("Derived default construct.");
	}

	public void show() {
		System.out.println("Derived show");
	}	
}

class PolymorphismTest {
	public static void main(String[] args) {
		Base b1 = new Base();
		b1.show();
		
		Base b2 = new Derived();
		b2.show();
	}

}
---------------------
result:
C:\develop\code>java PolymorphismTest
Base default construct.
Base show
Base default construct.
Derived default construct.
Derived show
-------------------------------
多态中的成员访问特点：
  A：成员变量
    编译看左边，运行看左边
  B：构造方法
    创建子类对象的时候，访问父类的构造方法，对父类的数据进行初始化
  C：成员方法
    编译看左边，运行看右边
  D：静态方法
    编译看左边，运行看左边
    （静态和类相关，算不上重写，访问还是左边的）
 由于成员方法存在方法重写，所以它运行看右边。
----------------------------------------------
class Base {
	public int num = 100;
	public Base() {
		System.out.println("Base default construct.");
	}
	
	public void show() {
		System.out.println("Base show");
	}
	
	public static void function() {
		System.out.println("Base function");
	}
}

class Derived extends Base {
	public int num = 200;
	public Derived() {
		System.out.println("Derived default construct.");
	}

	public void show() {
		System.out.println("Derived show");
	}

	public static void function() {
		System.out.println("Derived function");
	}	
}

class PolymorphismTest {
	public static void main(String[] args) {
		Base b1 = new Base();
		b1.show();
		
		Base b2 = new Derived();
		b2.show();
		System.out.println("num:"+b2.num);
		b2.function();
	}
}
result:
C:\develop\code>java PolymorphismTest
Base default construct.
Base show
Base default construct.
Derived default construct.
Derived show
num:100
Base function
------------------------------------------------------------
多态的好处：
  A：提高了代码的维护性（继承保证）
  B：提高了代码的扩展性

 ---------------------------------
 class Animal {
	public void eat() {
		System.out.println("eat");
	}
	
	public void sleep() {
		System.out.println("sleep");
	}
}

class Dog extends Animal {
	public void eat() {
		System.out.println("Dog eats meat");
	}
	
	public void sleep() {
		System.out.println("Dog sleeps");
	}
}

class Cat extends Animal {
	public void eat() {
		System.out.println("Cat eats fish");
	}
	
	public void sleep() {
		System.out.println("Cat sleeps");
	}
}

class AnimalTool {
/**
* @ You can't create AnimalTool object
*/
	private AnimalTool() {}// not create AnimalTool object
	
/**
* @ You can use any Animal
* @param Animal
*/	
	public static void useAnimal(Animal c) {
		c.eat();
		c.sleep();
	}
}
class CatDogTest1 {
	public static void main(String[] args) {
		Animal a1 = new Dog();
		a1.eat();
		a1.sleep();
		
		Animal a2 = new Cat();
		a2.eat();
		a2.sleep();
		System.out.println("--------------");
		
		Animal a3 = new Dog();
		for (int i = 0; i < 3; ++i) {
			AnimalTool.useAnimal(a3);
		}
		System.out.println("--------------");
		
		Animal a4 = new Cat();
		for (int i = 0; i < 3; ++i) {
			AnimalTool.useAnimal(a4);
		}

	}
}
result：
Dog eats meat
Dog sleeps
Cat eats fish
Cat sleeps
--------------
Dog eats meat
Dog sleeps
Dog eats meat
Dog sleeps
Dog eats meat
Dog sleeps
--------------
Cat eats fish
Cat sleeps
Cat eats fish
Cat sleeps
Cat eats fish
Cat sleeps
---------------------------------------
多态的弊端：
不能使用子类特有的功能（Base b = new Derived();）

针对这个弊端
A：创建子类对象，调用子类方法（可以但是占用内存）(Derived d = new Derived();)
B：把父类的引用强制转换为给子类的引用 （Derived d = new Base();）

------------------------------------------------------------------------------
class Base {
	public Base() {}
	
	public void show() {
		System.out.println("show Base");
	}	
}

class Derived extends Base {
	public Derived() {}
	
	public void show() {
		System.out.println("show Derived");
	}
	
	public void method() {
		System.out.println("method Derived");
	}
}

class BaseDerivedTest {
	public static void main(String[] args) {
		Base b1 = new Derived();
		b1.show();
		//b1.method();
		
		Derived d = (Derived)b1;
		d.method();
	}
}
result:
C:\develop\code>java BaseDerivedTest
show Derived
method Derived
---------------------------------------------------------------------------

ClassCastException:类型转换中向下转型中可能会出现
编译只检查基本语法错误，运行时还会判断是否有错误
------------------------------------------------------------------------
SouthPerson and NorthPerson
code:
class Person {
	public Person() {
		System.out.println("Person default construct.");
	}
	
	public void eat() {
		System.out.println("Person eat");
	}
}

class SouthPerson extends Person {
	public SouthPerson() {
		System.out.println("SouthPerson default construct");
	}
	
	public void eat() {
		System.out.println("SouthPerson eat");
	}
	
	public void sell() {
		System.out.println("SouthPerson sell");
	}
}

class NorthPerson extends Person {
	public NorthPerson() {
		System.out.println("NorthPerson default construct");
	}
	
	public void eat() {
		System.out.println("NorthPerson eat");
	}
	
	public void research() {
		System.out.println("NorthPerson research");
	}
}

class SouthNorthPersonTest {
	public static void main(String[] args) {
		Person ps = new SouthPerson();
	    ps.eat();
		SouthPerson s = (SouthPerson)ps;
		s.sell();
	
	    Person pn = new NorthPerson();
	    pn.eat();
		NorthPerson n = (NorthPerson)pn;
		n.research();
	}
}
result:
C:\develop\code>java SouthNorthPersonTest
Person default construct.
SouthPerson default construct
SouthPerson eat
SouthPerson sell
Person default construct.
NorthPerson default construct
NorthPerson eat
NorthPerson research
-------------------------------------------------------
多态的成员访问特点：
  方法：编译看左边，运行看右边
继承的时候：
  子类中有和父类中一样的方法，叫重写
  子类中没有和父类中出现过的方法，方法就被继承过来
------------------------------------------------------------
class A {
	public void show() {
		show2();
	}
	
	public void show2() {
		System.out.println("I");
	}
}

class B extends A {
	public void show2() {
		System.out.println("love");
	}
}

class C extends B {
	public void show() {
		super.show();
	}
	
	public void show2() {
		System.out.println("you");
	}
}

class PolymorphismTest2 {
	public static void main(String[] args) {
		A a = new B();
		a.show();
		
		B b = new C();
		b.show();
	}
}
result:
love
you
---------------------------------------------------------
抽象类：一个没有方法体的方法应该定义为抽象方法，而类中如果有抽象方法，该类必须定义为抽象类
抽象类的特点：
  A：抽象类和抽象方法必须用abstract关键字修饰
  B：抽象类中不一定有抽象方法，但是有抽象方法的类必须是抽象类
  C：抽象类不能实例化，因为它不是具体的
抽象类有构造方法，但是不能实例化，主要用于子类访问父类数据的初始化
  D：抽象的子类
    a：如果不想重写抽象方法，抽象类的子类是一个抽象类
    b:重写所有的抽象方法，这个时候子类是一个具体的类
  抽象类的实例化其实是靠具体的子类实现的，是多态的方式
  
空方法体 abstract void eat() {}
无方法体 abstract void eat();
--------------------------------------------
abstract class Animal {
	public abstract void eat();
	
}

class Dog extends Animal {
	public void eat() {
		System.out.println("Dog eat meat");
	}
	
}

class Cat extends Animal {
	public void eat() {
		System.out.println("Cat eat fish");
	}
}

abstract class Tiger extends Animal {}

class AbstractTest1 {
	public static void main(String[] args) {
		Animal sd = new Dog();
		sd.eat();
		
		Animal sc = new Cat();
		sc.eat();
		
		//Animal s = new Animal();
		
		//Animal st = new Tiger();
	}
}
result：
Dog eat meat
Cat eat fish
-----------------------------------
抽象类的成员特点：
  成员变量：既可以是变量，也可以是常量
  构造方法：有
    用于子类访问父类数据的初始化
  成员方法：既可以是抽象的，也可以是非抽象的

抽象类的成员方法特性：
A：抽象方法 强制要求子类做的事情
B：非抽象方法 子类继承的事情，提高代码的复用性
-------------------------------------------------
abstract class Animal {
	public int num = 10;
	public final int num2 = 100;
	public String name;
	public int age;
	
	public Animal() {
		System.out.println("Animal default construct");
	}
	
	public Animal(String name, int age) {
		this.name = name;
		this.age = age;
		System.out.println("Animal parameter construct");
	}
	
	public abstract void eat();
	
	public abstract void show();
	
	public void method() {
		System.out.println("Animal method");
	}
	
}

class Dog extends Animal {
	public void eat() {
		System.out.println("Dog eat meat");
	}
	
	public void show() {
		System.out.println("Dog show");
	}
	
}

class Cat extends Animal {
	public void eat() {
		System.out.println("Cat eat fish");
	}
	
    public void show() {
		System.out.println("Cat show");
	}
}

abstract class Tiger extends Animal {}

class AbstractTest1 {
	public static void main(String[] args) {
		Animal sd = new Dog();
		System.out.println(sd.num);
		sd.num = 20;
		System.out.println(sd.num);
		System.out.println(sd.num2);
		//sd.num2 = 200;
		//System.out.println(sd.num2);
		sd.eat();
		sd.show();
		sd.method();
		
		Animal sc = new Cat();
		sc.eat();
		sc.show();
		sc.method();
		
		//Animal s = new Animal();
		
		//Animal st = new Tiger();
	}
}
result:
Animal default construct
10
20
100
Dog eat meat
Dog show
Animal method
Animal default construct
Cat eat fish
Cat show
Animal method
----------------------------------------------------
分析：从具体到抽象
实现：从抽象到具体
-----------------------------------------------------------------
abstract class Animal {
	public int num = 10;
	public final int num2 = 100;
	public String name;
	public int age;
	
	public Animal() {
		System.out.println("Animal default construct");
	}
	
	public Animal(String name, int age) {
		this.name = name;
		this.age = age;
		System.out.println("Animal parameter construct");
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public abstract void eat();
	
	public abstract void show();
	
	public void method() {
		System.out.println("Animal method");
	}
	
}

class Dog extends Animal {
	public Dog() {}
	
	public Dog(String name, int age) {
		super(name, age);
	}
	
	public void eat() {
		System.out.println("Dog eat meat");
	}
	
	public void show() {
		System.out.println("Dog show");
	}
	
}

class Cat extends Animal {
	public Cat() {}
	
	public Cat(String name, int age) {
		super(name, age);
	}
	
	public void eat() {
		System.out.println("Cat eat fish");
	}
	
    public void show() {
		System.out.println("Cat show");
	}
}

abstract class Tiger extends Animal {}

class AbstractTest1 {
	public static void main(String[] args) {
		Animal sd = new Dog();
		System.out.println(sd.num);
		sd.num = 20;
		System.out.println(sd.num);
		System.out.println(sd.num2);
		//sd.num2 = 200;
		//System.out.println(sd.num2);
		sd.eat();
		sd.show();
		sd.method();
		sd.setName("Lucky");
		sd.setAge(2);
		System.out.println(sd.getName() + "-----" + sd.getAge());
		
		Animal sc = new Cat();
		sc.eat();
		sc.show();
		sc.method();
		sc.setName("Poly");
		sc.setAge(3);
		System.out.println(sc.getName() + "-----" + sc.getAge());

		Animal sd1 = new Dog("Tom",  4);
		sd1.eat();
		sd1.show();
		sd1.method();
		
		Animal sc1 = new Cat("Tom",  4);
		sc1.eat();
		sc1.show();
		sc1.method();
		
		//Animal s = new Animal();
		
		//Animal st = new Tiger();
	}
}

result:
Animal default construct
10
20
100
Dog eat meat
Dog show
Animal method
Lucky-----2
Animal default construct
Cat eat fish
Cat show
Animal method
Poly-----3
Animal parameter construct
Dog eat meat
Dog show
Animal method
Animal parameter construct
Cat eat fish
Cat show
Animal method
-------------------------------------------------------
abstract class Teacher {
	public String name;
	public int age;
	
	public Teacher() {
		System.out.println("Teacher default construct");
	}
	
	public Teacher(String name, int age) {
		this.name = name;
		this.age = age;
		System.out.println("Teacher parameter construct");
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public abstract void teach();
}


class BasicClassTeacher extends Teacher {
	public BasicClassTeacher() {
		super();
		System.out.println("BasicClassTeacher default construct");
	}
	
	public BasicClassTeacher(String name, int age) {
		super(name, age);
		System.out.println("BasicClassTeacher parameter construct");
	}
	
	public void teach() {
		System.out.println("BasicClassTeach teach");
	}
}

class JobClassTeacher extends Teacher {
	public JobClassTeacher() {
		super();
		System.out.println("JobClassTeacher default construct");
	}
	
	public JobClassTeacher(String name, int age) {
		super(name, age);
		System.out.println("JobClassTeacher parameter construct");
	}
	
	public void teach() {
		System.out.println("JobClassTeacher teach");
	}
}

class DifferentTeacherTest {
	public static void main(String[] args) {
		Teacher tb = new BasicClassTeacher();
		tb.setName("Emma");
		tb.setAge(20);
		System.out.println(tb.getName()+"---"+tb.getAge());
		tb.teach();
		System.out.println("-------------------------");
		
		tb = new BasicClassTeacher("Lily", 25);
		System.out.println(tb.getName()+"---"+tb.getAge());
		tb.teach();
		System.out.println("-------------------------");
		
		tb = new JobClassTeacher();
		tb.setName("Bob");
		tb.setAge(40);
		System.out.println(tb.getName()+"---"+tb.getAge());
		tb.teach();
		System.out.println("-------------------------");
		
		tb = new BasicClassTeacher("Tom", 50);
		System.out.println(tb.getName()+"---"+tb.getAge());
		tb.teach();
		System.out.println("-------------------------");
	}
}

result:
Teacher default construct
BasicClassTeacher default construct
Emma---20
BasicClassTeach teach
-------------------------
Teacher parameter construct
BasicClassTeacher parameter construct
Lily---25
BasicClassTeach teach
-------------------------
Teacher default construct
JobClassTeacher default construct
Bob---40
JobClassTeacher teach
-------------------------
Teacher parameter construct
BasicClassTeacher parameter construct
Tom---50
BasicClassTeach teach
-------------------------
------------------------------------------------------------------------
abstract class Student {
	String name;
	int age;
	int grade;
	
	public Student() {}
	
	public Student(String name, int age, int grade) {
		this.name = name;
		this.age = age;
		this.grade = grade;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setGrade(int grade) {
		this.grade = grade;
	}
	
	public int getGrade() {
		return grade;
	}
	
	abstract void study(); 
	
	abstract void eat();
}

class BasicStudent extends Student {
	public BasicStudent() {}
	
	public BasicStudent(String name, int age, int grade) {
		super(name, age, grade);
	}
	
	public void study() {
		System.out.println("BasicStudent study");
	}
	
	public void eat() {
		System.out.println("BasicStudent eat");
	}
}

class JobStudent extends Student {
	public JobStudent() {}
	
	public JobStudent(String name, int age, int grade) {
		super(name, age, grade);
	}
	
	public void study() {
		System.out.println("JobStudent study");
	}
	
	public void eat() {
		System.out.println("JobStudent eat");
	}
}

class BasicJobStudentTest {
	public static void main(String[] args) {
		Student sb = new BasicStudent();
		sb.setName("Qiang Li");
		sb.setAge(15);
		sb.setGrade(9);
		System.out.println(sb.getName()+"---"+sb.getAge()+"---"+sb.getGrade());
		sb.study();
		sb.eat();
		System.out.println("----------------------------------------------------");
		
		sb = new BasicStudent("Li Wang", 18, 12);
		System.out.println(sb.getName()+"---"+sb.getAge()+"---"+sb.getGrade());
		sb.study();
		sb.eat();
		System.out.println("----------------------------------------------------");

		sb = new JobStudent();
		sb.setName("Qiang Li");
		sb.setAge(15);
		sb.setGrade(9);
		System.out.println(sb.getName()+"---"+sb.getAge()+"---"+sb.getGrade());
		sb.study();
		sb.eat();
		System.out.println("----------------------------------------------------");
		
		sb = new JobStudent("Li Wang", 18, 12);
		System.out.println(sb.getName()+"---"+sb.getAge()+"---"+sb.getGrade());
		sb.study();
		sb.eat();
		System.out.println("----------------------------------------------------");		
	}
}

result:
Qiang Li---15---9
BasicStudent study
BasicStudent eat
----------------------------------------------------
Li Wang---18---12
BasicStudent study
BasicStudent eat
----------------------------------------------------
Qiang Li---15---9
JobStudent study
JobStudent eat
----------------------------------------------------
Li Wang---18---12
JobStudent study
JobStudent eat
----------------------------------------------------
--------------------------------------------------------------------------------------------------
abstract class Employee {
	String name;
	int id;
	int salary;
	
	public Employee() {}
	
	public Employee(String name, int id, int salary) {
		this.name = name;
		this.id = id;
		this.salary = salary;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setId(int id) {
		this.id = id;
	}
	
	public int getId() {
		return id;
	}
	
	public void setSalary(int salary) {
		this.salary = salary;
	}
		
	public int getSalary() {
		return salary;
	}
	
	abstract void work();
}

class CommonEmployee extends Employee {
	public CommonEmployee() {}
	
	public CommonEmployee(String name, int id, int salary) {
		super(name, id, salary);
	}
	
	public void work() {
		System.out.println("CommonEmployee work");
	}
}

class Manager extends Employee {
	int bonus;
	
	public Manager() {}
	
	public Manager(String name, int id, int salary, int bonus) {
		super(name, id, salary);
		this.bonus = bonus;
	}
	
	public void setBonus(int bonus) {
		this.bonus = bonus;
	}
	
	public int getBonus() {
		return bonus;
	}
	
	public void work() {
		System.out.println("Manager work");
	}
}

class EmployeeManagerTest {
	public static void main(String[] args) {
		System.out.println("Manager start");
		Employee e = new Manager();
		e.setName("Peter");
		e.setId(1001);
		e.setSalary(40000);
		//e.setBonus(400000);
		System.out.println(e.getName()+"---"+e.getId()+"---"+e.getSalary());
		e.work();
		System.out.println("----------------------");
		
		e = new Manager("Emma", 1002, 50000, 500000);
		System.out.println(e.getName()+"---"+e.getId()+"---"+e.getSalary());
		e.work();
		System.out.println("----------------------");
		
		Manager m = (Manager)e;
		m.setName("Peter");
		m.setId(1003);
		m.setSalary(40000);
		m.setBonus(400000);
		System.out.println(m.getName()+"---"+m.getId()+"---"+m.getSalary()+"---"+m.getBonus());
		e.work();
		System.out.println("----------------------");
		
	    System.out.println("CommonEmployee start");
		Employee ce = new CommonEmployee();
		ce.setName("Peter");
		ce.setId(1001);
		ce.setSalary(4000);
		System.out.println(ce.getName()+"---"+ce.getId()+"---"+ce.getSalary());
		ce.work();
		System.out.println("----------------------");
		
		ce = new CommonEmployee("Emma", 1002, 5000);
		System.out.println(ce.getName()+"---"+ce.getId()+"---"+ce.getSalary());
		ce.work();
		System.out.println("----------------------");
		
		CommonEmployee mce = (CommonEmployee)ce;
		mce.setName("Peter");
		mce.setId(1003);
		mce.setSalary(4000);
		System.out.println(mce.getName()+"---"+mce.getId()+"---"+mce.getSalary());
		mce.work();
		System.out.println("----------------------");	
	}
}

result:
Manager start
Peter---1001---40000
Manager work
----------------------
Emma---1002---50000
Manager work
----------------------
Peter---1003---40000---400000
Manager work
----------------------
CommonEmployee start
Peter---1001---4000
CommonEmployee work
----------------------
Emma---1002---5000
CommonEmployee work
----------------------
Peter---1003---4000
CommonEmployee work
----------------------
-----------------------------------------------------------------------
一个类如果没有抽象方法，可以定义为抽象类吗？如果可以，有什么意义？
A：可以
B：不让创建对象

抽象类不能和哪些关键字共存
private 冲突（非法的修饰符组合 abstract和private，因为不能重写）
final 冲突（非法的修饰符组合 abstract和final，因为不能重写）
static 无意义，访问一个没有方法体的方法
----------------------------------------------------------------
接口：
接口的特点：
  A：接口用interface关键字表示
    interface 接口名 {}
  B:类实现接口用implements表示
    class 类名 implements 接口名 {}
  C:接口不能实例化，可以按照多态的方式来实例化
  D：接口的子类
    a：可以是抽象类，但是意义不大，因为不能实例化
    b：可以是具体类，要重写接口中所有抽象方法（推荐方案）
    
  
多态的种类：
  A：具体类多态（几乎没有）
  B：抽象类多态（常见）
  C：接口多态（最常见）

接口成员特点：
  成员变量：接口中成员变量只能是常量，并且是静态的，因为有默认修饰符public static final，建议自己手动给出全称
  构造方法：接口没有构造方法
  成员方法：接口中是默认的public abstract

所有类都默认继承自Object类，类Object是所有类的根类，每个类都使用Object做超类

类与类的关系：继承关系，只能单继承，可以多层继承
类与接口的关系：实现关系，可以单实现，也可以多实现，并且可以在继承一个类的同时实现多个接口
接口与接口的关系：可以单继承也可以多继承

---------------------------
interface Father {
    void show();
}

interface Mother {
    void show2();
}

interface Sister extends Father, Mother {

}

class Son implements Father, Mother {
    public void show() {
        System.out.println("show son");
    }

    public void show2() {
        System.out.println("show2 son");
    }
}

class InterfaceTest2 {
    public static void main(String[] args) {
        Father f = new Son();
        f.show();
        //f.show2();
        Mother m = new Son();
        m.show2();
        //m.show();
    }
}
result：
show son
show2 son
-----------------------------------

抽象类和接口的区别：
成员的区别：
  抽象类：
    成员变量：可以变量，可以常量
    构造方法：有
    成员方法：可以抽象，可以不抽象
  接口：
    成员变量：只可以常量
    构造方法：没有
    成员方法：只可以抽象
关系的区别：
  类与类：继承，单继承，多层继承
  类与接口：实现，单实现，多实现
  接口与接口：继承，单继承，多继承
设计理念的区别：
  抽象类：被继承体现的是“is a”的关系，抽象类中定义的是该继承体系中的共性功能
  接口：被实现体现的是“like a”的关系，接口中定义的是该继承体系中的扩展功能
--------------------
interface Jumping {
    public abstract void jump();
}

abstract class Animal {
    String name;
    int age;

    public Animal() {}

    public Animal(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    abstract void eat();

    void sleep() {
        System.out.println("sleep");
    }
}

class Dog extends Animal {
    public Dog() {}

    public Dog(String name, int age) {
        super(name, age);
    }

    void eat() {
        System.out.println("Dog eat meat");
    }
}

class Cat extends Animal {
    public Cat() {}

    public Cat(String name, int age) {
        super(name, age);
    }

    void eat() {
        System.out.println("Cat eat fish");
    }

    public void jump() {
        System.out.println("Special cat jump");
    }
}

class JumpDog extends Dog implements Jumping {
    public JumpDog() {};

    public JumpDog(String name, int age) {
        super(name, age);
    }

    public void jump() {
        System.out.println("Special dog jump");
    }
}

class JumpCat extends Cat implements Jumping {
    public JumpCat() {};

    public JumpCat(String name, int age) {
        super(name, age);
    }
    public void jump() {
        System.out.println("Special cat jump");
    }
}

class InterfaceTest3 {
    public static void main(String[] args) {
        JumpDog jd = new JumpDog("High", 1);
        jd.eat();
        jd.sleep();
        jd.jump();

        JumpCat jc = new JumpCat("Low", 2);
        jc.eat();
        jc.sleep();
        jc.jump();

        Animal ad = new Dog();
        ad.setName("Lucky");
        ad.setAge(2);
        System.out.println(ad.getName()+"---"+ad.getAge());
        ad.eat();
        ad.sleep();

        Animal ac = new Cat();
        ac.setName("Catty");
        ac.setAge(1);
        System.out.println(ac.getName()+"---"+ac.getAge());
        ac.eat();
        ac.sleep();
    }
}

result：
Dog eat meat
sleep
Special dog jump
Cat eat fish
sleep
Special cat jump
Lucky---2
Dog eat meat
sleep
Catty---1
Cat eat fish
sleep
--------------------------------------
interface Smoking {
    public abstract void smoke();
}

abstract class Person {
    String name;
    int age;

    public Person() {}

    public Person(String name, int age) {
        this.name = name;
        this.age = age;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getName() {
        return name;
    }

    public void setAge(int age) {
        this.age = age;
    }

    public int getAge() {
        return age;
    }

    abstract void eat();

    void sleep() {
        System.out.println("sleep");
    }
}

class Teacher extends Person {
    public Teacher() {}

    public Teacher(String name, int age) {
        super(name, age);
    }

    void eat() {
        System.out.println("teacher eat cabbage");
    }

    void teach() {
        System.out.println("Teacher teach");
    }
}

class Student extends Person {
    public Student() {}

    public Student(String name, int age) {
        super(name, age);
    }

    void eat() {
        System.out.println("Student eat meat");
    }
    void study() {
        System.out.println("Student study");
    }
}

class SmokeTeacher extends Teacher implements Smoking {
    public SmokeTeacher() {};

    public SmokeTeacher(String name, int age) {
        super(name, age);
    }

    public void smoke() {
        System.out.println("Special teacher smoke");
    }
}

class SmokeStudent extends Student implements Smoking {
    public SmokeStudent() {};

    public SmokeStudent(String name, int age) {
        super(name, age);
    }

    public void smoke() {
        System.out.println("Special student smoke");
    }
}

class InterfaceTest4 {
    public static void main(String[] args) {
        SmokeTeacher st = new SmokeTeacher("Peter", 31);
        st.eat();
        st.sleep();
        st.teach();
        st.smoke();

        SmokeStudent ss = new SmokeStudent("Tom", 21);
        ss.eat();
        ss.sleep();
        ss.study();
        ss.smoke();
    }
}
result：
teacher eat cabbage
sleep
Teacher teach
Special teacher smoke
Student eat meat
sleep
Student study
Special student smoke
----------------------------------
