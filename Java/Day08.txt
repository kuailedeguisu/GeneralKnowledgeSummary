static:
main方法是static，它调用的方法必须是static，所以测试类中的所有方法都需要是static的，这样main才可以调用
在java中，两个类在同一个目录下的两个文件中，其实和两个类在一个文件中相同
虚拟机编译时，会自动编译相关联的其他java文件
------------------------
ArrayTool.java
---------------------
class ArrayTool {
	public void printArray(int[] arr) {
		for (int i = 0; i < arr.length; ++i) {
			if (i == arr.length - 1) {
				System.out.println(arr[i]);
			} else {
				System.out.print(arr[i] + ",");
			}
		}
	}
}
----------------------
ArrayTest.java
---------------------------
class ArrayTest {
	public static void main(String[] args) {
		int[] arr = {10, 20, 30, 40};
		ArrayTool at = new ArrayTool();
		at.printArray(arr);
	}
}
----------------------
result
----------------
C:\develop\code>javac ArrayTest.java

C:\develop\code>java ArrayTest
10,20,30,40

C:\develop\code>
------------------------------
static:
----------------------
class ArrayTool {
	public static void printArray(int[] arr) {
		for (int i = 0; i < arr.length; ++i) {
			if (i == arr.length - 1) {
				System.out.println(arr[i]);
			} else {
				System.out.print(arr[i] + ",");
			}
		}
	}
	
	public static int getMax(int[] arr) {
		int max = arr[0];
		
		for (int i = 1; i < arr.length; ++i) {
			if (arr[i] > max) {
				max = arr[i];
			}
		}
		
		return max;
	}
	
	public static int getIndex(int[] arr, int value) {
		int index = -1;
		for (int i = 0; i < arr.length; ++i) {
			if (value == arr[i]) {
				index = i;
				break;
			}
		}
		
		return index;
	}
}
class ArrayTest {
	public static void main(String[] args) {
		int[] arr = {10, 20, 30, 40};
		ArrayTool.printArray(arr);
		System.out.println("max:"+ArrayTool.getMax(arr));
		System.out.println("Index:"+ArrayTool.getIndex(arr, 30));
	}
}
------------------------------
把构造方法private，外界就不可以创建对象了，并且类中的成员函数都是static的
----------------------
在实际的项目中，我们得到的tool类都是class文件，不是java文件，你无法看到原码---->说明书
/**
*
......
*/
-------------------
/**
* This is an array class
* @author Emma
* @version 1.0
*/
public class ArrayTool {
	/**
	* This method is used to print all the elements of an array
	* @param  arr
	*/
	public static void printArray(int[] arr) {
		for (int i = 0; i < arr.length; ++i) {
			if (i == arr.length - 1) {
				System.out.println(arr[i]);
			} else {
				System.out.print(arr[i] + ",");
			}
		}
	}
	
	/**
	* This method is used to get the max value of an array
	* @param  arr
	* @return int
	*/	
	public static int getMax(int[] arr) {
		int max = arr[0];
		
		for (int i = 1; i < arr.length; ++i) {
			if (arr[i] > max) {
				max = arr[i];
			}
		}
		
		return max;
	}
	/**
	* This method is used to get the index of an array for the special value
	* @param  arr, int value
	* @return int
	*/
	public static int getIndex(int[] arr, int value) {
		int index = -1;
		for (int i = 0; i < arr.length; ++i) {
			if (value == arr[i]) {
				index = i;
				break;
			}
		}
		
		return index;
	}
}
--------------------------------
javadoc -d 目录 -author -version *.java
如果当前目录下没有这个目录，系统会帮忙创建一个新目录
javadoc -d doc -author -version ArrayTool.java

制作帮助文档出错
javadoc: error - No public or protected classes found to document.
我们需要把工具类加public
-------------------------------
打开doc/index.html by browser

----------------------------
帮助文档的使用：
chm格式是帮助文档，例如jdk提供的帮助文档是chm格式的
打开帮助文档-》显示-》索引-》输入检索的关键词
1.先看包（java.lang包下的类不用import，其他包下的需要import）
2.再看例子
3.再看版本
4.再看类的结构（**摘要）
5.学习构造方法
	有构造方法：创建对象
	没有构造方法：成员可能都是静态的
6.看方法：
	看左边：是否静态（static用类名调用），返回值类型（人家返回什么就用什么接收）
	看右边：方法名称，参数列表

------------------------------
ex:
req：请通过程序产生一个随机数，然后通过键盘录入来才是否猜对了，输入直至猜中为止
-------------------------------
code：
import java.util.Scanner;
class MathTest1 {
	public static void main(String[] args) {
		int random1To100 = (int)(Math.random() * 100) + 1;
		System.out.println("random(1-100):"+random1To100);
		
		while (true) {
			Scanner sc = new Scanner(System.in);
			System.out.println("Please enter an integer(1-100):");
			int guested = sc.nextInt();
		
			if (guested == random1To100) {
				System.out.println("Bingo!");
				break;
			} else if (guested > random1To100){
				System.out.println("It is bigger!");
			} else {
				System.out.println("It is smaller!");
			}
		}

	}
}
--------------------------------
result:
C:\develop\code>java MathTest1
random(1-100):27
Please enter an integer(1-100):
20
It is smaller!
Please enter an integer(1-100):
28
It is bigger!
Please enter an integer(1-100):
27
Bingo!
----------------------------------------------------

代码块：
局部代码块：局部位置，用于限制变量的生命周期，及早释放
构造代码块：在类中的成员位置， 用{}括起来的代码，每次调用构造方法执行前，都会先执行构造代码块。
	作用：可以把多个构造方法中的共同代码放在一起，对对象进行初始化
静态代码块：在类中的成员位置，用{}括起来的代码，只不过它用static修饰了。
	作用：一般是对类进行初始化
------------------------------------------------
class Code {
	{
		int x = 10;
		System.out.println(x);
	}
	{
		int y = 20;
		System.out.println(x);
	}
	
	public Code() {}
}
并且执行构造函数时，都会执行构造代码块中的内容，所以提取出来相同的内容在构造代码块中
-------------------------------------------
静态代码块，构造代码块，构造方法的执行顺序？
静态代码块---构造代码块--------构造方法
静态代码块：只执行一下次
构造代码块：每次执行构造方法时都执行
-------------------------
ex:
----------------------
code:
class Student {
	static {
		System.out.println("Student static code block");
	}
	
	{
		System.out.println("Student construct code block");
	}
	
	public Student() {
		System.out.println("Student construct method");
	}
}
class StudentDemo3 {
	static {
		System.out.println("main static code block");
	}
	
	public static void main(String[] args) {
		System.out.println("main");
		
		Student st1 = new Student();
		Student st2 = new Student();
	}
}
--------------------------------
result:
C:\develop\code>java StudentDemo3
main static code block
main
Student static code block
Student construct code block
Student construct method
Student construct code block
Student construct method
---------------------------------
继承：把多个类中相同的内容给提取出来定义到一个类中
格式： class 子类名 extends 父类名 {}
class Base {}
class Derived extends Base {}
好处：
A:提高代码的维护性
B：提高代码的复用性
C:让类与类产生关系，为多态打好基础
弊端：
A：类的耦合性增强（开发原则：低耦合，高内聚；耦合：类和类的关系；内聚：自己完成某件事情的能力）
---------------------------------------------

继承特点：
A：只支持单继承，不支持多继承
	有些语言支持多继承：C++， 格式：extends 类1，类2，...
B:支持多层继承 
	class Sub extends Father {}
	class Father extends GrandFather() {}
	......
-------------------------------------------------------
继承的注意事项：
A：子类只能继承父类所有非私有的成员（成员变量和成员方法）
B：
--------------
ex：
code：
class Son extends Father {
	public void function() {
		//System.out.println(num1);
		System.out.println(num2);
	}
}

class Father {
	private int num1 = 100;
	public int num2 = 200;
	
	private void method() {
		System.out.println(num1);
		System.out.println(num2);
	}
	
	public void show() {
		System.out.println(num1);
		System.out.println(num2);
	}
}

class InheritanceDemo3 {
	public static void main(String[] args) {
		Father f = new Father();
		//f.method();
		f.show();
		
		Son s = new Son();
		//s.method();
		s.show();
		s.function();
	}
}
----------------------------
result:
C:\develop\code>java InheritanceDemo3
100
200
100
200
200
----------------------------------

