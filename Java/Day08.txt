static:
main方法是static，它调用的方法必须是static，所以测试类中的所有方法都需要是static的，这样main才可以调用
在java中，两个类在同一个目录下的两个文件中，其实和两个类在一个文件中相同
虚拟机编译时，会自动编译相关联的其他java文件
------------------------
ArrayTool.java
---------------------
class ArrayTool {
	public void printArray(int[] arr) {
		for (int i = 0; i < arr.length; ++i) {
			if (i == arr.length - 1) {
				System.out.println(arr[i]);
			} else {
				System.out.print(arr[i] + ",");
			}
		}
	}
}
----------------------
ArrayTest.java
---------------------------
class ArrayTest {
	public static void main(String[] args) {
		int[] arr = {10, 20, 30, 40};
		ArrayTool at = new ArrayTool();
		at.printArray(arr);
	}
}
----------------------
result
----------------
C:\develop\code>javac ArrayTest.java

C:\develop\code>java ArrayTest
10,20,30,40

C:\develop\code>
------------------------------
static:
----------------------
class ArrayTool {
	public static void printArray(int[] arr) {
		for (int i = 0; i < arr.length; ++i) {
			if (i == arr.length - 1) {
				System.out.println(arr[i]);
			} else {
				System.out.print(arr[i] + ",");
			}
		}
	}
	
	public static int getMax(int[] arr) {
		int max = arr[0];
		
		for (int i = 1; i < arr.length; ++i) {
			if (arr[i] > max) {
				max = arr[i];
			}
		}
		
		return max;
	}
	
	public static int getIndex(int[] arr, int value) {
		int index = -1;
		for (int i = 0; i < arr.length; ++i) {
			if (value == arr[i]) {
				index = i;
				break;
			}
		}
		
		return index;
	}
}
class ArrayTest {
	public static void main(String[] args) {
		int[] arr = {10, 20, 30, 40};
		ArrayTool.printArray(arr);
		System.out.println("max:"+ArrayTool.getMax(arr));
		System.out.println("Index:"+ArrayTool.getIndex(arr, 30));
	}
}
------------------------------
把构造方法private，外界就不可以创建对象了，并且类中的成员函数都是static的
----------------------
在实际的项目中，我们得到的tool类都是class文件，不是java文件，你无法看到原码---->说明书
/**
*
......
*/
-------------------
/**
* This is an array class
* @author Emma
* @version 1.0
*/
public class ArrayTool {
	/**
	* This method is used to print all the elements of an array
	* @param  arr
	*/
	public static void printArray(int[] arr) {
		for (int i = 0; i < arr.length; ++i) {
			if (i == arr.length - 1) {
				System.out.println(arr[i]);
			} else {
				System.out.print(arr[i] + ",");
			}
		}
	}
	
	/**
	* This method is used to get the max value of an array
	* @param  arr
	* @return int
	*/	
	public static int getMax(int[] arr) {
		int max = arr[0];
		
		for (int i = 1; i < arr.length; ++i) {
			if (arr[i] > max) {
				max = arr[i];
			}
		}
		
		return max;
	}
	/**
	* This method is used to get the index of an array for the special value
	* @param  arr, int value
	* @return int
	*/
	public static int getIndex(int[] arr, int value) {
		int index = -1;
		for (int i = 0; i < arr.length; ++i) {
			if (value == arr[i]) {
				index = i;
				break;
			}
		}
		
		return index;
	}
}
--------------------------------
javadoc -d 目录 -author -version *.java
如果当前目录下没有这个目录，系统会帮忙创建一个新目录
javadoc -d doc -author -version ArrayTool.java

制作帮助文档出错
javadoc: error - No public or protected classes found to document.
我们需要把工具类加public
-------------------------------
打开doc/index.html by browser

----------------------------
帮助文档的使用：
chm格式是帮助文档，例如jdk提供的帮助文档是chm格式的
打开帮助文档-》显示-》索引-》输入检索的关键词
1.先看包（java.lang包下的类不用import，其他包下的需要import）
2.再看例子
3.再看版本
4.再看类的结构（**摘要）
5.学习构造方法
	有构造方法：创建对象
	没有构造方法：成员可能都是静态的
6.看方法：
	看左边：是否静态（static用类名调用），返回值类型（人家返回什么就用什么接收）
	看右边：方法名称，参数列表

------------------------------
ex:
req：请通过程序产生一个随机数，然后通过键盘录入来才是否猜对了，输入直至猜中为止
-------------------------------
code：
import java.util.Scanner;
class MathTest1 {
	public static void main(String[] args) {
		int random1To100 = (int)(Math.random() * 100) + 1;
		System.out.println("random(1-100):"+random1To100);
		
		while (true) {
			Scanner sc = new Scanner(System.in);
			System.out.println("Please enter an integer(1-100):");
			int guested = sc.nextInt();
		
			if (guested == random1To100) {
				System.out.println("Bingo!");
				break;
			} else if (guested > random1To100){
				System.out.println("It is bigger!");
			} else {
				System.out.println("It is smaller!");
			}
		}

	}
}
--------------------------------
result:
C:\develop\code>java MathTest1
random(1-100):27
Please enter an integer(1-100):
20
It is smaller!
Please enter an integer(1-100):
28
It is bigger!
Please enter an integer(1-100):
27
Bingo!
----------------------------------------------------

代码块：
局部代码块：局部位置，用于限制变量的生命周期，及早释放
构造代码块：在类中的成员位置， 用{}括起来的代码，每次调用构造方法执行前，都会先执行构造代码块。
	作用：可以把多个构造方法中的共同代码放在一起，对对象进行初始化
静态代码块：在类中的成员位置，用{}括起来的代码，只不过它用static修饰了。
	作用：一般是对类进行初始化
------------------------------------------------
class Code {
	{
		int x = 10;
		System.out.println(x);
	}
	{
		int y = 20;
		System.out.println(x);
	}
	
	public Code() {}
}
并且执行构造函数时，都会执行构造代码块中的内容，所以提取出来相同的内容在构造代码块中
-------------------------------------------
静态代码块，构造代码块，构造方法的执行顺序？
静态代码块---构造代码块--------构造方法
静态代码块：只执行一下次
构造代码块：每次执行构造方法时都执行
-------------------------
ex:
----------------------
code:
class Student {
	static {
		System.out.println("Student static code block");
	}
	
	{
		System.out.println("Student construct code block");
	}
	
	public Student() {
		System.out.println("Student construct method");
	}
}
class StudentDemo3 {
	static {
		System.out.println("main static code block");
	}
	
	public static void main(String[] args) {
		System.out.println("main");
		
		Student st1 = new Student();
		Student st2 = new Student();
	}
}
--------------------------------
result:
C:\develop\code>java StudentDemo3
main static code block
main
Student static code block
Student construct code block
Student construct method
Student construct code block
Student construct method
---------------------------------
继承：把多个类中相同的内容给提取出来定义到一个类中
格式： class 子类名 extends 父类名 {}
class Base {}
class Derived extends Base {}
好处：
A:提高代码的维护性
B：提高代码的复用性
C:让类与类产生关系，为多态打好基础
弊端：
A：类的耦合性增强（开发原则：低耦合，高内聚；耦合：类和类的关系；内聚：自己完成某件事情的能力）
---------------------------------------------

继承特点：
A：只支持单继承，不支持多继承
	有些语言支持多继承：C++， 格式：extends 类1，类2，...
B:支持多层继承 
	class Sub extends Father {}
	class Father extends GrandFather() {}
	......
-------------------------------------------------------
继承的注意事项：
A：子类只能继承父类所有非私有的成员（成员变量和成员方法）
B：子类不能继承父类的构造方法，但是可以通过super关键字区访问父类构造方法
C：不要为了部分功能使用继承，因为会把基类中有些不需要的内容包入子类
--------------
ex：
code：
class Son extends Father {
	public void function() {
		//System.out.println(num1);
		System.out.println(num2);
	}
}

class Father {
	private int num1 = 100;
	public int num2 = 200;
	
	private void method() {
		System.out.println(num1);
		System.out.println(num2);
	}
	
	public void show() {
		System.out.println(num1);
		System.out.println(num2);
	}
}

class InheritanceDemo3 {
	public static void main(String[] args) {
		Father f = new Father();
		//f.method();
		f.show();
		
		Son s = new Son();
		//s.method();
		s.show();
		s.function();
	}
}
----------------------------
result:
C:\develop\code>java InheritanceDemo3
100
200
100
200
200
----------------------------------
继承体现的是一种关系， “is a”
Person
	Student
	Teacher
Fruit
	Apple
	Banana
采用假设法来判断是否可以用继承，如果有两个类A，B。只要符合A是B的一种或者B是A的一种，就用继承
---------------------------------------------
继承中成员变量的关系：
A：子类中的成员变量和父类中的成员变量名称不一样
B：子类中的成员变量和父类中的成员变量名称一样（就近原则）
	在子类方法中访问一个变量的查找顺序：
		a：在子类方法的局部范围找，有就使用
		b：在子类的成员范围找，有就使用
		c：在父类的成员范围找，有就使用
		d：如果还没找到，就报错
----------------------------------------------------------
code：
class Father {
	public int num = 10;
}

class Son extends Father {
	public int num = 20;
	
	public void show() {
		int num = 30;
		System.out.println(num);
	}
}

class InheritanceDemo4 {
	public static void main(String[] args) {
		Son s = new Son();
		s.show();	
	}
}
---------------------
result：
30
-------------------------
req：如果想访问所有的num，父类的成员变量需要加入static，通过类名来调用
code：
class Father {
	public static int num = 10;
}

class Son extends Father {
	public int num = 20;
	
	public void show() {
		int num = 30;
		System.out.println(num);
		System.out.println(this.num);
		System.out.println(Father.num);
	}
}

class InheritanceDemo4 {
	public static void main(String[] args) {
		Son s = new Son();
		s.show();	
	}
}
-----------------------
result：
30
20
10
-------------------
The above is so complicated, we can introduce super for father class
-------------
code:
class Father {
	public int num = 10;
}

class Son extends Father {
	public int num = 20;
	
	public void show() {
		int num = 30;
		System.out.println(num);
		System.out.println(this.num);
		System.out.println(super.num);
	}
}

class InheritanceDemo4 {
	public static void main(String[] args) {
		Son s = new Son();
		s.show();	
	}
}
--------------------
result:
30
20
10
----------------------------
this和super：
	this代表本类对应的引用
	super代表父类存储空间的标识（可以理解为父类引用，可以操作父类的成员）
用法：
A：调用成员变量
	this.成员变量 调用本类的成员变量
	super.成员变量 调用父类的成员变量
B：调用构造方法
	this(...) 调用本类的构造方法
	super(...) 调用父类的构造方法
C：调用成员方法
	this.成员方法 调用本类的成员方法
	super.成员方法 调用父类的成员方法

------------------------------
构造函数的关系：
子类中所有构造函数会访问父类中的默认构造方法
因为子类会继承父类的数据，可能还会使用父类的数据
所以，子类初始化之前，一定要先完成父类数据的初始化
注意：子类每一个构造方法的第一条语句默认都是：super();

--------------------------------------
code:
class Father {
	public Father() {
		System.out.println("Father non-parameter construct method");
	}
	
	public Father(String name) {
		System.out.println("Father parameter construct method:"+name);
	}
}

class Son extends Father {
	public Son() {
		System.out.println("Son non-parameter construct method");
	}
	
	public Son(String name) {
		System.out.println("Son parameter construct method:"+name);
	}
}

class ConstructTest {
	public static void main(String[] args) {
		Son s = new Son();
		Son sw = new Son("Emma");
	}
}

result:
C:\develop\code>java ConstructTest
Father non-parameter construct method
Son non-parameter construct method
Father non-parameter construct method
Son parameter construct method:Emma
-----------------------------------------------
如果父类没有无参构造方法，那么子类的构造方法会报错。
解决办法：
	A：在父类中加一个无参构造方法。
	B：子类通过super去显示调用父类其他的带参的构造方法
-------------------------------------------
如果父类和子类都有static代码块，构造代码块，构造方法，创建子类对象后的执行顺序：
父类的static代码块-》
子类的static代码块-》
父类的构造代码块-》
父类的构造方法-》
子类的构造代码块-》
子类的构造方法
-------------------------------------
code:
class Fu {
	static {
		System.out.println("Fu static code block");
	}
	
	{
		System.out.println("Fu construct code block");
	}
	
	public Fu() {
		System.out.println("Fu construct method");
	}
	
}

class Zi extends Fu {
	static {
		System.out.println("Zi static code block");
	}
	
	{
		System.out.println("Zi construct code block");
	}
	
	public Zi() {
		System.out.println("Zi construct method");
	}
	
}

class FuZiTest {
	public static void main(String[] args) {
		Zi zi = new Zi();
	}
}

result:
C:\develop\code>java FuZiTest
Fu static code block
Zi static code block
Fu construct code block
Fu construct method
Zi construct code block
Zi construct method
--------------------------------
方法重载能改变返回值类型吗？可以，因为它和返回值类型无关，只是参数列表不同
override：方法重写
overload：方法重载
----------------------------------------------
ex: cat and dog
code:
class Cat extends Animal {
	public Cat() {
		System.out.println("Cat default construct.");
	}
	
	public Cat(String name, int age, String color) {
		super(name, age, color);
		System.out.println("Cat paramer construct.");
	}
	
	public void hide() {
		System.out.println("Cat hide.");
	}
}

class Dog extends Animal {
	public Dog() {
		System.out.println("Dog default construct.");
	}
	
	public Dog(String name, int age, String color) {
		super(name, age, color);
		System.out.println("Dog parameter construct.");
	}
	
	public void watchDoor() {
		System.out.println("Dog watchDoor");
	}
}

class Animal {
	String name;
	int age;
	String color;
	
	public Animal() {
		System.out.println("Animal default construct.");
	}
	
	public Animal(String name, int age, String color) {
		this.name = name;
		this.age = age;
		this.color = color;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setColor(String color) {
		this.color = color;
	}
	
	public String getColor() {
		return color;
	}
	
	public void eat() {
		System.out.println("Animal Eat!");
	}
	
	public void sleep() {
		System.out.println("Animal Sleep!");
	}
	
	public void show() {
		System.out.println(name+"---"+age+"---"+color);
	}
}

class CatDogTest {
	public static void main(String[] args) {
		Dog d1 = new Dog();
		d1.eat();
	    d1.sleep();
		d1.watchDoor();
		d1.show();
		System.out.println("----------");
		
		d1.setName("Boli");
		d1.setAge(2);
		d1.setColor("white");
		d1.show();
		System.out.println("----------");
		
		Dog d2 = new Dog("Poly", 1, "black");
		d2.watchDoor();
		d2.show();
		System.out.println("----------");
		
		Cat c1 = new Cat();
		c1.eat();
		c1.sleep();
		c1.hide();
		c1.show();
		System.out.println("----------");
		
		c1.setName("Lucky");
		c1.setAge(3);
		c1.setColor("flower");
		c1.show();
		System.out.println("----------");
		
		Cat c2 = new Cat("Apple", 4, "yellow");
		c2.hide();
		c2.show();
		System.out.println("----------");
		
		
	}
}
---------------------
result:
C:\develop\code>java CatDogTest
Animal default construct.
Dog default construct.
Animal Eat!
Animal Sleep!
Dog watchDoor
null---0---null
----------
Boli---2---white
----------
Dog parameter construct.
Dog watchDoor
Poly---1---black
----------
Animal default construct.
Cat default construct.
Animal Eat!
Animal Sleep!
Cat hide.
null---0---null
----------
Lucky---3---flower
----------
Cat paramer construct.
Cat hide.
Apple---4---yellow
----------
------------------------------------------------------
由于继承方法中有一个现象，方法重写
所以，父类的功能，就会被子类给覆盖掉
有些时候，我们不想让子类去覆盖掉父类的功能，只能让他使用。
这个时候，针对这种情况，java就提供了一个关键字：final
final：最终的意思，它可以修饰类，方法，变量。

