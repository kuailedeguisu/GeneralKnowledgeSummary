二维数组：
----------------------------------------------------
格式：
1)数据类型[][] 变量名 = new 数据类型[m][n];
m表示这个二维数组有多少个一维数组，n表示每一个一维数组的元素个数
arr[m][n]表示获取第m+1个一维数组的第n+1个元素

2)数据类型[] 数组名[] new 数据类型[m][n];
int[] x, y[];//x一维数组，二维数组
[[

3）数据类型[][] 变量名 = new 数据类型[m][];//列是变化的

4）数据类型[][] 变量名 = new 数据类型[][]{{元素...},{元素...},{元素...},...};
数据类型[][] 变量名 = {{元素...},{元素...},{元素...},...};

--------------------------------------------------------------------
ex:
class Array2Demo1 {
	public static void main(String[] args) {
		int[][] arr ={{1,2,3,3},{4,5,6,6},{7,8,9,9}};

		System.out.println(arr);
		
		for (int i = 0; i < 3; ++i) {
			System.out.println(arr[i]);
		}
		
		for (int i = 0; i < 3; ++i) {
			for (int j = 0; j < 4; ++j) {
				if (j == 3) {
					System.out.println(arr[i][j]);
				} else {
					System.out.print(arr[i][j]+",");
				}
			}
		}
		System.out.println("----------------");
		
		int[][] arr1 = new int[3][4];
		for (int i = 0; i < 3; ++i) {
			for (int j = 0; j < 4; ++j) {
				if (j == 3) {
					System.out.println(arr1[i][j]);
				} else {
					System.out.print(arr1[i][j]+",");
				}
			}
		}
	}
}

result:
C:\develop\code>javac Array2Demo1.java

C:\develop\code>java Array2Demo1
[[I@24d46ca6 //二维数组的地址有[[
[I@4517d9a3  //一维数组的地址有[
[I@372f7a8d
[I@2f92e0f4
1,2,3,3
4,5,6,6
7,8,9,9
----------------
0,0,0,0
0,0,0,0
0,0,0,0
------------------------------------------------------


一维数组是引用，默认值是null

----------------------------------------------------
ex:
class Array2Demo2 {
	public static void main(String[] args) {
		int[][] arr = new int[3][];
		System.out.println(arr);
		for (int i = 0; i < 3; ++i) {
			System.out.println(arr[i]);
		}
		System.out.println("----------------");
		
		arr[0] = new int[4];
		arr[1] = new int[2];
		arr[2] = new int[5];
		System.out.println(arr);
		
		for (int i = 0; i < 3; ++i) {
			System.out.println(arr[i]);
		}
		System.out.println("----------------");
		
		System.out.print(arr[0][0]+" ");
		System.out.print(arr[0][1]+" ");
		System.out.print(arr[0][2]+" ");
		System.out.println(arr[0][3]);
		
		System.out.print(arr[1][0]+" ");
		System.out.println(arr[1][1]);
		
		System.out.print(arr[2][0]+" ");
		System.out.print(arr[2][1]+" ");
		System.out.print(arr[2][2]+" ");
		System.out.print(arr[2][3]+" ");
		System.out.println(arr[2][4]);
		
		System.out.println("----------------");
	}
}
result:
C:\develop\code>javac Array2Demo2.java

C:\develop\code>java Array2Demo2
[[I@24d46ca6
null
null
null
----------------
[[I@24d46ca6
[I@4517d9a3
[I@372f7a8d
[I@2f92e0f4
----------------
0 0 0 0
0 0
0 0 0 0 0
----------------
-----------------------------------------------------------------------------

------------------------------------------------------------------------------
二维数组的第一个必须给，因为不给的话，无法分配内存

-------------------------------------------------------------------------------
二维数组遍历：
arr是一个二维数组名，arr.length是计算二维数组有多少个一维数组，arr[i].length是计算一维数组arr[i]有多少个元素
--------------------------------------------------------
ex:
class Array2Demo4 {
	public static void main(String[] args) {
		int[][] arr = {{1,2,3,4}, {5,6,7,8}, {9,10,11,12}};
		System.out.println(arr);
		for (int i = 0; i < arr.length; ++i) {
			System.out.println(arr[i]);
		}
		
		for(int i = 0; i < arr.length; ++i) {
			for (int j = 0; j < arr[i].length; ++j) {
				if (j == arr[i].length - 1) {
					System.out.println(arr[i][j]);
				} else {
					System.out.print(arr[i][j]+",");
				}
			}
		}
	}
}
result:
C:\develop\code>javac Array2Demo4.java

C:\develop\code>java Array2Demo4
[[I@24d46ca6
[I@4517d9a3
[I@372f7a8d
[I@2f92e0f4
1,2,3,4
5,6,7,8
9,10,11,12
----------------------------------------------------------------
ex:
class Array2Demo4 {
	public static void main(String[] args) {
		int[][] arr = {{1,2,3,4}, {5,6,7}, {9,10}};
		System.out.println(arr);
		for (int i = 0; i < arr.length; ++i) {
			System.out.println(arr[i]);
		}
		
		for(int i = 0; i < arr.length; ++i) {
			for (int j = 0; j < arr[i].length; ++j) {
				if (j == arr[i].length - 1) {
					System.out.println(arr[i][j]);
				} else {
					System.out.print(arr[i][j]+",");
				}
			}
		}
	}
}
result:
C:\develop\code>javac Array2Demo4.java

C:\develop\code>java Array2Demo4
[[I@24d46ca6
[I@4517d9a3
[I@372f7a8d
[I@2f92e0f4
1,2,3,4
5,6,7
9,10
-----------------------------------------------
ex improvement with method:
class Array2Demo4 {
	public static void main(String[] args) {
		int[][] arr = {{1,2,3,4}, {5,6,7,8}, {9,10,11,12}};
		System.out.println(arr);
		for (int i = 0; i < arr.length; ++i) {
			System.out.println(arr[i]);
		}
		
		printArray2(arr);
	}
	
	public static void printArray2(int[][] arr) {
		for(int i = 0; i < arr.length; ++i) {
			for (int j = 0; j < arr[i].length; ++j) {
				if (j == arr[i].length - 1) {
					System.out.println(arr[i][j]);
				} else {
					System.out.print(arr[i][j]+",");
				}
			}
		}
	}
}
---------------------------------------------------
求和：
class Array2Demo5 {
	public static void main(String[] args) {
		int[][] arr = {{77,33,22}, {55,66,88}, {33,44,99}, {77,88,99}};
		System.out.println(sumOfArray2(arr));
	}
	
	public static int sumOfArray2(int[][] arr) {
		int sum = 0;
		for(int i = 0; i < arr.length; ++i) {
			for (int j = 0; j < arr[i].length; ++j) {
				sum += arr[i][j];
			}
		}
		return sum;
	}
}
-------------------------------------------------------
ex:
/*
打印杨辉三角形（行数可以键盘录入）
1
1 1
1 2 1
1 3 3 1
1 4 6 4 1
1 5 10 10 5 1
*/

import java.util.Scanner;
class Array2Demo6 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Please enter the row:");
		int row = sc.nextInt();
		yangHuiSanjiao(row);
	}
	
	public static void yangHuiSanjiao(int row) {
		/*
		1
		1 1
		1 2 1
		1 3 3 1
		1 4 6 4 1
		*/
		if (row <=0) {
			System.out.println("Invalid row");
			return;
		}

		int[][] arr = new int[row][row];
		
		for (int i=0; i<arr.length; ++i) {
			arr[i][0] = 1;
			arr[i][i] = 1;
		}

		for (int i=2; i<arr.length; ++i) {
			for (int j=1; j<=i-1; ++j) {
				arr[i][j] = arr[i-1][j-1] + arr[i-1][j];				
			}
		}

		for (int i=0; i<arr.length; ++i) {
			for (int j=0; j<=i; ++j) {
				System.out.print(arr[i][j]+"\t");
			}
			System.out.println();
		}
	}
}

----------------------------------------------
JAVA中的参数传递问题：
基本类型：形式参数的改变对实际参数没有影响
引用类型：形式参数的改变直接影响实际参数，因为实际参数和形式参数都指向同一块内存空间，例如数组是一种引用类型
------------------------------------------------
ex:
实现一个位数小于等于8的整数的逆序
比如123456变为654321
code:
int num = 123456;
int[] arr = new int[8];
int index = 0;
while (num > 0) {
	arr[index] = num %10;
	index++;
	num /= 10;
}
		
for (int i=0; i<index; ++i) {
	System.out.print(arr[i]);
}
System.out.println();

--------------------------------------------------------
需求：输入一个不多于8位的整数，对其加密后输出
加密规则：
1）先取这个整数的逆序
2）然后各位加5，并把每位的和对10取余
3）将第一位和最后一位交换位置
code：
import java.util.Scanner;
class JiaMiDemo2 {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Please enter an integer(less than 99999999):");
		int num = sc.nextInt();
		System.out.println(getEncodedData(num));
	}
	public static String getEncodedData(int num) {
		int[] arr = new int[8];
		int index = 0;
		while (num > 0) {
			arr[index] = num %10;
			index++;
			num /= 10;
		}
		
		for (int i=0; i<index; ++i) {
			System.out.print(arr[i]);
		}
		System.out.println();

		for ( int i=0; i<index; ++i) {
			arr[i] = (arr[i]+5)%10;
		}
		
		int tmp = arr[0];
		arr[0] = arr[index-1];
		arr[index-1] = tmp;
		
		String s = "";
		
		for ( int i=0; i<index; ++i) {
			s +=arr[i];
		}
		
		return s;
	}
}


------------------------------------------------
类
面向过程的语言：C语言
面向对象的语言： C++， Java

封装：功能类似的方法放在一个类中

面向过程：强调每个功能的步骤
面向对象：强调对象，然后由对象调用方法
-----------------------------------
面向对象和面向过程的例子：
	1.买电脑 
	面向过程：了解电脑->了解需求->了解参数->确定选哪款电脑->去买->讨价还价->付账
	面向对象：我要买电脑->别人帮我买->付钱
	2.洗衣服
	面向过程：换衣服->找盆->放洗衣液和水->泡->搓洗->投衣服->晾衣服
	面向对象：换衣服->放进洗衣机->晾衣服
------------------------------------
万事万物皆对象
把大象放进冰箱

代码区别：
面向过程：main方法内调用各个步骤需要的方法，问题是不同类别的方法放在一起，不太好查找
面向对象：UML，名词提取法
------------------------------------
ex:
需求：
把大象装进冰箱

步骤：
打开冰箱
装入大象
关闭冰箱

面向过程：
class ProcessDemo {
    public static void main(String[] args) {
        open();
        in();
        close();
    }
    public static void open() {
        ......
    }
    public static void in() {
        ......
    }
    public static void close() {
        ......
    }
}

面向对象（名词提取法）：
大象类 进入冰箱
冰箱类 打开 关闭
主类 main方法

class ObjectDemo {
    public static void main(String[] args) {
        Elephant elephant;
        Fridge fridge;
       
        fridge.open();
        elephant.in();
        fridge.close();
    }
}

class Elephant {
    public static void in() {
       
    }
}

class Fridge {
    public static void open() {
       
    }
    public static void close() {
       
    }
}
----------------------------------
面向对象开发：不断创建对象，通过指挥对象做事情
面向对象设计：管理和维护对象和对象之间的关系

面向对象的特征：
封装 (encapsulation)
继承 (inheritance)
多态 (polymorphism)

类：
属性：描述
行为：功能





