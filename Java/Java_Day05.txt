Java中函数叫方法，完成特定功能的代码块

修饰符 返回值类型 方法名（参数类型 参数名1， 参数类型 参数名2, ......）{
  方法体语句；
  return 返回值；
}

修饰符：目前用public static
参数：
  实际参数：实际参与运算的参数
  形式参数：就是方法定义的，用于接收实际参数的。
返回值：由return带给调用者。

main方法是虚拟机来调用的，其他方法，需要调用才可以生效。
class FunctionDemo1 {
/* 	public static int sum(int a, int b) {
		return a + b;
	} */
	public static void main(String[] args) {
		int a = 10;
		int b = 20;
		System.out.println(sum(a, b));
	}
  //sum method location is OK for before main or after main
	public static int sum(int a, int b) {
		return a + b;
	}
}

class FunctionDemo1 {
/* 	public static int sum(int a, int b) {
		return a + b;
	} */
	public static void main(String[] args) {
		int a = 10;
		int b = 20;
		int result = sum(a, b);
		System.out.println(result);
	}
	public static int sum(int a, int b) {
		return a + b;
	}
}

main方法会在调用函数处，匹配被调用函数名，参数类型
方法和方法是平级关系，不能嵌套定义

方法重载：在同一个类中，方法名相同，参数列表不同


数组：
数组定义：
数组可以叫容器，每个数据是容器中的元素，并且数组中的数据类型要一致
数组是可以存储相同类型的多个元素的容器或集合
可以存放基本数据类型或者其他类型

格式：
数据类型[] 数组名；//Java使用第一种
数据类型 数组名[];//第二种逐渐被放弃
int[] a;//定义一个int类型的数组a变量
int a[];//定义一个int类型的a数组变量

数组初始化：
动态初始化： 数据类型[] 数组名 = new 数据类型[数据长度]；//默认值为0
	    int[] a = new int[3];
静态初始化： 初始化时给定元素值，由系统决定数组长度
	    数组类型[] 数组名 = new 数据类型[]{元素1， 元素2， 元素3，......}
	    int[] a = new int[]{1,2,3};
	    简化写法
	    数组类型[] 数组名 = {元素1， 元素2，......}
	    int[] a = {1,2,3};
不能同时动态和静态初始化，比如int[] arr = new int[3]{1,2,3};

数组的输出：
1）直接输出数组名，输出数组首地址
2）通过循环，输出数组中的每个元素
3）index从0开始，到数组的长度-1
数组名[index]

内存分配：
栈 存储局部变量
堆 存储new出来的东西
方法区
本地方法区（和系统相关）
寄存器（给CPU使用）

局部变量：在方法定义中或在方法声明上的变量都叫局部变量

堆内存的特点：
A：每一个new出来的东西都有地址值
B：每个变量都有默认值 byte, short, int, long 0;float double 0.0; char '\u0000';boolean false;引用类型 null
C：使用完成后就变成了垃圾，但是并没有立即回收，会在垃圾回收器空闲的时候回收，java不用程序员释放

栈内存的特点：
数据用完就释放掉。

重点：会画栈和堆的图


栈内存的两个引用指向同一个堆内存，无论是对它们中谁的操作，都是对该堆内存的操作。


数组问题：
A：java.lang.ArrayIndexOutOfBoundsExeption,原因：访问了不存在的索引
B：java.lang.NullPointerExeption，原因：数组已经不再指向堆内存了，而你还用数组名去访问元素

求数组的长度：
数组名.length
// print all elements in an array
	public static void printArray(int[] array) {
		for (int i = 0; i < array.length; ++i) {
			if (i == array.length - 1) {
				System.out.print(array[i]);
			} else {
				System.out.print(array[i] + ",");
			}
			
		}
		System.out.println();
	}
//compute the max value in an array	
	public static int max(int[] arr) {
		int result = arr[0];
		for (int i = 0; i < arr.length; ++i) {
			if (arr[i] > result) {
				result = arr[i];
			}
		}
		return result;
	}
