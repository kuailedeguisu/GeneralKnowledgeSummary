-128:10000000, 1既是符号位又是数值位
+128:10000000

byte b1 = 128;//-128
byte b2 = 129;//-127
byte b3 = 130;/-126
byte:-128-127

byte,short,char---int----long---float----double
long: 8 byte
float:4 byte
他们在内存中存储的方式不同
float表示的数据范围比long范围大

JAVA语言中的char可以存储一个中文汉字吗？为什么？
可以，因为java中char占用2个字节；java语言采用Unicode编码

int x = 3;
int y = 4;
System.out.println(x*1.0/y);//0.75
System.out.println("x:"+x);//x:3

可以加（）改变优先级

+的用法：
  加法 3+4
  正号 +4
  字符串连接符 “x:”+x
 
扩展的赋值运算符：隐含着强制类型转换


逻辑运算符：
逻辑与 & ：有false即为false
逻辑或 | ：有true即为true
逻辑异或 ^：相同为false，不同为true；false^false=false, true^true = false, false^true=true, true^false=true
!： !false=true,偶数个！不改变
&&：
||：
单&和&&的区别：
  A：最终结果相同
  B：单&第一个表达式为false,还会计算第二个表达式；&&具有短路效果，第一个表达式为false，不会计算第二个表达式
  C：单|和||同理
  D:开发中常用&&，||，！
  class OperatorDemo4 {
	public static void main(String[] args) {
		int x = 3;
		int y = 4;
		//boolean b1 = (x++ == 3 & y++ == 4);//4,5,true
		//boolean b1 = (x++ == 3 && y++ == 4);//4,5,true
		//boolean b1 = (++x == 3 & ++y == 4);//4,5,false
		boolean b1 = (++x == 3 && ++y == 4);//4,4,false
		System.out.println("x:"+x);
		System.out.println("y:"+y);
		System.out.println("b1:"+b1);
	}
}

位运算：
计算机程序最终都会转化为位运算
要进行位运算，需要把数据转化为二进制的补码形式
&位与运算：有0则0
|位或运算：有1则1
^位异或运算: 相同位0，不同为1
~位按位取反运算: 0变1， 1变0
<<位左移运算: 2的左移数字次幂
>>位右移运算: 2的
>>>位无符号右移运算:无符号右移
class OperatorDemo5 {
	public static void main(String[] args) {
		int a = 10;//00000000 00000000 00000000 00001010
		int b = 20;//00000000 00000000 00000000 00010100
		System.out.println(a & b);  //00000000 00000000 00000000 00000000-0
		System.out.println(a | b);  //00000000 00000000 00000000 00011110-30
		System.out.println(a ^ b);  //00000000 00000000 00000000 00011110-30
		System.out.println( ~a );   //11111111 11111111 11111111 11110101//²¹Âë
		                            //11111111 11111111 11111111 11110100//·´Âë
									//10000000 00000000 00000000 00001011//-11
		System.out.println(a << 2); //00000000 00000000 00000000 00101000-40
		System.out.println(a >> 3); //00000000 00000000 00000000 00000001-1
	}
}

