成员变量和局部变量：
  A：在类中的位置不同
    成员变量：在类中方法外
    局部变量：在方法定义中或者方法声明中
  B：在内存中的位置不同
    成员变量：在堆内存
    局部变量：在栈内存
  C:生命周期不同
    成员变量：随着对象的创建而存在，随着对象的消失而消失
    局部变量：随着方法的调用而存在，随着方法的调用完毕而消失
  D：初始化值不同
    成员变量：由默认初始化值
    局部变量：没有默认初始化值，丙戌定义，赋值，然后才能使用
  注意事项：局部变量和成员变量名称一样，在方法中使用时，采用的时就近原则

形式参数的问题：
  基本类型：形式参数的改变不会影响实际参数
  引用类型：形式参数的改变直接影响实际参数
  
引用类型有：类和数组

方法的形式参数是一个类，其实是类的对象

 匿名对象：没有名字的对象
 调用方法，仅仅调用一次的时候
 调用多次的时候不适用
 好处是：匿名对象调用完毕后就是垃圾，可以被垃圾回收器回收
 匿名对象可以作为实际参数传递
 
 ex:
 code:
 -----------------------------------
 class Student {
	String name;
	public void show() {
		System.out.println("I love to study!");
	}
	public void change(String inName) {
		System.out.println("Before change:"+name);
		name = inName;
		System.out.println("Before change:"+name);
	}
}

class StudentDemo {
	public void method(Student s) {
		s.show();
		s.change("Emma");
	}
}
class Anonymity {
	public static void main(String[] args) {
		Student s = new Student();
		s.name = "Bob";
		StudentDemo sd = new StudentDemo();
		sd.method(s);
		System.out.println("----------------");
		
		new Student().show();
		new Student().name = "Tom";
		new Student().change("Poly");
		System.out.println("----------------");
		
		StudentDemo sd1 = new StudentDemo();
		sd1.method(new Student());
		System.out.println("----------------");
    
    new StudentDemo().method(new Student());
    System.out.println("-----------------");
	}
}
------------------------------
result:
C:\develop\code>java Anonymity
I love to study!
Before change:Bob
Before change:Emma
----------------
I love to study!
Before change:null
Before change:Poly
----------------
I love to study!
Before change:null
Before change:Emma
----------------
I love to study!
Before change:null
Before change:Emma
-----------------

对对象去给成员变量赋值，可以赋值一些非法的数据，这是不合理的，在赋值之气那，需要先对数据进行判断
判断到底在哪里做比较合适呢？
StudentDemo1类是一个测试类，测试类只创建对象，调用方法，应该在Student类中
而我们在成员变量的位置不可以做数据校验，必须依靠一些逻辑语句

private: 私有的，可以修饰成员变量和成员方法，并且只能在本类内使用
封装的思想:private,不让类外访问
封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式
-------------------------------------------------------------------
code
------------------------------------------------------------
 class Student {
	String name;
	int age;
	
	public void show() {
		System.out.println("name:"+name);
		System.out.println("age:"+age);
	}
}

class StudentDemo1 {
	public static void main(String[] args) {
		Student s = new Student();
		s.show();
		System.out.println("--------------");
		s.name = "Emma";
		s.age = -28;
		s.show();
	}
}
--------------------------------------------------------------
result:
C:\develop\code>java StudentDemo1
name:null
age:0
--------------
name:Emma
age:-28

----------------------------------------------------------


private：可以修饰成员（成员变量和成员方法），只能在本类中使用，但是可以通过public方法类访问类中的private成员


封装和private的应用：
A:把成员变量用private修饰
B：提高对象的getXxx()和setXxx（）方法
-----------------------------------------
code：
class Student {
	private String name;
	private int age;
	
	public void setName(String inName) {
		name = inName;
	}
	
	public void setAge(int inAge) {
		age = inAge;
	}
	
	public String getName() {
		return name;
	}
	
	public int getAge() {
		return age;
	}
}

class StudentDemo2 {
	public static void main(String[] args) {
		Student s = new Student();
		s.setName("Emma");
		System.out.println(s.getName());
		s.setAge(19);
		System.out.println(s.getAge());
	}
}
----------------------------------------------------------------------
result：
C:\develop\code>java StudentDemo2
Emma
19
-------------------------------------------------------------------------
数据校验在标准代码中不用做，因为有地方会做这个

 起名字要做到见名知意
 ------------------------------------------------
 java中有问题：因为就近原则，都用的是形式参数中的name
 public void setName(String name) {
	name = name;
}
-------------------------------------
class Student {
	private String name;
	private int age;
	
	public void setName(String name) {
		name = name;
	}
	
	public void setAge(int age) {
		age = age;
	}
	
	public String getName() {
		return name;
	}
	
	public int getAge() {
		return age;
	}
}

class StudentDemo2 {
	public static void main(String[] args) {
		Student s = new Student();
		s.setName("Emma");
		System.out.println(s.getName());
		s.setAge(19);
		System.out.println(s.getAge());
	}
}

retult:
C:\develop\code>java StudentDemo2
null
0

形式参数中的值，没有改变成员变量的值
需要修正
----------------------------------------
class Student {
	private String name;
	private int age;
	
	public void setName(String name) {
		this.name = name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public String getName() {
		return name;
	}
	
	public int getAge() {
		return age;
	}
}

class StudentDemo2 {
	public static void main(String[] args) {
		Student s = new Student();
		s.setName("Emma");
		System.out.println(s.getName());
		s.setAge(19);
		System.out.println(s.getAge());
	}
}

result:
C:\develop\code>java StudentDemo2
Emma
19
------------------------------------------------
this:当前类的对象引用
注意：谁调用这个方法，this就代表哪个对象
this场景：解决局部变量隐藏成员变量

------------------------------
构造方法：给对象的数据进行初始化
constructor
deconstructor
格式: 
	方法名和类名相同，没有返回值类型，连void都没有，没有具体的返回值
特点：
	当没有定义构造函数时，会有一个default构造函数（无参），会把成员变量初始化为不同数据类型对应的默认值；
	当定义构造函数时，default构造函数会失效，只能构造定义的构造函数的对象；
	如果想既保留default构造函数，也保留自定义的构造函数，
	我们需要同时定义default构造函数和自定义构造函数（构造函数的重载问题）

给成员变量赋值的两种方式：
	1.setXxx()
	2.构造方法
--------------------------------------
ex:
class Student {
	private String name;
	private int age;
	private String address;
	
	public Student() {
	}
	
	public Student(String name, int age, String address) {
		this.name = name;
		this.age = age;
		this.address = address;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setAddress(String address) {
		this.address = address;
	}
	
	public String getAddress() {
		return address;
	}
}

class ConstructDemo {
	public static void main(String[] args) {
		Student s = new Student();
		System.out.println(s.getName()+"----"+s.getAge()+"-----"+s.getAddress());
		System.out.println("---------------");
		s.setName("Bob");
		s.setAge(29);
		s.setAddress("Big Road");
		System.out.println(s.getName()+"----"+s.getAge()+"-----"+s.getAddress());
		System.out.println("---------------");
		
		Student sc = new Student("Emma", 20, "Avenue Road");
		System.out.println(sc.getName()+"----"+sc.getAge()+"-----"+sc.getAddress());
		System.out.println("---------------");
		sc.setName("Tom");
		sc.setAge(30);
		sc.setAddress("Tower Road");
		System.out.println(sc.getName()+"----"+sc.getAge()+"-----"+sc.getAddress());
		System.out.println("---------------");
	}
}
--------------------------------
result:
C:\develop\code>java ConstructDemo
null----0-----null
---------------
Bob----29-----Big Road
---------------
Emma----20-----Avenue Road
---------------
Tom----30-----Tower Road
---------------

-----------------------------------------
类的组成：
	成员变量 private
	成员方法 返回值是void或者非void；空参方法或者非空参方法
	构造方法 无返回值

-----------------------------------
ex:
class Phone {
	private String brand;
	private int price;
	private String color;
	
	public Phone() {}
	
	public Phone(String brand, int price, String color) {
		this.brand = brand;
		this.price = price;
		this.color = color;
	}

	public void setBrand(String brand) {
		this.brand = brand;
	}
	
	public void setPrice(int price) {
		this.price = price;
	}
	
	public void setColor(String color) {
		this.color = color;
	}
	
	public String getBrand() {
		return brand;
	}
	
	public int getPrice() {
		return price;
	}
	public String getColor() {
		return color;
	}
}

class PhoneDemo {
	public static void main(String[] args) {
		Phone phone = new Phone();
		System.out.println("Brand:"+phone.getBrand()+"\n"+"Price:"+phone.getPrice()+"\n"+"Color:"+phone.getColor());
		System.out.println("-------------------");
		phone.setBrand("Apple");
		phone.setPrice(8000);
		phone.setColor("Black");
		System.out.println("Brand:"+phone.getBrand()+"\n"+"Price:"+phone.getPrice()+"\n"+"Color:"+phone.getColor());
		System.out.println("-------------------");
		Phone p = new Phone("Samsung", 2000, "White");
		System.out.println("Brand:"+p.getBrand()+"\n"+"Price:"+p.getPrice()+"\n"+"Color:"+p.getColor());
		System.out.println("-------------------");
		p.setBrand("Huawei");
		p.setPrice(3000);
		p.setColor("Black");
		System.out.println("Brand:"+p.getBrand()+"\n"+"Price:"+p.getPrice()+"\n"+"Color:"+p.getColor());
	}
}
-------------------
result:
C:\develop\code>java PhoneDemo
Brand:null
Price:0
Color:null
-------------------
Brand:Apple
Price:8000
Color:Black
-------------------
Brand:Samsung
Price:2000
Color:White
-------------------
Brand:Huawei
Price:3000
Color:Black
--------------------------------------------------
方法区：放class内容， Student.class, StudentDemo.class
栈：加载main方法，类的成员方法，每一个方法中会放局部变量，这个局部变量指向堆内存中的对象
堆：放new出来的变量或者类的对象，并且对于类的对象，其成员变量和this放在该类的对象所在的堆内存中
----------------------------------
Student s = new Student();
	A.把Student.class文件加载到内存中
	B.在栈内存中给变量s开辟一个空间
	C.在堆内存中为Student对象申请一个空间
	D.给成员变量进行默认初始化
	E.给成员变量进行显示初始化
-------------------------------------------------------------

注意所有import必须在所有的class之前
-----------------------------
import java.util.Scanner;
class Employee {
	private int id;
	private String name;
	private int age;
	private String title;
	
	public void setId(int id) {
		this.id = id;
	}
	
	public int getId() {
		return id;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setTitle(String title) {
		this.title = title;
	}
	
	public String getTitle() {
		return title;
	}
}

class EmployeeTest {
	public static void main(String[] args) {
		Employee em = new Employee();
		System.out.println(em.getId()+","+em.getName()+","+em.getAge()+","+em.getTitle());
		System.out.println("-----------");
		
		Scanner sc = new Scanner(System.in);
		System.out.println("Please enter id:");
		int id = sc.nextInt();
		System.out.println("Please enter name:");
		String name = sc.next();
		System.out.println("Please enter age:");
		int age = sc.nextInt();
		System.out.println("Please enter title:");
		String title = sc.next();
		
		em.setId(id);
		em.setName(name);
		em.setAge(age);
		em.setTitle(title);
		System.out.println(em.getId()+","+em.getName()+","+em.getAge()+","+em.getTitle());
	}
}
-------------------------------------------
针对多个对象有相同的成员变量值（在每个对象的堆内存中都会给这个成员变量分配相同的内存空间），java中引入了static关键字
在一个对象中对static成员变量赋值a，在其他对象中，如果没有对它赋值，其他对象也会有和上一个对象中的static成员变量一样的值a
static成员变量被所有对象共享的，修改一个对象的，其他对象也会变化

static特点:
A:随着类的加载而加载
B:优先于对象存在
C：被所有对象共享（ex:饮水机（static），水杯（非static））
D：可以通过类名调用，也可以通过对象调用，但是推荐用类名调用，因为static成员变量是与类相关的类成员
-------------------------------
code:
class Person {
	private String name;
	private int age;
	private static String country;
	
	public Person() {}
	
	public Person(String name) {
		this.name = name;
	}
	
	public Person(String name, int age) {
		this.age = age;
		this.name = name;
	}
	
	public Person(String name, int age, String country) {
		this.name = name;
		this.age = age;
		this.country = country;
	}
	
	public void show() {
		System.out.println("Name:"+name);
		System.out.println("Age:"+age);
		System.out.println("Country:"+country);
	}
}

class PersonStaticTest {
	public static void main(String[] args) {
		Person p1 = new Person();
		p1.show();
		
		Person p2 = new Person("Emma", 20, "China");
		p2.show();
		
		Person p3 = new Person("Lily", 30);
		p3.show();
		
		Person p4 = new Person("Tom", 40);
		p4.show();		
	}
}
----------------------
result:
C:\develop\code>java PersonStaticTest
Name:null
Age:0
Country:null
Name:Emma
Age:20
Country:China
Name:Lily
Age:30
Country:China
Name:Tom
Age:40
Country:China
---------------------------------
static内存图：

1.方法区（包含class内容区域和静态区）：
class内容区域：
PersonDemo.class
非static成员变量
非static成员方法
Person.class
非static成员变量
非static成员方法

静态区：
PersonDemo
main(String[] args)
Person
country=null 0x01

Person方法区：0x02
构造方法
非static成员方法

2.栈区：
main[String[] args]从静态区进栈区
Person p1 0x0001

3.堆区
new Person
0x0001
this
name: null
age:0
静态标记：0x01
方法标记：0x02
.......
---------------------------------------------------------------------
static注意事项：
A：在静态方法中是没有this关键字的
静态是随着类的加载而加载，this是对着对象的创建而存在；静态比对象先存在
B：静态方法只能访问静态的成员变量和静态的成员方法
静态成员方法：只能访问静态成员变量和静态成员方法
非静态成员方法：可以访问静态成员变量和静态成员方法
