成员变量和局部变量：
  A：在类中的位置不同
    成员变量：在类中方法外
    局部变量：在方法定义中或者方法声明中
  B：在内存中的位置不同
    成员变量：在堆内存
    局部变量：在栈内存
  C:生命周期不同
    成员变量：随着对象的创建而存在，随着对象的消失而消失
    局部变量：随着方法的调用而存在，随着方法的调用完毕而消失
  D：初始化值不同
    成员变量：由默认初始化值
    局部变量：没有默认初始化值，丙戌定义，赋值，然后才能使用
  注意事项：局部变量和成员变量名称一样，在方法中使用时，采用的时就近原则

形式参数的问题：
  基本类型：形式参数的改变不会影响实际参数
  引用类型：形式参数的改变直接影响实际参数
  
引用类型有：类和数组

方法的形式参数是一个类，其实是类的对象

 匿名对象：没有名字的对象
 调用方法，仅仅调用一次的时候
 调用多次的时候不适用
 好处是：匿名对象调用完毕后就是垃圾，可以被垃圾回收器回收
 匿名对象可以作为实际参数传递
 
 ex:
 code:
 -----------------------------------
 class Student {
	String name;
	public void show() {
		System.out.println("I love to study!");
	}
	public void change(String inName) {
		System.out.println("Before change:"+name);
		name = inName;
		System.out.println("Before change:"+name);
	}
}

class StudentDemo {
	public void method(Student s) {
		s.show();
		s.change("Emma");
	}
}
class Anonymity {
	public static void main(String[] args) {
		Student s = new Student();
		s.name = "Bob";
		StudentDemo sd = new StudentDemo();
		sd.method(s);
		System.out.println("----------------");
		
		new Student().show();
		new Student().name = "Tom";
		new Student().change("Poly");
		System.out.println("----------------");
		
		StudentDemo sd1 = new StudentDemo();
		sd1.method(new Student());
		System.out.println("----------------");
    
    new StudentDemo().method(new Student());
    System.out.println("-----------------");
	}
}
------------------------------
result:
C:\develop\code>java Anonymity
I love to study!
Before change:Bob
Before change:Emma
----------------
I love to study!
Before change:null
Before change:Poly
----------------
I love to study!
Before change:null
Before change:Emma
----------------
I love to study!
Before change:null
Before change:Emma
-----------------

对对象去给成员变量赋值，可以赋值一些非法的数据，这是不合理的，在赋值之气那，需要先对数据进行判断
判断到底在哪里做比较合适呢？
StudentDemo1类是一个测试类，测试类只创建对象，调用方法，应该在Student类中
而我们在成员变量的位置不可以做数据校验，必须依靠一些逻辑语句

private: 私有的，可以修饰成员变量和成员方法，并且只能在本类内使用
封装的思想:private,不让类外访问
封装：隐藏对象的属性和实现细节，仅对外提供公共访问方式
-------------------------------------------------------------------
code
------------------------------------------------------------
 class Student {
	String name;
	int age;
	
	public void show() {
		System.out.println("name:"+name);
		System.out.println("age:"+age);
	}
}

class StudentDemo1 {
	public static void main(String[] args) {
		Student s = new Student();
		s.show();
		System.out.println("--------------");
		s.name = "Emma";
		s.age = -28;
		s.show();
	}
}
--------------------------------------------------------------
result:
C:\develop\code>java StudentDemo1
name:null
age:0
--------------
name:Emma
age:-28

----------------------------------------------------------


private：可以修饰成员（成员变量和成员方法），只能在本类中使用，但是可以通过public方法类访问类中的private成员


封装和private的应用：
A:把成员变量用private修饰
B：提高对象的getXxx()和setXxx（）方法
-----------------------------------------
code：
class Student {
	private String name;
	private int age;
	
	public void setName(String inName) {
		name = inName;
	}
	
	public void setAge(int inAge) {
		age = inAge;
	}
	
	public String getName() {
		return name;
	}
	
	public int getAge() {
		return age;
	}
}

class StudentDemo2 {
	public static void main(String[] args) {
		Student s = new Student();
		s.setName("Emma");
		System.out.println(s.getName());
		s.setAge(19);
		System.out.println(s.getAge());
	}
}
----------------------------------------------------------------------
result：
C:\develop\code>java StudentDemo2
Emma
19
-------------------------------------------------------------------------
数据校验在标准代码中不用做，因为有地方会做这个

 起名字要做到见名知意
 ------------------------------------------------
 java中有问题：因为就近原则，都用的是形式参数中的name
 public void setName(String name) {
	name = name;
}
-------------------------------------
class Student {
	private String name;
	private int age;
	
	public void setName(String name) {
		name = name;
	}
	
	public void setAge(int age) {
		age = age;
	}
	
	public String getName() {
		return name;
	}
	
	public int getAge() {
		return age;
	}
}

class StudentDemo2 {
	public static void main(String[] args) {
		Student s = new Student();
		s.setName("Emma");
		System.out.println(s.getName());
		s.setAge(19);
		System.out.println(s.getAge());
	}
}

retult:
C:\develop\code>java StudentDemo2
null
0

形式参数中的值，没有改变成员变量的值
需要修正
----------------------------------------
class Student {
	private String name;
	private int age;
	
	public void setName(String name) {
		this.name = name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public String getName() {
		return name;
	}
	
	public int getAge() {
		return age;
	}
}

class StudentDemo2 {
	public static void main(String[] args) {
		Student s = new Student();
		s.setName("Emma");
		System.out.println(s.getName());
		s.setAge(19);
		System.out.println(s.getAge());
	}
}

result:
C:\develop\code>java StudentDemo2
Emma
19
------------------------------------------------
this:当前类的对象引用
注意：谁调用这个方法，this就代表哪个对象
this场景：解决局部变量隐藏成员变量

------------------------------
构造方法：给对象的数据进行初始化
constructor
deconstructor
格式: 
	方法名和类名相同，没有返回值类型，连void都没有，没有具体的返回值
特点：
	当没有定义构造函数时，会有一个default构造函数，会把成员变量初始化为不同数据类型对应的默认值；
	当定义构造函数时，default构造函数会失效，只能构造定义的构造函数的对象；
	如果想既保留default构造函数，也保留自定义的构造函数，
	我们需要同时定义default构造函数和自定义构造函数
--------------------------------------
ex:
class Student {
	private String name;
	private int age;
	private String address;
	
	public Student() {
		name = null;
		age = 0;
		address = null;
	}
	
	public Student(String name, int age, String address) {
		this.name = name;
		this.age = age;
		this.address = address;
	}
	
	public void setName(String name) {
		this.name = name;
	}
	
	public String getName() {
		return name;
	}
	
	public void setAge(int age) {
		this.age = age;
	}
	
	public int getAge() {
		return age;
	}
	
	public void setAddress(String address) {
		this.address = address;
	}
	
	public String getAddress() {
		return address;
	}
}

class ConstructDemo {
	public static void main(String[] args) {
		Student s = new Student();
		System.out.println(s.getName()+"----"+s.getAge()+"-----"+s.getAddress());
		System.out.println("---------------");
		s.setName("Bob");
		s.setAge(29);
		s.setAddress("Big Road");
		System.out.println(s.getName()+"----"+s.getAge()+"-----"+s.getAddress());
		System.out.println("---------------");
		
		Student sc = new Student("Emma", 20, "Avenue Road");
		System.out.println(sc.getName()+"----"+sc.getAge()+"-----"+sc.getAddress());
		System.out.println("---------------");
		sc.setName("Tom");
		sc.setAge(30);
		sc.setAddress("Tower Road");
		System.out.println(sc.getName()+"----"+sc.getAge()+"-----"+sc.getAddress());
		System.out.println("---------------");
	}
}
--------------------------------
result:
C:\develop\code>java ConstructDemo
null----0-----null
---------------
Bob----29-----Big Road
---------------
Emma----20-----Avenue Road
---------------
Tom----30-----Tower Road
---------------


-----------------------------------------
