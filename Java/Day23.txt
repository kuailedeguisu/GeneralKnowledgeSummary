single thread: program only has one executing path
multi-thread: program  has multiple executing paths

process: task manager, process is running program, 
		process is the independent unit of system allocating resource and dispaching,
		each process has its own memory space and system resource
muptiple processes:
	single process computer only can do one thing during the same period, 
	but now most computers support multiple processes(do multiple things during the same period)
	improve CPU efficiency(single CPU only can do one thing at the same time point, but do the program transfer efficiently)
	
	
thread:
	it can run multiple tasks in one process, each task is a thread
	thread is program executing unit, executing path, is the basic unit program uses CPU
	single thread: single path
	multi-thread: multiple paths
	
multi-thread:
	Increase the use of programs
	Grab CPU resources, grab CPU execution
	If one process has more threads, it has more chances to grab CPU resources;
	but thread executing is random.

 Concurrent: Logically simultaneous, refers to running multiple programs at the same time for the same time period
 Parallel:   A matter of reason to occur at the same time, refers to running multiple programs at the same point in time 
 
run java command->
	start JVM->
		start one process-> 
			start main thread->
				call main method of special Class
Q: JVM is started by single thread or multi-thread?
	multi-thread, because of garage collection not having memory overflow issues
	
thread is based on process, how to create one process?
process is created by system, and we need call system functions to create one process
java can't call system functions, but java can call C/C++ program to implement multi-thread programs
So call system functions by C/C++, java call C/C++
java class: Thread

1-java call C/C++ method
2-C/C++ method call system functions to start one process
************************************************************************
Thread
	Module java.base
	Package java.lang
	Class Thread

		java.lang.Object
			java.lang.Thread 

	A thread is a thread of execution in a program. The Java Virtual Machine allows an application 
	to have multiple threads of execution running concurrently. 	
*****************************************************************
 There are two ways to create a new thread of execution. One is to declare a class to 
 be a subclass of Thread. This subclass should override the run method of class Thread.
 An instance of the subclass can then be allocated and started. For example, 
 a thread that computes primes larger than a stated value could be written as follows:

         class PrimeThread extends Thread {
             long minPrime;
             PrimeThread(long minPrime) {
                 this.minPrime = minPrime;
             }

             public void run() {
                 // compute primes larger than minPrime
                  . . .
             }
         }
     

The following code would then create a thread and start it running:

         PrimeThread p = new PrimeThread(143);
         p.start();
     

The other way to create a thread is to declare a class that implements the Runnable interface. 
That class then implements the run method. An instance of the class can then be allocated, 
passed as an argument when creating Thread, and started. The same example in this other style 
looks like the following:

         class PrimeRun implements Runnable {
             long minPrime;
             PrimeRun(long minPrime) {
                 this.minPrime = minPrime;
             }

             public void run() {
                 // compute primes larger than minPrime
                  . . .
             }
         }
     

The following code would then create a thread and start it running:

         PrimeRun p = new PrimeRun(143);
         new Thread(p).start();
************************************************************************************     
Not all programs should be executed by Thread, so we only rewrite run() to make it executed by Thread
Generally, code executed by Thread need more time to be run, for example, loop
run() and start()
	run():   wrap code executed by process, callint it directly is common method
	start(): start process, JVM calls run()
	
*************************************************************************************************
package cn.itcast_01;

public class MyThreadTest {

	public static void main(String[] args) throws IllegalThreadStateException {
//		MyThread mThread = new MyThread();
//		mThread.start();
//		// IllegalThreadStateException
//		// one thread is called twice instead of  two MyThread
//		mThread.start();

		MyThread myThread1 = new MyThread();
		MyThread myThread2 = new MyThread();
		myThread1.start();
		myThread2.start();

	}

}

result:			
0
1
2
3
4
5
6
0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
***************************************************************************
Thread
	public final String getName() // Returns this thread's name.
******************************************************
package cn.itcast_02;

public class MyThread extends Thread {

	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i);
		}
	}
}

package cn.itcast_02;

public class MyThreadTest {

	public static void main(String[] args) {
		MyThread mt1 = new MyThread();
		MyThread mt2 = new MyThread();
		mt1.start();
		mt2.start();
	}
}

result:
Thread-1:0
Thread-0:0
Thread-0:1
Thread-1:1
Thread-1:2
Thread-0:2
Thread-1:3
Thread-0:3
Thread-1:4
Thread-0:4
Thread-0:5
Thread-1:5
Thread-0:6
Thread-0:7
Thread-1:6
Thread-0:8
Thread-1:7
Thread-0:9
Thread-1:8
Thread-0:10
Thread-1:9
Thread-1:10
Thread-1:11
Thread-0:11
Thread-1:12
Thread-0:12
Thread-1:13
Thread-0:13
Thread-0:14
Thread-1:14
Thread-0:15
Thread-1:15
Thread-0:16
Thread-1:16
Thread-0:17
Thread-1:17
Thread-0:18
Thread-1:18
Thread-0:19
Thread-1:19
Thread-0:20
Thread-1:20
Thread-0:21
Thread-1:21
Thread-0:22
Thread-1:22
Thread-1:23
Thread-1:24
Thread-0:23
Thread-1:25
Thread-1:26
Thread-1:27
Thread-0:24
Thread-1:28
Thread-0:25
Thread-1:29
Thread-1:30
Thread-1:31
Thread-1:32
Thread-1:33
Thread-1:34
Thread-0:26
Thread-1:35
Thread-0:27
Thread-1:36
Thread-0:28
Thread-1:37
Thread-0:29
Thread-1:38
Thread-0:30
Thread-1:39
Thread-0:31
Thread-1:40
Thread-0:32
Thread-1:41
Thread-1:42
Thread-0:33
Thread-1:43
Thread-1:44
Thread-0:34
Thread-1:45
Thread-0:35
Thread-1:46
Thread-1:47
Thread-1:48
Thread-1:49
Thread-0:36
Thread-1:50
Thread-0:37
Thread-1:51
Thread-0:38
Thread-1:52
Thread-0:39
Thread-1:53
Thread-0:40
Thread-1:54
Thread-0:41
Thread-1:55
Thread-0:42
Thread-1:56
Thread-0:43
Thread-1:57
Thread-0:44
Thread-1:58
Thread-1:59
Thread-0:45
Thread-1:60
Thread-1:61
Thread-0:46
Thread-1:62
Thread-0:47
Thread-1:63
Thread-0:48
Thread-1:64
Thread-0:49
Thread-1:65
Thread-1:66
Thread-0:50
Thread-1:67
Thread-0:51
Thread-1:68
Thread-0:52
Thread-1:69
Thread-1:70
Thread-1:71
Thread-1:72
Thread-0:53
Thread-1:73
Thread-1:74
Thread-0:54
Thread-1:75
Thread-1:76
Thread-1:77
Thread-1:78
Thread-1:79
Thread-1:80
Thread-1:81
Thread-1:82
Thread-1:83
Thread-0:55
Thread-1:84
Thread-0:56
Thread-1:85
Thread-1:86
Thread-1:87
Thread-1:88
Thread-1:89
Thread-1:90
Thread-1:91
Thread-1:92
Thread-0:57
Thread-1:93
Thread-0:58
Thread-1:94
Thread-0:59
Thread-1:95
Thread-1:96
Thread-1:97
Thread-0:60
Thread-1:98
Thread-0:61
Thread-1:99
Thread-0:62
Thread-0:63
Thread-0:64
Thread-0:65
Thread-0:66
Thread-0:67
Thread-0:68
Thread-0:69
Thread-0:70
Thread-0:71
Thread-0:72
Thread-0:73
Thread-0:74
Thread-0:75
Thread-0:76
Thread-0:77
Thread-0:78
Thread-0:79
Thread-0:80
Thread-0:81
Thread-0:82
Thread-0:83
Thread-0:84
Thread-0:85
Thread-0:86
Thread-0:87
Thread-0:88
Thread-0:89
Thread-0:90
Thread-0:91
Thread-0:92
Thread-0:93
Thread-0:94
Thread-0:95
Thread-0:96
Thread-0:97
Thread-0:98
Thread-0:99
************************************************************
String.valueOf(other): convert other type into String
public final void setNameâ€‹(String name) // Changes the name of this thread to be equal to the argument name. 
**********************************************************
using setName
**********************************************************
package cn.itcast_02;

public class MyThread extends Thread {

	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i);
		}
	}	
}

package cn.itcast_02;

public class MyThreadTest {

	public static void main(String[] args) {
		MyThread mt1 = new MyThread();
		MyThread mt2 = new MyThread();
		mt1.setName("Emma");
		mt2.setName("Peter");
		mt1.start();
		mt2.start();
	}
}

result:
Peter:0
Peter:1
Peter:2
Peter:3
Peter:4
Peter:5
Emma:0
Peter:6
Peter:7
Peter:8
Emma:1
Peter:9
Emma:2
Emma:3
Emma:4
Emma:5
Peter:10
Emma:6
Peter:11
Emma:7
Peter:12
Emma:8
Peter:13
Emma:9
Peter:14
Emma:10
Peter:15
Emma:11
Peter:16
Emma:12
Peter:17
Emma:13
Peter:18
Peter:19
Emma:14
Peter:20
Emma:15
Peter:21
Emma:16
Emma:17
Peter:22
Emma:18
Emma:19
Peter:23
Emma:20
Peter:24
Emma:21
Peter:25
Peter:26
Peter:27
Emma:22
Peter:28
Emma:23
Emma:24
Emma:25
Emma:26
Peter:29
Emma:27
Peter:30
Emma:28
Peter:31
Emma:29
Peter:32
Emma:30
Emma:31
Emma:32
Peter:33
Emma:33
Peter:34
Emma:34
Emma:35
Peter:35
Emma:36
Peter:36
Emma:37
Peter:37
Peter:38
Peter:39
Emma:38
Peter:40
Emma:39
Peter:41
Emma:40
Peter:42
Emma:41
Peter:43
Emma:42
Peter:44
Emma:43
Peter:45
Emma:44
Peter:46
Emma:45
Peter:47
Emma:46
Peter:48
Emma:47
Peter:49
Emma:48
Peter:50
Emma:49
Peter:51
Emma:50
Peter:52
Emma:51
Peter:53
Emma:52
Peter:54
Emma:53
Peter:55
Emma:54
Peter:56
Emma:55
Peter:57
Emma:56
Peter:58
Emma:57
Peter:59
Emma:58
Peter:60
Emma:59
Peter:61
Emma:60
Peter:62
Emma:61
Peter:63
Emma:62
Peter:64
Peter:65
Peter:66
Emma:63
Peter:67
Emma:64
Emma:65
Emma:66
Emma:67
Emma:68
Emma:69
Emma:70
Emma:71
Emma:72
Emma:73
Emma:74
Emma:75
Emma:76
Emma:77
Emma:78
Emma:79
Emma:80
Emma:81
Emma:82
Emma:83
Emma:84
Emma:85
Emma:86
Emma:87
Emma:88
Emma:89
Emma:90
Emma:91
Emma:92
Emma:93
Emma:94
Emma:95
Emma:96
Emma:97
Emma:98
Emma:99
Peter:68
Peter:69
Peter:70
Peter:71
Peter:72
Peter:73
Peter:74
Peter:75
Peter:76
Peter:77
Peter:78
Peter:79
Peter:80
Peter:81
Peter:82
Peter:83
Peter:84
Peter:85
Peter:86
Peter:87
Peter:88
Peter:89
Peter:90
Peter:91
Peter:92
Peter:93
Peter:94
Peter:95
Peter:96
Peter:97
Peter:98
Peter:99

**************************************************
using constructor method
**************************************************
package cn.itcast_03;

public class MyThread extends Thread {
	public MyThread(String name) {
		super(name);
	}

	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i);
		}
	}	
}

package cn.itcast_03;

public class MyThreadTest {

	public static void main(String[] args) {
		MyThread mt1 = new MyThread("Emma");
		MyThread mt2 = new MyThread("Peter");
		mt1.start();
		mt2.start();
	}
}
**********************************************
How shall we get name of the thread of main method or other Classes not subclass of Thread?
public static Thread currentThread() // Returns a reference to the currently executing thread object.
System.out.println(Thread.currentThread().getName());// result: main
**************************************************
Thread dispatch:
Only the thread which has CPU execution, it can run code
Two Types of Thread dispatch:
	Time-sharing scheduling model: fair
	Preemption scheduling model:  by priorities;same priority, randomly(*** for Java)
**********************************************************
public final int getPriority() // Returns this thread's priority. default value is 5
public final void setPriorityâ€‹(int newPriority) // Changes the priority of this thread.
	Throws:
		IllegalArgumentException - If the priority is not in the range MIN_PRIORITY to MAX_PRIORITY.
			public static final int 	MAX_PRIORITY 	10
			public static final int 	MIN_PRIORITY 	1
			public static final int 	NORM_PRIORITY 	5
		SecurityException - if the current thread cannot modify this thread.

Note:
	A: default thread priority is 5
	B: thread priority is [1-10]
	C: thread with high priority only means it can grab CPU execution easily, but after more times executed, it
	has good effect
**********************************
package cn.itcast.thread_priorities;

public class ThreadPriority extends Thread {
	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i);
		}
	}
}

package cn.itcast.thread_priorities;

public class ThreadPriorityTest {

	public static void main(String[] args) {
		ThreadPriority tp1 = new ThreadPriority();
		ThreadPriority tp2 = new ThreadPriority();
		ThreadPriority tp3 = new ThreadPriority();
		
		tp1.setName("Dongfangbubai");
		tp2.setName("Linqingxia");
		tp3.setName("Linghuchong");
		
		System.out.println("tp1 priority:"+tp1.getPriority());
		System.out.println("tp2 priority:"+tp2.getPriority());
		System.out.println("tp3 priority:"+tp3.getPriority());
//		tp1.start();
//		tp2.start();
//		tp3.start();
	}
}

result:
tp1 priority:5
tp2 priority:5
tp3 priority:5
****************************************
package cn.itcast.thread_priorities;

public class ThreadPriorityTest {

	public static void main(String[] args) {
		ThreadPriority tp1 = new ThreadPriority();
		ThreadPriority tp2 = new ThreadPriority();
		ThreadPriority tp3 = new ThreadPriority();
		
		tp1.setName("Dongfangbubai");
		tp2.setName("Linqingxia");
		tp3.setName("Linghuchong");
		
		tp1.setPriority(1);
		tp3.setPriority(10);
		
		System.out.println("tp1 priority:"+tp1.getPriority());
		System.out.println("tp2 priority:"+tp2.getPriority());
		System.out.println("tp3 priority:"+tp3.getPriority());
		tp1.start();
		tp2.start();
		tp3.start();
	}
}

result:
tp1 priority:1
tp2 priority:5
tp3 priority:10
Dongfangbubai:0
Linqingxia:0
Linghuchong:0
Dongfangbubai:1
Dongfangbubai:2
Dongfangbubai:3
......
***********************************************************************************
public static void sleepâ€‹(long millis)
                  throws InterruptedException
*************************************************************************************
package cn.itcast.thread.sleep;

import java.util.Date;

public class ThreadSleep extends Thread {
	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i+","+new Date());
			try {
				Thread.sleep(1000);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
	}
}

package cn.itcast.thread.sleep;

public class ThreadSleepTest {

	public static void main(String[] args) {
		ThreadSleep ts1 = new ThreadSleep();
		ThreadSleep ts2 = new ThreadSleep();
		
		ts1.setName("Emma");
		ts2.setName("Peter");
		
		ts1.start();
		ts2.start();
	}
}

result:
Peter:0,Thu Jul 25 17:08:45 CST 2019
Emma:0,Thu Jul 25 17:08:45 CST 2019
Emma:1,Thu Jul 25 17:08:46 CST 2019
Peter:1,Thu Jul 25 17:08:46 CST 2019
Peter:2,Thu Jul 25 17:08:47 CST 2019
......
*****************************************************************************

thread control:
Day23_2.txt
**************************************************************************
Thread join: Waits for this thread to die.
public finalÂ voidÂ join() throws InterruptedException
**************************************************************************
package cn.itcast.thread.join;

public class MyThread extends Thread {
	@Override
	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i);
		}
	}
}

package cn.itcast.thread.join;

public class MyThreadJoinTest {

	public static void main(String[] args) {
		MyThread mt1 = new MyThread();
		MyThread mt2 = new MyThread();
		MyThread mt3 = new MyThread();
		
		mt1.setName("Liyuan");
		mt2.setName("Lishimin");
		mt3.setName("Liyuanba");
		
		mt1.start();
		try {
			mt1.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

		
		mt2.start();
		mt3.start();
	}
}


Result: // mt1 run at first, after that, mt2 and mt3 grab CPU execution
Liyuan:0
Liyuan:1
Liyuan:2
Liyuan:3
Liyuan:4
Liyuan:5
Liyuan:6
Liyuan:7
Liyuan:8
Liyuan:9
Liyuan:10
Liyuan:11
Liyuan:12
Liyuan:13
Liyuan:14
Liyuan:15
Liyuan:16
Liyuan:17
Liyuan:18
Liyuan:19
Liyuan:20
Liyuan:21
Liyuan:22
Liyuan:23
Liyuan:24
Liyuan:25
Liyuan:26
Liyuan:27
Liyuan:28
Liyuan:29
Liyuan:30
Liyuan:31
Liyuan:32
Liyuan:33
Liyuan:34
Liyuan:35
Liyuan:36
Liyuan:37
Liyuan:38
Liyuan:39
Liyuan:40
Liyuan:41
Liyuan:42
Liyuan:43
Liyuan:44
Liyuan:45
Liyuan:46
Liyuan:47
Liyuan:48
Liyuan:49
Liyuan:50
Liyuan:51
Liyuan:52
Liyuan:53
Liyuan:54
Liyuan:55
Liyuan:56
Liyuan:57
Liyuan:58
Liyuan:59
Liyuan:60
Liyuan:61
Liyuan:62
Liyuan:63
Liyuan:64
Liyuan:65
Liyuan:66
Liyuan:67
Liyuan:68
Liyuan:69
Liyuan:70
Liyuan:71
Liyuan:72
Liyuan:73
Liyuan:74
Liyuan:75
Liyuan:76
Liyuan:77
Liyuan:78
Liyuan:79
Liyuan:80
Liyuan:81
Liyuan:82
Liyuan:83
Liyuan:84
Liyuan:85
Liyuan:86
Liyuan:87
Liyuan:88
Liyuan:89
Liyuan:90
Liyuan:91
Liyuan:92
Liyuan:93
Liyuan:94
Liyuan:95
Liyuan:96
Liyuan:97
Liyuan:98
Liyuan:99
Lishimin:0
Liyuanba:0
Lishimin:1
Liyuanba:1
Lishimin:2
Liyuanba:2
Lishimin:3
Liyuanba:3
Lishimin:4
Liyuanba:4
Lishimin:5
Liyuanba:5
Lishimin:6
Liyuanba:6
Lishimin:7
Liyuanba:7
Lishimin:8
Liyuanba:8
Lishimin:9
Liyuanba:9
Lishimin:10
Liyuanba:10
Lishimin:11
Liyuanba:11
Lishimin:12
Lishimin:13
Liyuanba:12
Lishimin:14
Liyuanba:13
Lishimin:15
Liyuanba:14
Lishimin:16
Liyuanba:15
Lishimin:17
Liyuanba:16
Lishimin:18
Liyuanba:17
Lishimin:19
Liyuanba:18
Lishimin:20
Liyuanba:19
Lishimin:21
Liyuanba:20
Lishimin:22
Liyuanba:21
Liyuanba:22
Lishimin:23
Liyuanba:23
Liyuanba:24
Liyuanba:25
Liyuanba:26
Liyuanba:27
Lishimin:24
Liyuanba:28
Liyuanba:29
Lishimin:25
Lishimin:26
Lishimin:27
Lishimin:28
Lishimin:29
Lishimin:30
Liyuanba:30
Liyuanba:31
Liyuanba:32
Liyuanba:33
Liyuanba:34
Liyuanba:35
Liyuanba:36
Liyuanba:37
Lishimin:31
Liyuanba:38
Lishimin:32
Liyuanba:39
Lishimin:33
Liyuanba:40
Lishimin:34
Liyuanba:41
Lishimin:35
Liyuanba:42
Lishimin:36
Liyuanba:43
Lishimin:37
Liyuanba:44
Lishimin:38
Liyuanba:45
Lishimin:39
Liyuanba:46
Lishimin:40
Liyuanba:47
Lishimin:41
Liyuanba:48
Lishimin:42
Liyuanba:49
Lishimin:43
Liyuanba:50
Lishimin:44
Lishimin:45
Liyuanba:51
Lishimin:46
Lishimin:47
Liyuanba:52
Lishimin:48
Liyuanba:53
Lishimin:49
Liyuanba:54
Lishimin:50
Liyuanba:55
Lishimin:51
Liyuanba:56
Lishimin:52
Liyuanba:57
Lishimin:53
Liyuanba:58
Lishimin:54
Liyuanba:59
Lishimin:55
Liyuanba:60
Lishimin:56
Liyuanba:61
Lishimin:57
Liyuanba:62
Lishimin:58
Liyuanba:63
Lishimin:59
Lishimin:60
Liyuanba:64
Lishimin:61
Liyuanba:65
Lishimin:62
Liyuanba:66
Lishimin:63
Liyuanba:67
Lishimin:64
Liyuanba:68
Lishimin:65
Lishimin:66
Liyuanba:69
Lishimin:67
Lishimin:68
Lishimin:69
Liyuanba:70
Lishimin:70
Liyuanba:71
Lishimin:71
Liyuanba:72
Lishimin:72
Liyuanba:73
Lishimin:73
Lishimin:74
Liyuanba:74
Lishimin:75
Lishimin:76
Lishimin:77
Lishimin:78
Lishimin:79
Lishimin:80
Liyuanba:75
Lishimin:81
Liyuanba:76
Lishimin:82
Liyuanba:77
Lishimin:83
Liyuanba:78
Lishimin:84
Liyuanba:79
Lishimin:85
Liyuanba:80
Lishimin:86
Liyuanba:81
Lishimin:87
Liyuanba:82
Lishimin:88
Liyuanba:83
Lishimin:89
Liyuanba:84
Lishimin:90
Liyuanba:85
Lishimin:91
Liyuanba:86
Liyuanba:87
Liyuanba:88
Lishimin:92
Lishimin:93
Lishimin:94
Lishimin:95
Liyuanba:89
Lishimin:96
Liyuanba:90
Lishimin:97
Liyuanba:91
Lishimin:98
Liyuanba:92
Lishimin:99
Liyuanba:93
Liyuanba:94
Liyuanba:95
Liyuanba:96
Liyuanba:97
Liyuanba:98
Liyuanba:99
*****************************************************************
Thread yield:
public staticÂ voidÂ yield()
A hint to the scheduler that the current thread is willing to yield its current use of a processor. The scheduler is free to ignore this hint.
Make multiple threads more harmonious, but not guarantee each person once
**********************************************************************************
package cn.itcast.thread.yield;

public class MyThread extends Thread {
	@Override
	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i);
			Thread.yield();
		}
	}
}

package cn.itcast.thread.yield;

public class ThreadYieldTest {

	public static void main(String[] args) {
		MyThread mt1 = new MyThread();
		MyThread mt2 = new MyThread();
		
		mt1.setName("Linqingxia");
		mt2.setName("Zhangguorun");
		
		mt1.start();
		mt2.start();
	}
}


Result:
Linqingxia:0
Zhangguorun:0
Linqingxia:1
Zhangguorun:1
Linqingxia:2
Zhangguorun:2
Linqingxia:3
Zhangguorun:3
Linqingxia:4
Zhangguorun:4
Linqingxia:5
Zhangguorun:5
Linqingxia:6
Zhangguorun:6
Linqingxia:7
Zhangguorun:7
Linqingxia:8
Zhangguorun:8
Linqingxia:9
Zhangguorun:9
Linqingxia:10
Zhangguorun:10
Linqingxia:11
Linqingxia:12
Zhangguorun:11
Linqingxia:13
Zhangguorun:12
Linqingxia:14
Zhangguorun:13
Linqingxia:15
Zhangguorun:14
Linqingxia:16
Zhangguorun:15
Linqingxia:17
Zhangguorun:16
Linqingxia:18
Zhangguorun:17
Linqingxia:19
Zhangguorun:18
Linqingxia:20
Zhangguorun:19
Linqingxia:21
Zhangguorun:20
Linqingxia:22
Zhangguorun:21
Linqingxia:23
Zhangguorun:22
Linqingxia:24
Zhangguorun:23
Linqingxia:25
Zhangguorun:24
Linqingxia:26
Zhangguorun:25
Linqingxia:27
Zhangguorun:26
Linqingxia:28
Zhangguorun:27
Linqingxia:29
Zhangguorun:28
Zhangguorun:29
Linqingxia:30
Zhangguorun:30
Linqingxia:31
Zhangguorun:31
Linqingxia:32
Zhangguorun:32
Linqingxia:33
Zhangguorun:33
Linqingxia:34
Zhangguorun:34
Linqingxia:35
Zhangguorun:35
Linqingxia:36
Zhangguorun:36
Linqingxia:37
Zhangguorun:37
Linqingxia:38
Zhangguorun:38
Linqingxia:39
Zhangguorun:39
Linqingxia:40
Zhangguorun:40
Linqingxia:41
Zhangguorun:41
Linqingxia:42
Zhangguorun:42
Linqingxia:43
Zhangguorun:43
Linqingxia:44
Zhangguorun:44
Linqingxia:45
Zhangguorun:45
Linqingxia:46
Zhangguorun:46
Linqingxia:47
Zhangguorun:47
Linqingxia:48
Zhangguorun:48
Linqingxia:49
Zhangguorun:49
Linqingxia:50
Zhangguorun:50
Linqingxia:51
Zhangguorun:51
Linqingxia:52
Zhangguorun:52
Linqingxia:53
Zhangguorun:53
Linqingxia:54
Zhangguorun:54
Linqingxia:55
Zhangguorun:55
Linqingxia:56
Zhangguorun:56
Linqingxia:57
Zhangguorun:57
Linqingxia:58
Zhangguorun:58
Linqingxia:59
Zhangguorun:59
Linqingxia:60
Zhangguorun:60
Linqingxia:61
Zhangguorun:61
Linqingxia:62
Zhangguorun:62
Linqingxia:63
Zhangguorun:63
Linqingxia:64
Zhangguorun:64
Linqingxia:65
Zhangguorun:65
Linqingxia:66
Zhangguorun:66
Linqingxia:67
Zhangguorun:67
Linqingxia:68
Zhangguorun:68
Linqingxia:69
Zhangguorun:69
Linqingxia:70
Zhangguorun:70
Linqingxia:71
Zhangguorun:71
Linqingxia:72
Zhangguorun:72
Linqingxia:73
Zhangguorun:73
Linqingxia:74
Zhangguorun:74
Linqingxia:75
Zhangguorun:75
Linqingxia:76
Zhangguorun:76
Zhangguorun:77
Linqingxia:77
Zhangguorun:78
Linqingxia:78
Zhangguorun:79
Linqingxia:79
Zhangguorun:80
Linqingxia:80
Zhangguorun:81
Linqingxia:81
Zhangguorun:82
Linqingxia:82
Zhangguorun:83
Linqingxia:83
Zhangguorun:84
Linqingxia:84
Zhangguorun:85
Linqingxia:85
Zhangguorun:86
Linqingxia:86
Zhangguorun:87
Linqingxia:87
Zhangguorun:88
Linqingxia:88
Zhangguorun:89
Linqingxia:89
Zhangguorun:90
Linqingxia:90
Zhangguorun:91
Linqingxia:91
Zhangguorun:92
Linqingxia:92
Zhangguorun:93
Linqingxia:93
Zhangguorun:94
Linqingxia:94
Zhangguorun:95
Linqingxia:95
Zhangguorun:96
Linqingxia:96
Zhangguorun:97
Linqingxia:97
Zhangguorun:98
Linqingxia:98
Zhangguorun:99
Linqingxia:99
*********************************************************************************
Thread Daemon:
public finalÂ voidÂ setDaemon (booleanÂ on)
Marks this thread as either a daemon thread or a user thread. The Java Virtual Machine exits when the only threads running are all daemon threads.
This method must be invoked before the thread is started.
*******************************************************************************
package cn.itcast.thread.yield;

public class MyThread extends Thread {
	@Override
	public void run() {
		for (int i = 0; i < 100; ++i) {
			System.out.println(getName()+":"+i);
		}
	}
}


package cn.itcast.thread.daemon;

public class ThreadDaemonTest {

	public static void main(String[] args) {
		MyThread mt1 = new MyThread();
		MyThread mt2 = new MyThread();
		
		mt1.setName("Guan Yu");
		mt2.setName("Zhang Fei");
		
		mt1.setDaemon(true);
		mt2.setDaemon(true);
		
		mt1.start();
		mt2.start();
		
		Thread.currentThread().setName("Liu Bei");
		for (int i = 0; i < 5; ++i) {
			System.out.println(Thread.currentThread().getName()+":"+i);
		}

	}

}

Result:
Guan Yu:0
Liu Bei:0
Zhang Fei:0
Liu Bei:1
Guan Yu:1
Liu Bei:2
Liu Bei:3
Guan Yu:2
Zhang Fei:1
Guan Yu:3
Liu Bei:4
Guan Yu:4
Zhang Fei:2
Guan Yu:5

***************************************************
Thread stop
@Deprecated(since="1.2") public finalÂ voidÂ stop()
publicÂ voidÂ interrupt() // Interrupts this thread.
*******************************************************
package cn.itcast.thread.stop;

import java.util.Date;

public class MyThread extends Thread {
	@Override
	public void run() {
		System.out.println("start:"+new Date());
		
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
//			e.printStackTrace();
			System.out.println("Thread is stopped");
		}
		
		System.out.println("end:"+new Date());
	}
}

package cn.itcast.thread.stop;

public class ThreadStopTest {
	public static void main(String[] args) {
		MyThread mt = new MyThread();
		
		mt.setName("Zhou Jielun");
		
		mt.start();
//		try {
//			Thread.sleep(3000);
//			mt.stop();
//		} catch (InterruptedException e) {
//			e.printStackTrace();
//		}

	}

}

Result:
start:Thu Jul 25 21:58:07 CST 2019
end:Thu Jul 25 21:58:17 CST 2019
*******************************************************************************
package cn.itcast.thread.stop;

import java.util.Date;

public class MyThread extends Thread {
	@Override
	public void run() {
		System.out.println("start:"+new Date());
		
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
//			e.printStackTrace();
			System.out.println("Thread is stopped");
		}
		
		System.out.println("end:"+new Date());
	}
}

package cn.itcast.thread.stop;

public class ThreadStopTest {
	public static void main(String[] args) {
		MyThread mt = new MyThread();
		
		mt.setName("Zhou Jielun");
		
		mt.start();
		try {
			Thread.sleep(3000);
			mt.stop();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

}

Result: // the coming code canâ€™t be run, so it is not safe
start:Thu Jul 25 21:55:49 CST 2019
********************************************

Interrupt:
package cn.itcast.thread.stop;

import java.util.Date;

public class MyThread extends Thread {
	@Override
	public void run() {
		System.out.println("start:"+new Date());
		
		try {
			Thread.sleep(10000);
		} catch (InterruptedException e) {
//			e.printStackTrace();
			System.out.println("Thread is stopped");
		}
		
		System.out.println("end:"+new Date());
	}
}

package cn.itcast.thread.stop;

public class ThreadStopTest {
	public static void main(String[] args) {
		MyThread mt = new MyThread();
		
		mt.setName("Zhou Jielun");
		
		mt.start();
		try {
			Thread.sleep(3000);
//			mt.stop();
			mt.interrupt();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}

	}

}


Result:
start:Thu Jul 25 22:00:24 CST 2019
Thread is stopped
end:Thu Jul 25 22:00:27 CST 2019

************************************************************************
