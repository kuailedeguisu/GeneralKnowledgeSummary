1 关键字：
被java赋予特定的含义的单词
组成关键字的字母全部小写
goto, const作为保留字，不是关键字
类似于notepad++对关键字有特殊的颜色标识
class,public, static, void
关键字总共有50个左右

2.标识符
给类，方法，变量取名字的字符序列
英文大小写，数字，$和_
不能由数字开头
见名知义

包：文件夹，用于区分相同名字，包的命名全部小写
类或接口：一个单词或多个单词，每个单词首字母必须大写；HelloWorld,Student
变量：一个单词，单词的首字母小写；多个单词，从第二个单词开始，首字母大写;studentAge
常量：一个单词，全部大写；多个单词，每个字母都大写，用_隔开每个单词；STUDENT_MAX_NUMBER

3.注释
单行 //
多行 /**/不能嵌套使用的
文档注释 被javadoc解析，生成一个说明书，面向对象部分讲解
注释的作用：解释程序，提高程序的阅读性，帮助我们调试程序（逐渐缩小出问题的可能范围）

4.常量
分类：字面值常量，自定义常量
字符串常量：双引号括起来的内容 "Hello"
整数常量：所有的整数， 100
小数常量： 19.88
字符常量：用单引号括起来的内容 'a'
布尔常量： true false
空常量： null
常量的输出
System.out.println("hello");
System.out.println('a');
System.out.println(19.88);
System.out.println(true);

整数常量：
二进制 0b开头
八进制 0开头
十进制 默认
十六进制 0x开头
进制是一种进位的方式，x进制，表示逢x进1
计算机的电子原件的状态，开与关。表示数据也可以按照开关来表示。
为了表示更多的数据，国际化标准组织用8个这样的信号来表示数据，即字节，按照字节来存储数据。
一个字节占用8位。用数字1和0分别来表示1和0.
1 byte = 8 bit
1k = 1024byte
1m = 1024k
1g = 1024 m
1t = 1024g
简化二进制为8进制和16进制
八进制：把二进制的数据，从右开始，每三位一组合，最左边不够的时候，补0，然后计算对应的十进制数据，再把每个十进制数据组合起来，就是一个八进制数据。
十六进制：把二进制的数据，从右开始，每四位一组合，最左边不够的时候，补0，然后计算对应的十进制数据，再把每个十进制数据组合起来，就是一个十六进制数据。

		System.out.println(0b100100);   //36
		System.out.println(0156);       //110
		System.out.println(156);        //156
		System.out.println(0x156);      //342
   
系数： 每一个位上的数据值本身
基数：x进制的基数就是x
权：我们针对每一个位上的数据进行编号，从右边，并且是从0开始编号，这个编号就是该位上数据的权值
系数*基数^劝次幂相加
BCD码
任意的x进制到y进制的转换：x进制-十进制，十进制-y进制

原码反码补码：
所有数据在计算机中都是通过数据对应的补码来操作的
有符号的数据表示法：
  原码，反码，补码

原码：最高位1表示负数，0表示正数，其他都是数值位
原码：
      符号位     数值位
+7     0        0000111
-7     1        0000111

反码：正数的反码与其原码相同，负数的反码与原码符号位不变，数值位取反
       符号位    数值位
+7      0        0000111
-7      1        1111000

补码：正数的补码与原码相同，负数的补码是反码加1
        符号位    数值位
+7       0        0000111
-7       1        1111001
  
Practice:
原码是10110100B，求补码和反码
            符号位        数值位
原码          1          0110100
反码          1          1001011
补码          1          1001100

补码是11101110B，求原码
            符号位        数值位
补码         1            1101110
反码         1            1101101
原码         1            0010010

5.变量
变量：程序运行过程中，其值是可以在一定范围内改变
数据类型：限定
变量名：运算用空间中的值，给空间取一个名字
初始化值
数据类型 变量名 = 初始化值

java是强类型语言，所以每个变量要有数据类型
基本数据类型：
4类8种
A:整数（byte, long, short, int）
	byte            1
	short           2
	int             4
	long            8
B:浮点数
	float           4
	double          8
C:字符
	 char           1
D:布尔
	 boolean        1
整数默认int，小数默认double

		byte b = 10;
		int i = 100;
		short s = 34;
		long l = 1000000000L;
		float f = 19.88F;
		double d = 10000.998;
		char c = 'a';
		boolean bl = true;
		System.out.println(b);
		System.out.println(i);
		System.out.println(s);
		System.out.println(l);
		System.out.println(f);
		System.out.println(d);
		System.out.println(c);
		System.out.println(bl);
1)注意是否整数越界
byte:-128-127
2)long 末尾加L
3）float末尾加F
4）作用域
5）定义变量的时候最好给初始值，如果没有，但是在用之前一定要赋值

引用数据类型：
class, interface, []

默认类型转换：
我们在运算时，要求运算的数据类型必须一致，但是有的时候不相同时，有的可以做默认类型转换，从小到大的转换(byte,short,char-int-long-float-double)
byte,short,char相互之间不转换，他们参与的前提是先转换为int类型
在运算过程中，小类型转换为大类型，没有大类型转换为小类型，因为会损失精度
boolean类型不可以转换为其他类型
		byte  a = 4;
		int b = 4;
		byte c = a + b;//编译失败：error:incompatible types:possible lossy conversion from int to byte
		System.out.println(c);
		
强制类型转换：
从大类型到小类型转换
因为可能会损失精度，所以少用强制类型转换
目标数据类型 变量 = （目标数据类型） （被转换的数据类型）
		byte  a = 4;
		int b = 4;
		byte c = (byte)(a + b);
		System.out.println(c);
		
float f = (float)123.45;//not recommended, because it is changed from double to float

byte b1 = 3, b2 = 4, b;
b = b1 + b2;// b1 and b2 are computed into int, compliling error with possible lossy conversion from int to byte
b = 3 + 4;//常量，先把计算结果计算出来，然后看是否在byte的范围内，如果在就不报错
byte b = 130;//compliling error with possible lossy conversion from int to byte;because byte is -127-128,130不在此范围内，可以使用强制类型              //转换 byte b = (byte)130;//-126
130 10000010
130 int（4byte） 00000000 00000000 00000000 10000010
补码是00000000 000000000 00000000 1000010
byte截取的也是补码 1000010
反码 1000001
原码 1111110 -126

练习：
byte b = (byte)300;
原码 00000000 00000000 00000001 00101100
补码 00000000 00000000 00000001 00101100
截取1byte后的补码
补码 00101100
反码 00101011
原码 01010100 
十进制 84？（为啥程序运行结果是44？）

float f = 123.45F;//recommended

XJad:反编译工具
可以读懂反编译工具

字符变量
字符变量在内存中是二进制存在的
'a' 97


