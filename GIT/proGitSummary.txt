pro Git(中文版)
https://gitee.com/progit/

VCS ： Version Control System

CVCS : Centralized Version Control System
每个客户端连接集中版本控制Server，管理员管理权限（受限于中央服务器的单点故障；中心数据库所在的磁盘发生损坏导致所有数据丢失）
SVN

DVCS : Distributed Version Control System
GIT
客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来
任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。
因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。


其他版本控制系统
将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。

GIT
主要对当时的全部文件制作一个快照并保存这个快照的索引
如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。

Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。

Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 
已提交表示数据已经安全的保存在本地数据库中。 
已修改表示修改了文件，但还没保存到数据库中。 
已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。

Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。

基本的 Git 工作流程如下：
1. 在工作目录中修改文件。
2. 暂存文件，将文件的快照放入暂存区域。
3. 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。

git config file:
1. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的
git config 时，它会从此文件读写配置变量。
2. ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git
读写此文件。
3. 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。

每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。

--global只需要配置一次
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

查看当前的配置
git config --list

git help（不用联网就可以）
$ git help <verb>
$ git <verb> --help
$ man git-<verb>


untracked: Git在之前的快照（提交）中没有这些文件,Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟
踪该文件”， 这样的处理让你不必担心将生成的二进制文件或其它不想被跟踪的文件包含进来。
unmodified:
modified: 
staged: 使用命令 git add 开始跟踪一个文件,添加内容到下一次提交中

Untracked files:(after echo or touch command to create one new file in local machine)
Changes to be committed:(after git add)
Changes not staged for commit:(after modifing one file)

git status查看状态
git status -s(--short)

$ git status -s
A  README.txt
 M test.txt
?? test1.txt
新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。

出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左
边的 M 表示该文件被修改了并放入了暂存区。
$ git status -s
 M test.txt
?? test1.txt

HCL@LP-2Q2ZKC2 ~/basicKnowledgeSummary
$ git add test.txt

HCL@LP-2Q2ZKC2 ~/basicKnowledgeSummary
$ git status -s
M  test.txt
?? test1.txt


git diff 查看变化
git diff 将通过文件补丁的格式显示具体哪些行发生了改变
要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff, 工作目录中当前文件和暂存区域快照之间的差异
若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令或者git diff --staged

也可以选择difftool来看
git difftool

git commit 提交
确认所有需要的改动都暂存起来了，git status,如果有些文件没有暂存，只提交已经暂存的部分，其他的还会留在本地
git commit -m "comments"
git commit -a(包含git add操作)
git commit -a -m 'added new benchmarks'

git rm 删除文件
git rm filename
要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。(未跟踪列表中就不会有这个文件)
如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。 
git rm -f filename

git mv 重命名文件
git mv file_from file_to

git log 查看提交历史
默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面
git log -p(用来显示每次提交的内容差异)
git log --stat(查看每次commit的简略信息)
--stat 选项在每次提交的下面列出额所有被修改过的文件、有多少文件倍修改了以及被修改
过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结
git log --pretty=oneline（oneline 将每个提交放在一行显示，查看的提交数很大时非常有用）（short，full 和 fuller）
git log --pretty=format
git log --pretty=format 常用的选项
选项 说明
%H提交对象（commit）的完整哈希字串
%h提交对象的简短哈希字串
%T树对象（tree）的完整哈希字串
%t树对象的简短哈希字串
%P父对象（parent）的完整哈希字串
%p父对象的简短哈希字串
%an作者（author）的名字
%ae作者的电子邮件地址
%ad作者修订日期（可以用 --date= 选项定制格式）
%ar作者修订日期，按多久以前的方式显示
%cn提交者(committer)的名字
%ce提交者的电子邮件地址
%cd提交日期
%cr提交日期，按多久以前的方式显示
%s提交说明
作者：修改code的人，提交者：最后合代码进git的人
git log --graph(当oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些ASCII字符串来
形象地展示你的分支、合并历史)

git log 的常用选项
选项 说明
-p按补丁格式显示每个更新之间的差异。
--stat显示每次更新的文件修改统计信息。
--shortstat只显示 --stat 中最后的行数修改添加移除统计。
--name-only仅在提交信息后显示已修改的文件清单。
--name-status显示新增、修改、删除的文件清单。
--abbrev-commit仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph显示 ASCII 图形表示的分支合并历史。
--pretty使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和
format（后跟指定格式）。






