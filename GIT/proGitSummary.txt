pro Git(中文版)
https://gitee.com/progit/

VCS ： Version Control System

CVCS : Centralized Version Control System
每个客户端连接集中版本控制Server，管理员管理权限（受限于中央服务器的单点故障；中心数据库所在的磁盘发生损坏导致所有数据丢失）
SVN

DVCS : Distributed Version Control System
GIT
客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来
任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。
因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。


其他版本控制系统
将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。

GIT
主要对当时的全部文件制作一个快照并保存这个快照的索引
如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。

Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。

Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 
已提交表示数据已经安全的保存在本地数据库中。 
已修改表示修改了文件，但还没保存到数据库中。 
已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。

Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。

基本的 Git 工作流程如下：
1. 在工作目录中修改文件。
2. 暂存文件，将文件的快照放入暂存区域。
3. 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。

git config file:
1. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的
git config 时，它会从此文件读写配置变量。
2. ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git
读写此文件。
3. 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。

每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。

--global只需要配置一次
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

查看当前的配置
git config --list

git help（不用联网就可以）
$ git help <verb>
$ git <verb> --help
$ man git-<verb>

