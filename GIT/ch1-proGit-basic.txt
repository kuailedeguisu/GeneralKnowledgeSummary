pro Git(中文版)
https://gitee.com/progit/

VCS ： Version Control System

CVCS : Centralized Version Control System
每个客户端连接集中版本控制Server，管理员管理权限（受限于中央服务器的单点故障；中心数据库所在的磁盘发生损坏导致所有数据丢失）
SVN

DVCS : Distributed Version Control System
GIT
客户端并不只提取最新版本的文件快照，而是把代码仓库完整地镜像下来
任何一处协同工作用的服务器发生故障，事后都可以用任何一个镜像出来的本地仓库恢复。
因为每一次的克隆操作，实际上都是一次对代码仓库的完整备份。


其他版本控制系统
将它们保存的信息看作是一组基本文件和每个文件随时间逐步累积的差异。

GIT
主要对当时的全部文件制作一个快照并保存这个快照的索引
如果文件没有修改，Git 不再重新存储该文件，而是只保留一个链接指向之前存储的文件。

Git 数据库中保存的信息都是以文件内容的哈希值来索引，而不是文件名。

Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。 
已提交表示数据已经安全的保存在本地数据库中。 
已修改表示修改了文件，但还没保存到数据库中。 
已暂存表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。

Git 项目的三个工作区域的概念：Git 仓库、工作目录以及暂存区域。

基本的 Git 工作流程如下：
1. 在工作目录中修改文件。
2. 暂存文件，将文件的快照放入暂存区域。
3. 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。

git config file:
1. /etc/gitconfig 文件: 包含系统上每一个用户及他们仓库的通用配置。 如果使用带有 --system 选项的
git config 时，它会从此文件读写配置变量。
2. ~/.gitconfig 或 ~/.config/git/config 文件：只针对当前用户。 可以传递 --global 选项让 Git
读写此文件。
3. 当前使用仓库的 Git 目录中的 config 文件（就是 .git/config）：针对该仓库。

每一个级别覆盖上一级别的配置，所以 .git/config 的配置变量会覆盖 /etc/gitconfig 中的配置变量。

--global只需要配置一次
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com

查看当前的配置
git config --list

git help（不用联网就可以）
$ git help <verb>
$ git <verb> --help
$ man git-<verb>


untracked: Git在之前的快照（提交）中没有这些文件,Git 不会自动将之纳入跟踪范围，除非你明明白白地告诉它“我需要跟
踪该文件”， 这样的处理让你不必担心将生成的二进制文件或其它不想被跟踪的文件包含进来。
unmodified:
modified: 
staged: 使用命令 git add 开始跟踪一个文件,添加内容到下一次提交中

Untracked files:(after echo or touch command to create one new file in local machine)
Changes to be committed:(after git add)
Changes not staged for commit:(after modifing one file)

git status查看状态
git status -s(--short)

$ git status -s
A  README.txt
 M test.txt
?? test1.txt
新添加的未跟踪文件前面有 ?? 标记，新添加到暂存区中的文件前面有 A 标记，修改过的文件前面有 M 标记。

出现在右边的 M 表示该文件被修改了但是还没放入暂存区，出现在靠左
边的 M 表示该文件被修改了并放入了暂存区。
$ git status -s
 M test.txt
?? test1.txt


$ git add test.txt


$ git status -s
M  test.txt
?? test1.txt


git diff 查看变化
git diff 将通过文件补丁的格式显示具体哪些行发生了改变
要查看尚未暂存的文件更新了哪些部分，不加参数直接输入 git diff, 工作目录中当前文件和暂存区域快照之间的差异
若要查看已暂存的将要添加到下次提交里的内容，可以用 git diff --cached 命令或者git diff --staged

也可以选择difftool来看
git difftool

git commit 提交
确认所有需要的改动都暂存起来了，git status,如果有些文件没有暂存，只提交已经暂存的部分，其他的还会留在本地
git commit -m "comments"
git commit -a(包含git add操作)
git commit -a -m 'added new benchmarks'

git rm 删除文件
git rm filename
要从 Git 中移除某个文件，就必须要从已跟踪文件清单中移除（确切地说，是从暂存区域移除），然后提交。(未跟踪列表中就不会有这个文件)
如果删除之前修改过并且已经放到暂存区域的话，则必须要用强制删除选项 -f（译注：即 force 的首字母）。 
git rm -f filename

git mv 重命名文件
git mv file_from file_to

git log 查看提交历史
默认不用任何参数的话，git log 会按提交时间列出所有的更新，最近的更新排在最上面
git log -p(用来显示每次提交的内容差异)
git log --stat(查看每次commit的简略信息)
--stat 选项在每次提交的下面列出额所有被修改过的文件、有多少文件倍修改了以及被修改
过的文件的哪些行被移除或是添加了。 在每次提交的最后还有一个总结
git log --pretty=oneline（oneline 将每个提交放在一行显示，查看的提交数很大时非常有用）（short，full 和 fuller）
git log --pretty=format
git log --pretty=format 常用的选项
选项 说明
%H提交对象（commit）的完整哈希字串
%h提交对象的简短哈希字串
%T树对象（tree）的完整哈希字串
%t树对象的简短哈希字串
%P父对象（parent）的完整哈希字串
%p父对象的简短哈希字串
%an作者（author）的名字
%ae作者的电子邮件地址
%ad作者修订日期（可以用 --date= 选项定制格式）
%ar作者修订日期，按多久以前的方式显示
%cn提交者(committer)的名字
%ce提交者的电子邮件地址
%cd提交日期
%cr提交日期，按多久以前的方式显示
%s提交说明
作者：修改code的人，提交者：最后合代码进git的人
git log --graph(当oneline 或 format 与另一个 log 选项 --graph 结合使用时尤其有用。 这个选项添加了一些ASCII字符串来
形象地展示你的分支、合并历史)

git log 的常用选项
选项 说明
-p按补丁格式显示每个更新之间的差异。
--stat显示每次更新的文件修改统计信息。
--shortstat只显示 --stat 中最后的行数修改添加移除统计。
--name-only仅在提交信息后显示已修改的文件清单。
--name-status显示新增、修改、删除的文件清单。
--abbrev-commit仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
--relative-date使用较短的相对时间显示（比如，“2 weeks ago”）。
--graph显示 ASCII 图形表示的分支合并历史。
--pretty使用其他格式显示历史提交信息。可用的选项包括 oneline，short，full，fuller 和
format（后跟指定格式）。
-n(从最近时间开始的n条commit记录，git log有分页机制，可以不用这个选项)
--since(git log --since=1.hour)
--until
--author
--grep
--all-match(如果多个选项同时满足，需要加--all-match)
-S 筛选选项是 -S，可以列出那些添加或移除了某些字符串的提交

 限制 git log 输出的选项
选项 说明
-(n)仅显示最近的 n 条提交
--since, --after 仅显示指定时间之后的提交。
--until, --before 仅显示指定时间之前的提交。
--author仅显示指定作者相关的提交。
--committer仅显示指定提交者相关的提交。
--grep仅显示含指定关键字的提交
-S仅显示添加或移除了某个关键字的提交

git commit --amend(修改最后一次commit中的commit message，在git log中查看会覆盖原来的commit记录)
这个命令会将暂存区中的文件提交。  如果自上次提交以来你还未做任何修改（例如，在上次提交后马上执行了
此命令），那么快照会保持不变，而你所修改的只是提交信息。

git reset取消已经在暂存区域中的文件
git reset --hard HEAD（修改暂存区域与工作目录）
git reset(只会修改暂存区域)

git checkout撤销在工作目录中的修改，回到上次提交时的状态
git checkout -- filename
 git checkout -- [file] 是一个危险的命令，这很重要。 你对那个
文件做的任何修改都会消失 - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不
想要那个文件了，否则不要使用这个命令。
在 Git 中任何 已提交的 东西几乎总是可以恢复的。 甚至那些被删除的分支中的提交或使用 --amend 选
项覆盖的提交也可以恢复（阅读 数据恢复 了解数据恢复）。 然而，任何你未提交的东西丢失后很可能再也找不
到了。


远程仓库
git remote查看远程仓库
git remote 它会列出你指定的每一个远程服务器的简写
git remote -v 选项 -v，会显示需要读写远程仓库使用的 Git 保存的简写与其对应的 URL。

git fetch从远程仓库中抓取与拉取
git fetch remotename
这个命令会访问远程仓库，从中拉取所有你还没有的数据(如果之前通过clone拿到了数据，之后用fetch获取你没有的数据)
必须注意 git fetch 命令会将数据拉取到你的本地仓库 - 它并不会自动合并或修改你当前的工作。 当准备好时你必须手动将其合并入你的工作。
可以使用 git pull 命令来自动的抓取然后合并远程分支到当前分支。
git clone 命令会自动设置本地 master 分支跟踪克隆的远程仓库的 master 分支
运行 git pull 通常会从最初克隆的服务器上抓取数据并自动尝试合并到当前所在的分支。

git push 推送到远程仓库
git push [remote-name] [branch-name]
git push origin master(当git push 失败，我们需要先用git pull将远端的改动合并到本地)

查看远程仓库
git remote show origin

远程仓库的移除与重命名
git remote rename repo_from repo_to
git remote rm repo_name

打标签：
Git 使用两种主要类型的标签：轻量标签（lightweight）与附注标签（annotated）
一个轻量标签很像一个不会改变的分支 - 它只是一个特定提交的引用。
然而，附注标签是存储在 Git 数据库中的一个完整对象。 它们是可以被校验的；其中包含打标签者的名字、电子
邮件地址、日期时间；还有一个标签信息；并且可以使用  GNU  Privacy  Guard  （GPG）签名与验证。
通常建议创建附注标签，这样你可以拥有以上所有信息；但是如果你只是想用一个临时的标签，或者因为某些原
因不想要保存那些信息，轻量标签也是可用的。
创建附注标签:
git tag -a V1.0 -m "Version 1.0"
查看特定标签的信息：
git show V1.0(标签信息与对应的提交信息)
创建轻量标签，不需要使用 -a、-s 或 -m 选项，只需要提供标签名字：
git tag V1.1
后期打标签
git tag -a V1.2 commitId

共享标签
默认情况下，git push 命令并不会传送标签到远程仓库服务器上。 在创建完标签后你必须显式地推送标签到
共享服务器上。 这个过程就像共享远程分支一样 - 你可以运行 git push origin [tagname]

git 别名
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit
$ git config --global alias.st status
$ git config --global alias.last 'log -1 HEAD'
$ git config --global alias.unstage 'reset HEAD --'
可以将这些添加到这个repo的上一级目录下的.bashrc文件中，重新打开bash就可以生效（这样.bashrc可以各个repo公用）
这里的--global可以换成--system（区别是什么？）

git co
git br
git ci
git st






