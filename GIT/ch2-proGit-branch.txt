This is for summary git branch

git branch testing(创建branch testing)
git branch（查看当前branch）
git checkout testing（切换branch从master到testing）
touch test.txt
git add .
git commit -m "***"（branch testing上的改动commit到local repo中）

git checkout master(切换branch从testing到master)
git merge testing（合并branch testing到branch master）
git push origin master（将master上的改动push到remote repo）
git branch -d testing(删除不用的branch testing)

if branch master and branch testing both modify test.txt and committed to the local repo, when merging testing modification to master branch,it will have the conflict.We need fix the conflict manually.
$ git merge fast(都在本地的git 版本库中，没有和远端的git版本库交互)
Auto-merging GIT/gitTest.txt
CONFLICT (content): Merge conflict in GIT/gitTest.txt
Automatic merge failed; fix conflicts and then commit the result.

$ git diff master fast
diff --git a/GIT/gitTest.txt b/GIT/gitTest.txt
index 9d0fcb3..1dceff1 100644
--- a/GIT/gitTest.txt
+++ b/GIT/gitTest.txt
@@ -1 +1 @@
-This is for master branch git summary.
+This is for fast branch git summary to version two.

查看各个分支最近的一次commit
git branch -v
git branch --merged(查看已经merged的branch)
git branch --no-merged（产看没有merged的branch，如果不需要merge，删除这个branch用git branch -D branchname）

“origin” 并无特殊含义
远程仓库名字 “origin” 与分支名字 “master” 一样，在 Git 中并没有任何特别的含义一
样。 同时 “master” 是当你运行 git init 时默认的起始分支名字，原因仅仅是它的广泛
使用，“origin” 是当你运行 git clone 时默认的远程仓库名字。 如果你运行 git clone
-o booyah，那么你默认的远程分支名字将会是 booyah/master。

如果不想在每一次推送时都输入用户名与密码，你可以设置一个 “credential cache”。 最
简单的方式就是将其保存在内存中几分钟，可以简单地运行  git  config  --global credential.helper cache 来设置它

git branch -vv查看设置的所有跟踪分支
behind n : remote repo有n个commit没有pull到local repo
ahead n : local repo有n个commit没有push到remote repo
local repo is n commit ahead of remote repo
local repo is n commit behind of remote repo
如果想要统计最新的领先与落后数字，需要在运行此命令前抓
取所有的远程仓库。 可以像这样做：$ git fetch --all; git branch -vv

当 git fetch 命令从服务器上抓取本地没有的数据时，它并不会修改工作目录中的内容。 它只会获取数据然后
让你自己合并。 然而，有一个命令叫作 git pull 在大多数情况下它的含义是一个 git fetch 紧接着一个
git merge 命令。

从远端服务器删除
git push origin --delete branchname

合并和变基：
merge：三方合并，它会把两个分支的最新快照（C3 和 C4）以及二者最近的共同祖先（C2）进行三方合并，合并的结果是生成一个新的快照（并提交）。
rebase：变基，它的原理是首先找到这两个分支（即当前分支 experiment、变基操作的目标基底分支 master）的最近共同祖先 C2，然后对比当前分支相对于该祖先的历次提交，提取相应的修改并存为临时文件，然后将当前分支指向目标基底 C3, 最后以此将之前另存为临时文件的修改依序应用。
！！！！不要对在你的仓库外有副本的分支执行变基。！！！！
如果遇到“有人推送了经过变基的提交，并丢弃了你的本地开发所基于的一些提交”
在本例中另一种简单的方法是使用 git pull --rebase 命令而不是直接 git pull。 又或者你可以自己手动
完成这个过程，先 git fetch，再 git rebase teamone/master。
如果你习惯使用 git pull ，同时又希望默认使用选项 --rebase，你可以执行这条语句 git config
--global pull.rebase true 来更改 pull.rebase 的默认配置。
总的原则是，只对尚未推送或分享给别人的本地修改执行变基操作清理历史，从不对已推送至别处的提交执行变
基操作，这样，你才能享受到两种方式带来的便利。







