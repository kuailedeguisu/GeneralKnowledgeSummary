1.C++ OO的特点
封装，继承，多态

2.智能指针之间的区别和实现原理

3.array的内部实现原理

4.vector的内部实现原理

5.如何判断一个list是环形的

6.const char* substr(const char* pSrc, const char* pTarget)
判断pTarget是否是pSrc的子串，如果是，返回这个开始的index
例如pSrc：abcdef
pTarget：cd
返回pSrc中c字符的地址

7.gdb中有可执行文件和coredump文件，不用再run来获取代码调用关系，这种情况如何不用重头run来调到某个函数上去

8.gcc编译的时候加了调试信息，但是之后又不想用这些调试信息，如何去掉调试信息？

9.redefinition of "class *"
https://blog.csdn.net/mantis_1984/article/details/53725642
in header file,
add condition compilation 
#ifndef _SCREEN_H_
#define _SCREEN_H_
#endif

10.static静态对象何时构造
https://blog.csdn.net/xd_122/article/details/44536303
分析：在一个类中，如果存在其他类的成员，先进行构造其他类的成员，若这个类对象是static的，静态对象是在所有其他对象之前进行构造，若这个静态对象要是继承某个父类，应先构造父类，在构造派生类。
析构的顺序与其相反 进行，静态函数最后 析构。
总结：析构顺序：

1 先执行函数体的析构

2 然后按照声明顺续相反的执行所有非静态对象的析构

3 执行自己的父析构

4 若有静态成员对象，则最后析构


构造顺序：

1.先构造自己的父类，若是有静态成员对象，最先构造静态成员对象的父类，然后是静态成员对象，在其次是自己父类构造

2.其他非静态成员对象的构造

3.自己的构造函数


11. 引用和指针的区别？

12.gdb多线程调试

13.ps多线程相关的option

14.如何判断大小端问题，除了打印

15.设计模式的考虑

16.从客户那里拿到的coredump文件，没有符号表的可执行文件如何debug，可能是其他部件的问题


17.tcp拥塞如何处理？

18.unordered_map原理


19.哈希的原理


20.$?的含义


21.ipsec安全性原理


22.ssl在哪一层？


23.c++11

24.makefile

25.shell

26.僵死进程和孤儿进程


C++ standard libary source code location:
/usr/include/c++/4.4.*/
/usr/include/c++/4.4.*/bits

gcc version: 4.9.2


