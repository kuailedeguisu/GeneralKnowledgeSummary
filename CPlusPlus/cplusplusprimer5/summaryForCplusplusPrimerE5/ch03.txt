string, 向量和数组
1.数据结构
标准库的类
string：可变长字符串
vector：可变长的集合
array：内置类型

2.using声明
using namespace::name;// write name instead of namespace::name
头文件中不要添加using声明

3.string initialization
    string s1;//default initialization
    string s2 = s1;//copy initialization
    string s3 = "Hello world!";//copy initialization
    string s4(10,'c');//direct initialization
    string s5 = string(20, 'a');//copy initialization, string tmp(20,'a'); string s5 = tmp;

4. string operation
empty() //bool
size() //not include "\0"
getline() //include blank until return-line
str3 = str1 + "," + str2;//str1 and str2 must be string type
字符串字面值常量和string是两种不同的类型，所以字符串字面值常量不支持+

isalnum(c):c为字母或者数字时为真
isalpha(c):当c是字母时为真
iscntrl（c）：当c时控制字符时为真
isdigit(c) : 当c时数字时为真
isgraph（c）：当c不是空格但可打印时为真
islower（c）：当c是小写字母时为真
isprint（c）：当c是可打印字符（包含空格）
ispunct（c） : 当c是标点符号时为真
isspace（c）：当c是空白时为真
isupper（c）：当c是大写字母时为真
isxdigit（c）：当c是十六进制数字时为真
tolower(c):如果c是大写字母就输出小写字母，否则原样输出
toupper（c）：如果c是小写字母就输出大写字母，否则原样输出

We must check legal index then use [index]
index type is string::size_type, which can be got by decltype(str.size())

for (decltype(str.size()) index = 0 ; index != str.size(); ++index)
    str[index] = toupper(str[index]);
cout << str << endl;
    

4.vector
4.1概念
vector是类模板，需要实例化为某种类型才可以使用，vector中的对象可以是内置类型和自定义类型
但是不存在包含引用的vector，因为引用不是对象

4.2 vector initialization
vector<T> vec;
vector<T> vec1(vec);
vector<T> vec2 = vec;
vector<T> vec3(n, element);//n 个element
vector<T> vec4(n);//n个默认值的元素，如果T为int，就是10个0
vector<T> vec6{ele1, ele2, ele3,...};//列表初始化
vector<T> vec7 = {ele1, ele2, ele3,...};

():构造vector的元素
{}：列表初始化，但是如果提供的列表不能初始化vector时，也会构造vector
vector<string> svec{10,"hi"}//10个“hi”
vector<string> svec("hi");//nok because we can't use string literal to initialize vector

4.3 vector operation
v.empty()
v.size()
v.push_back(t)
v[i]
v1 = v2
v1 = {a, b, c };//用列表中的元素替换v1中的元素
v1 == v2
v1 != vw
< <= > >=


